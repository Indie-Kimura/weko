GLOB sdist-make: /code/modules/weko-items-autofill/setup.py
<<<<<<< HEAD
c1 inst-nodeps: /code/modules/weko-items-autofill/.tox/.tmp/package/1/weko-items-autofill-1.0.0.dev20190000.zip
c1 installed: alabaster==0.7.13,alembic==0.9.6,amqp==2.6.0,angular-gettext-babel==0.3,aniso8601==8.0.0,arrow==0.12.1,asn1crypto==0.23.0,atomicwrites==1.4.1,attrs==17.4.0,b2handle==1.1.2,Babel==2.5.1,bagit==1.7.0,beautifulsoup4==4.9.3,bibtexparser==1.0.1,billiard==3.6.3.0,binaryornot==0.4.4,bleach==3.1.0,blinker==1.4,boto3==1.7.84,botocore==1.10.84,cachelib==0.1,cachetools==4.2.4,cchardet==2.1.1,celery==4.4.4,certifi==2017.11.5,cffi==1.11.2,chardet==3.0.4,citeproc-py==0.5.1,citeproc-py-styles==0.1.2,click==6.7,cookiecutter==1.6.0,counter-robots==2018.6,coverage==6.2,cryptography==2.1.4,datacite==1.0.1,DateTime==4.9,decorator==4.1.2,defusedxml==0.5.0,dictdiffer==0.7.0,distlib==0.3.6,dnspython==2.2.1,docutils==0.18.1,dojson==1.3.2,elasticsearch==6.1.1,elasticsearch-dsl==6.4.0,elementpath==1.0.6,email-validator==1.0.5,entrypoints==0.2.3,feedgen==0.7.0,filelock==3.4.1,Flask==1.1.0,Flask-Admin==1.5.3,Flask-Alembic==2.0.1,Flask-Assets==0.12,Flask-BabelEx==0.9.4,Flask-Breadcrumbs==0.5.0,Flask-Caching==1.10.1,Flask-CeleryExt==0.3.4,Flask-Collect==1.2.2,Flask-Cors==3.0.3,Flask-DebugToolbar==0.13.1,Flask-IIIF==0.6.1,Flask-KVSession==0.6.2,Flask-Limiter==1.1.0,Flask-Login==0.4.1,Flask-Mail==0.9.1,flask-marshmallow==0.14.0,Flask-Menu==0.6.0,-e git+https://github.com/RCOSDP/flask-oauthlib.git@83148ee01e9da37a8a1134febe83bc32b95bac6e#egg=Flask_OAuthlib,Flask-Plugins==1.6.1,Flask-Principal==0.4.0,Flask-RESTful==0.3.8,Flask-Security==3.0.0,flask-shell-ipython==0.4.1,Flask-Sitemap==0.4.0,Flask-SQLAlchemy==2.3.2,flask-talisman==0.4.1,Flask-WTF==0.14.3,-e git+https://github.com/RCOSDP/pyfpdf.git@f9b032148283d535cabc7789858081c80de36fef#egg=fpdf,frozendict==2.3.8,fs==0.5.4,ftfy==4.4.3,future==0.16.0,github3.py==1.1.0,html5lib==1.0.1,idna==2.6,iiif-prezi==0.3.0,imagesize==1.4.1,importlib-metadata==4.8.3,importlib-resources==5.4.0,infinity==1.4,intervals==0.8.0,invenio-access==1.1.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_accounts&subdirectory=modules/invenio-accounts,invenio-admin==1.1.2,invenio-app==1.1.0,invenio-assets==1.0.0,invenio-base==1.0.2,invenio-cache==1.0.0,invenio-celery==1.1.3,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_communities&subdirectory=modules/invenio-communities,invenio-config==1.0.0,invenio-csl-rest==1.0.0a1,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_db&subdirectory=modules/invenio-db,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_deposit&subdirectory=modules/invenio-deposit,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_files_rest&subdirectory=modules/invenio-files-rest,invenio-formatter==1.0.0b3,invenio-i18n==1.0.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_iiif&subdirectory=modules/invenio-iiif,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_indexer&subdirectory=modules/invenio-indexer,invenio-jsonschemas==1.0.0,invenio-logging==1.0.0b3,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_mail&subdirectory=modules/invenio-mail,invenio-marc21==1.0.0a8,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_oaiharvester&subdirectory=modules/invenio-oaiharvester,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_oaiserver&subdirectory=modules/invenio-oaiserver,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_oauth2server&subdirectory=modules/invenio-oauth2server,invenio-oauthclient==1.0.0,invenio-pidrelations==1.0.0a4,invenio-pidstore==1.0.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_previewer&subdirectory=modules/invenio-previewer,invenio-query-parser==0.6.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_queues&subdirectory=modules/invenio-queues,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_records&subdirectory=modules/invenio-records,invenio-records-files==1.0.0a10,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_records_rest&subdirectory=modules/invenio-records-rest,invenio-records-ui==1.0.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_resourcesyncclient&subdirectory=modules/invenio-resourcesyncclient,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_resourcesyncserver&subdirectory=modules/invenio-resourcesyncserver,invenio-rest==1.1.2,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_s3&subdirectory=modules/invenio-s3,-e git+https://github.com/RCOSDP/invenio-search.git@cff9744c5dc651893a9c51672c5b8da9adc21e16#egg=invenio_search,-e git+https://github.com/RCOSDP/invenio-search-ui.git@74bd3b2990ff27b39e01b6b31be9a0b5fda3dd0f#egg=invenio_search_ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_stats&subdirectory=modules/invenio-stats,invenio-theme==1.0.0b4,ipaddress==1.0.19,ipython==6.2.1,ipython-genutils==0.2.0,itsdangerous==0.24,jedi==0.11.0,Jinja2==2.10.1,jinja2-cli==0.6.0,jinja2-time==0.2.0,jmespath==0.10.0,jsmin==2.2.2,jsonpatch==1.21,jsonpath-ng==1.5.2,jsonpointer==1.14,jsonref==0.1,jsonresolver==0.2.1,jsonschema==2.6.0,jupyter-client==5.2.2,jupyter-core==4.4.0,-e git+https://github.com/RCOSDP/kombu.git@f204fdf078d5e94393c86693f545e2d011f620f5#egg=kombu,limits==1.2.1,lxml==4.1.1,Mako==1.0.7,MarkupSafe==1.1.1,marshmallow==2.20.1,marshmallow-sqlalchemy==0.23.1,maxminddb==1.5.2,maxminddb-geolite2==2017.803,mistune==0.8.3,mock==5.0.2,more-itertools==8.10.0,msgpack==0.6.2,nbconvert==5.3.1,nbformat==4.4.0,netaddr==0.8.0,node-semver==0.1.1,numpy==1.16.1,oauthlib==2.1.0,ordereddict==1.1,packaging==21.3,pandocfilters==1.4.2,parso==0.1.0,passlib==1.7.1,pbr==5.11.1,pexpect==4.3.0,pickleshare==0.7.4,Pillow==5.4.1,platformdirs==2.4.0,pluggy==0.13.1,ply==3.11,poyo==0.4.1,prompt-toolkit==1.0.15,psycopg2==2.7.3.2,ptyprocess==0.5.2,py==1.11.0,pycparser==2.18,Pygments==2.2.0,PyJWT==1.5.3,PyLD==2.0.3,pyparsing==3.1.0,-e git+https://github.com/RCOSDP/PyPDF2.git@fefc684a3a74aff6f99e5dff24f9b4dd1c95169d#egg=PyPDF2,pyPEG2==2.15.2,pytest==4.2.0,pytest-cov==2.9.0,python-dateutil==2.6.1,python-editor==1.0.3,python-geoip==1.2,pytz==2017.3,pyzmq==17.0.0,redis==2.10.6,requests==2.18.4,requests-oauthlib==1.1.0,resync==1.0.9,s3fs==0.1.6,s3transfer==0.1.13,selenium==3.141.0,Sickle==0.6.4,simplegeneric==0.8.1,simplejson==3.12.0,simplekv==0.11.2,six==1.16.0,snowballstemmer==2.2.0,soupsieve==2.3.2.post1,speaklater==1.3,Sphinx==1.8.4,sphinxcontrib-serializinghtml==1.1.5,sphinxcontrib-websupport==1.2.4,SQLAlchemy==1.2.19,SQLAlchemy-Continuum==1.3.6,SQLAlchemy-Utils==0.35.0,stevedore==3.5.2,sword3common==0.1.1,testpath==0.3.1,toml==0.10.2,tornado==4.5.3,tox==3.28.0,traitlets==4.3.2,typing_extensions==4.1.1,ua-parser==0.7.3,uritemplate==4.1.1,uritools==2.1.0,urllib3==1.22,uWSGI==2.0.21,uwsgitop==0.11,validators==0.12.0,vine==1.3.0,virtualenv==20.17.1,virtualenv-clone==0.5.7,virtualenvwrapper==4.8.4,Wand==0.6.1,wcwidth==0.1.7,webargs==5.5.2,webassets==0.12.1,webencodings==0.5.1,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_accounts&subdirectory=modules/weko-accounts,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_admin&subdirectory=modules/weko-admin,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_authors&subdirectory=modules/weko-authors,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_bulkupdate&subdirectory=modules/weko-bulkupdate,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_deposit&subdirectory=modules/weko-deposit,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_gridlayout&subdirectory=modules/weko-gridlayout,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_groups&subdirectory=modules/weko-groups,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_handle&subdirectory=modules/weko-handle,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_index_tree&subdirectory=modules/weko-index-tree,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_indextree_journal&subdirectory=modules/weko-indextree-journal,weko-items-autofill @ file:///code/modules/weko-items-autofill/.tox/.tmp/package/1/weko-items-autofill-1.0.0.dev20190000.zip,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_items_ui&subdirectory=modules/weko-items-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_itemtypes_ui&subdirectory=modules/weko-itemtypes-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_logging&subdirectory=modules/weko-logging,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_records&subdirectory=modules/weko-records,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_records_ui&subdirectory=modules/weko-records-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_redis&subdirectory=modules/weko-redis,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_schema_ui&subdirectory=modules/weko-schema-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_search_ui&subdirectory=modules/weko-search-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_sitemap&subdirectory=modules/weko-sitemap,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_swordserver&subdirectory=modules/weko-swordserver,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_theme&subdirectory=modules/weko-theme,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_user_profiles&subdirectory=modules/weko-user-profiles,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_workflow&subdirectory=modules/weko-workflow,Werkzeug==0.15.2,whichcraft==0.4.1,WTForms==2.1,WTForms-Alchemy==0.16.5,WTForms-Components==0.10.3,xmlschema==0.9.30,xmltodict==0.12.0,zipp==3.6.0,zope.interface==5.5.2
c1 run-test-pre: PYTHONHASHSEED='454708564'
c1 run-test: commands[0] | pytest --cov=weko_items_autofill tests -v -s -vv --cov-branch --cov-report=term --cov-report=xml --cov-report=html --basetemp=/code/modules/weko-items-autofill/.tox/c1/tmp
============================= test session starts ==============================
platform linux -- Python 3.6.15, pytest-4.2.0, py-1.11.0, pluggy-0.13.1 -- /code/modules/weko-items-autofill/.tox/c1/bin/python
cachedir: .tox/c1/.pytest_cache
rootdir: /code/modules/weko-items-autofill, inifile:
plugins: celery-4.4.4, cov-2.9.0
=======
c1 recreate: /code/modules/weko-items-autofill/.tox/c1
c1 installdeps: pytest>=3, pytest-cov, -rrequirements.txt
c1 inst: /code/modules/weko-items-autofill/.tox/.tmp/package/1/weko-items-autofill-1.0.0.dev20190000.zip
c1 installed: alabaster==0.7.13,alembic==0.9.6,amqp==2.6.1,angular-gettext-babel==0.3,aniso8601==8.0.0,arrow==0.12.1,asn1crypto==0.23.0,attrs==17.4.0,b2handle==1.1.2,Babel==2.5.1,bagit==1.7.0,beautifulsoup4==4.9.3,bibtexparser==1.0.1,billiard==3.6.3.0,binaryornot==0.4.4,bleach==3.1.0,blinker==1.4,boto3==1.7.84,botocore==1.10.84,cachelib==0.1,cachetools==4.2.4,cchardet==2.1.1,celery==4.4.7,certifi==2017.11.5,cffi==1.11.2,chardet==3.0.4,citeproc-py==0.5.1,citeproc-py-styles==0.1.2,click==8.0.4,cookiecutter==1.6.0,counter-robots==2018.6,coverage==6.2,cryptography==2.1.4,datacite==1.0.1,DateTime==4.9,decorator==4.1.2,defusedxml==0.5.0,dictdiffer==0.7.0,dnspython==2.2.1,docutils==0.18.1,dojson==1.3.2,elasticsearch==6.1.1,elasticsearch-dsl==6.4.0,elementpath==1.0.6,email-validator==1.0.5,entrypoints==0.2.3,feedgen==0.7.0,Flask==1.0.4,Flask-Admin==1.5.3,Flask-Alembic==2.0.1,Flask-Assets==0.12,Flask-BabelEx==0.9.4,Flask-Breadcrumbs==0.5.0,Flask-Caching==1.3.3,Flask-CeleryExt==0.3.4,Flask-Collect==1.2.2,Flask-Cors==3.0.3,Flask-DebugToolbar==0.11.0,Flask-IIIF==0.6.1,Flask-KVSession==0.6.2,Flask-Limiter==1.1.0,Flask-Login==0.4.1,Flask-Mail==0.9.1,flask-marshmallow==0.14.0,Flask-Menu==0.6.0,Flask-OAuthlib==0.9.5,Flask-Plugins==1.6.1,Flask-Principal==0.4.0,Flask-RESTful==0.3.8,Flask-Security==3.0.0,flask-shell-ipython==0.4.1,Flask-Sitemap==0.1.0,Flask-SQLAlchemy==2.3.2,flask-talisman==0.4.1,Flask-WTF==0.14.3,-e git+https://github.com/RCOSDP/pyfpdf.git@f9b032148283d535cabc7789858081c80de36fef#egg=fpdf,frozendict==2.3.6,fs==0.5.4,ftfy==4.4.3,future==0.16.0,github3.py==1.1.0,html5lib==1.0.1,idna==2.6,iiif-prezi==0.3.0,imagesize==1.4.1,importlib-metadata==4.8.3,importlib-resources==5.4.0,infinity==1.4,iniconfig==1.1.1,intervals==0.8.0,invenio-access==1.1.0,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_accounts&subdirectory=modules/invenio-accounts,invenio-admin==1.1.2,invenio-app==1.1.0,invenio-assets==1.0.0,invenio-base==1.0.2,invenio-cache==1.0.0,invenio-celery==1.1.3,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_communities&subdirectory=modules/invenio-communities,invenio-config==1.0.0,invenio-csl-rest==1.0.0a1,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_db&subdirectory=modules/invenio-db,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_deposit&subdirectory=modules/invenio-deposit,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_files_rest&subdirectory=modules/invenio-files-rest,invenio-formatter==1.0.0b3,invenio-i18n==1.0.0,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_iiif&subdirectory=modules/invenio-iiif,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_indexer&subdirectory=modules/invenio-indexer,invenio-jsonschemas==1.0.0,invenio-logging==1.0.0b3,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_mail&subdirectory=modules/invenio-mail,invenio-marc21==1.0.0a8,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_oaiharvester&subdirectory=modules/invenio-oaiharvester,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_oaiserver&subdirectory=modules/invenio-oaiserver,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_oauth2server&subdirectory=modules/invenio-oauth2server,invenio-oauthclient==1.0.0,invenio-pidrelations==1.0.0a4,invenio-pidstore==1.0.0,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_previewer&subdirectory=modules/invenio-previewer,invenio-query-parser==0.6.0,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_queues&subdirectory=modules/invenio-queues,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_records&subdirectory=modules/invenio-records,invenio-records-files==1.0.0a10,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_records_rest&subdirectory=modules/invenio-records-rest,invenio-records-ui==1.0.0,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_resourcesyncclient&subdirectory=modules/invenio-resourcesyncclient,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_resourcesyncserver&subdirectory=modules/invenio-resourcesyncserver,invenio-rest==1.1.2,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_s3&subdirectory=modules/invenio-s3,invenio-search==1.1.0,invenio-search-ui==1.0.0a9,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_stats&subdirectory=modules/invenio-stats,invenio-theme==1.0.0b4,ipaddress==1.0.19,ipython==6.2.1,ipython-genutils==0.2.0,itsdangerous==0.24,jedi==0.11.0,Jinja2==2.10,jinja2-cli==0.6.0,jinja2-time==0.2.0,jmespath==0.10.0,jsmin==2.2.2,jsonpatch==1.21,jsonpath-ng==1.5.2,jsonpointer==1.14,jsonref==0.1,jsonresolver==0.2.1,jsonschema==2.6.0,jupyter-client==5.2.2,jupyter-core==4.4.0,kombu==4.6.10,limits==1.2.1,lxml==4.1.1,Mako==1.0.7,MarkupSafe==1.1.1,marshmallow==2.20.1,marshmallow-sqlalchemy==0.23.1,maxminddb==1.5.2,maxminddb-geolite2==2017.803,mistune==0.8.3,mock==3.0.5,more-itertools==8.10.0,msgpack==0.6.2,nbconvert==5.3.1,nbformat==4.4.0,netaddr==0.8.0,node-semver==0.1.1,numpy==1.16.1,oauthlib==2.1.0,ordereddict==1.1,packaging==21.3,pandocfilters==1.4.2,parso==0.1.0,passlib==1.7.1,pexpect==4.3.0,pickleshare==0.7.4,Pillow==5.4.1,pluggy==0.13.1,ply==3.11,poyo==0.4.1,prompt-toolkit==1.0.15,psycopg2==2.7.3.2,ptyprocess==0.5.2,py==1.11.0,pycparser==2.18,Pygments==2.2.0,PyJWT==1.5.3,PyLD==2.0.3,pyparsing==3.0.9,-e git+https://github.com/RCOSDP/PyPDF2.git@fefc684a3a74aff6f99e5dff24f9b4dd1c95169d#egg=PyPDF2,pyPEG2==2.15.2,pytest==6.1.2,pytest-cov==4.0.0,pytest-mock==3.6.1,python-dateutil==2.6.1,python-editor==1.0.3,python-geoip==1.2,pytz==2017.3,pyzmq==17.0.0,redis==2.10.6,requests==2.18.4,requests-oauthlib==1.1.0,resync==1.0.9,s3fs==0.1.6,s3transfer==0.1.13,Sickle==0.6.4,simplegeneric==0.8.1,simplejson==3.12.0,simplekv==0.11.2,six==1.12.0,snowballstemmer==2.2.0,soupsieve==2.3.2.post1,speaklater==1.3,Sphinx==1.8.4,sphinxcontrib-serializinghtml==1.1.5,sphinxcontrib-websupport==1.2.4,SQLAlchemy==1.2.19,SQLAlchemy-Continuum==1.3.6,SQLAlchemy-Utils==0.35.0,testpath==0.3.1,toml==0.10.2,tomli==1.2.3,tornado==4.5.3,traitlets==4.3.2,typing_extensions==4.1.1,ua-parser==0.7.3,uritemplate==4.1.1,uritools==2.1.0,urllib3==1.22,validators==0.12.0,vine==1.3.0,Wand==0.6.1,wcwidth==0.1.7,webargs==5.5.2,webassets==0.12.1,webencodings==0.5.1,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_accounts&subdirectory=modules/weko-accounts,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_admin&subdirectory=modules/weko-admin,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_authors&subdirectory=modules/weko-authors,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_bulkupdate&subdirectory=modules/weko-bulkupdate,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_deposit&subdirectory=modules/weko-deposit,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_gridlayout&subdirectory=modules/weko-gridlayout,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_groups&subdirectory=modules/weko-groups,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_handle&subdirectory=modules/weko-handle,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_index_tree&subdirectory=modules/weko-index-tree,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_indextree_journal&subdirectory=modules/weko-indextree-journal,weko-items-autofill @ file:///code/modules/weko-items-autofill/.tox/.tmp/package/1/weko-items-autofill-1.0.0.dev20190000.zip,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_items_ui&subdirectory=modules/weko-items-ui,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_itemtypes_ui&subdirectory=modules/weko-itemtypes-ui,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_logging&subdirectory=modules/weko-logging,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_records&subdirectory=modules/weko-records,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_records_ui&subdirectory=modules/weko-records-ui,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_redis&subdirectory=modules/weko-redis,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_schema_ui&subdirectory=modules/weko-schema-ui,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_search_ui&subdirectory=modules/weko-search-ui,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_sitemap&subdirectory=modules/weko-sitemap,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_theme&subdirectory=modules/weko-theme,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_user_profiles&subdirectory=modules/weko-user-profiles,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_workflow&subdirectory=modules/weko-workflow,Werkzeug==0.15.2,whichcraft==0.4.1,WTForms==2.1,WTForms-Alchemy==0.16.5,WTForms-Components==0.10.3,xmlschema==0.9.30,xmltodict==0.12.0,zipp==3.6.0,zope.interface==5.5.2
c1 run-test-pre: PYTHONHASHSEED='3360968648'
c1 run-test: commands[0] | pytest --cov=weko_items_autofill tests -v -s -vv --cov-branch --cov-report=term --cov-report=xml --cov-report=html --basetemp=/code/modules/weko-items-autofill/.tox/c1/tmp
============================= test session starts ==============================
platform linux -- Python 3.6.15, pytest-6.1.2, py-1.11.0, pluggy-0.13.1 -- /code/modules/weko-items-autofill/.tox/c1/bin/python
cachedir: .tox/c1/.pytest_cache
rootdir: /code/modules/weko-items-autofill
plugins: cov-4.0.0, celery-4.4.7, mock-3.6.1
>>>>>>> origin/feature/change-pub-status-enum
collecting ... collected 106 items

tests/test_api.py::TestCrossRefOpenURL::test__init__ PASSED
tests/test_api.py::TestCrossRefOpenURL::test_create_endpoint PASSED
<<<<<<< HEAD
tests/test_api.py::TestCrossRefOpenURL::test_create_url ERROR
tests/test_api.py::TestCrossRefOpenURL::test_url ERROR
tests/test_api.py::TestCrossRefOpenURL::test_do_http_request ERROR
tests/test_api.py::TestCrossRefOpenURL::test_get_data ERROR
tests/test_api.py::TestCiNiiURL::test__init__ PASSED
tests/test_api.py::TestCiNiiURL::test_create_endpoint PASSED
tests/test_api.py::TestCiNiiURL::test_create_url ERROR
tests/test_api.py::TestCiNiiURL::test_url ERROR
tests/test_api.py::TestCiNiiURL::test_do_http_request ERROR
tests/test_api.py::TestCiNiiURL::test_get_data PASSED
tests/test_utils.py::test_is_update_cache PASSED
tests/test_utils.py::test_cached_api_json PASSED
tests/test_utils.py::test_get_item_id ERROR
tests/test_utils.py::test_get_title_data PASSED
tests/test_utils.py::test_get_title_pubdate_path ERROR
tests/test_utils.py::test_get_crossref_record_data ERROR
tests/test_utils.py::test_get_crossref_record_data2 ERROR
tests/test_utils.py::test_get_cinii_record_data ERROR
=======
tests/test_api.py::TestCrossRefOpenURL::test_create_url PASSED
tests/test_api.py::TestCrossRefOpenURL::test_url PASSED
tests/test_api.py::TestCrossRefOpenURL::test_do_http_request PASSED
tests/test_api.py::TestCrossRefOpenURL::test_get_data PASSED
tests/test_api.py::TestCiNiiURL::test__init__ PASSED
tests/test_api.py::TestCiNiiURL::test_create_endpoint PASSED
tests/test_api.py::TestCiNiiURL::test_create_url PASSED
tests/test_api.py::TestCiNiiURL::test_url PASSED
tests/test_api.py::TestCiNiiURL::test_do_http_request PASSED
tests/test_api.py::TestCiNiiURL::test_get_data PASSED
tests/test_utils.py::test_is_update_cache PASSED
tests/test_utils.py::test_cached_api_json PASSED
tests/test_utils.py::test_get_item_id PASSED
tests/test_utils.py::test_get_title_data PASSED
tests/test_utils.py::test_get_title_pubdate_path PASSED
tests/test_utils.py::test_get_crossref_record_data PASSED
tests/test_utils.py::test_get_crossref_record_data2 PASSED
tests/test_utils.py::test_get_cinii_record_data PASSED
>>>>>>> origin/feature/change-pub-status-enum
tests/test_utils.py::test_get_basic_cinii_data PASSED
tests/test_utils.py::test_pack_single_value_as_dict PASSED
tests/test_utils.py::test_pack_data_with_multiple_type_cinii PASSED
tests/test_utils.py::test_get_cinii_creator_data PASSED
tests/test_utils.py::test_get_cinii_contributor_data PASSED
tests/test_utils.py::test_get_cinii_description_data PASSED
tests/test_utils.py::test_get_cinii_subject_data PASSED
<<<<<<< HEAD
tests/test_utils.py::test_get_cinii_page_data ERROR
tests/test_utils.py::test_get_cinii_numpage ERROR
tests/test_utils.py::test_get_cinii_date_data PASSED
tests/test_utils.py::test_get_cinii_data_by_key ERROR
tests/test_utils.py::test_get_crossref_title_data PASSED
tests/test_utils.py::test__build_name_data PASSED
tests/test_utils.py::test_get_crossref_creator_data ERROR
tests/test_utils.py::test_get_crossref_contributor_data ERROR
=======
tests/test_utils.py::test_get_cinii_page_data PASSED
tests/test_utils.py::test_get_cinii_numpage PASSED
tests/test_utils.py::test_get_cinii_date_data PASSED
tests/test_utils.py::test_get_cinii_data_by_key PASSED
tests/test_utils.py::test_get_crossref_title_data PASSED
tests/test_utils.py::test__build_name_data PASSED
tests/test_utils.py::test_get_crossref_creator_data PASSED
tests/test_utils.py::test_get_crossref_contributor_data PASSED
>>>>>>> origin/feature/change-pub-status-enum
tests/test_utils.py::test_get_start_and_end_page PASSED
tests/test_utils.py::test_get_crossref_issue_date PASSED
tests/test_utils.py::test_get_crossref_source_title_data PASSED
tests/test_utils.py::test_get_crossref_publisher_data PASSED
<<<<<<< HEAD
tests/test_utils.py::test_get_crossref_relation_data ERROR
tests/test_utils.py::test_get_crossref_source_data PASSED
tests/test_utils.py::test_get_crossref_data_by_key ERROR
tests/test_utils.py::test_get_cinii_autofill_item ERROR
tests/test_utils.py::test_get_crossref_autofill_item ERROR
tests/test_utils.py::test_get_autofill_key_tree ERROR
=======
tests/test_utils.py::test_get_crossref_relation_data PASSED
tests/test_utils.py::test_get_crossref_source_data PASSED
tests/test_utils.py::test_get_crossref_data_by_key PASSED
tests/test_utils.py::test_get_cinii_autofill_item PASSED
tests/test_utils.py::test_get_crossref_autofill_item PASSED
tests/test_utils.py::test_get_autofill_key_tree PASSED
>>>>>>> origin/feature/change-pub-status-enum
tests/test_utils.py::test_sort_by_item_type_order PASSED
tests/test_utils.py::test_get_key_value PASSED
tests/test_utils.py::test_get_autofill_key_path PASSED
tests/test_utils.py::test_get_specific_key_path PASSED
tests/test_utils.py::test_build_record_model PASSED
tests/test_utils.py::test_build_model PASSED
tests/test_utils.py::test_build_form_model PASSED
tests/test_utils.py::test_merge_dict PASSED
tests/test_utils.py::test_deepcopy PASSED
tests/test_utils.py::test_fill_data PASSED
tests/test_utils.py::test_is_multiple PASSED
<<<<<<< HEAD
tests/test_utils.py::test_get_workflow_journal ERROR
tests/test_utils.py::test_convert_crossref_xml_data_to_dictionary ERROR
tests/test_utils.py::test_get_contributor_and_author_names PASSED
tests/test_utils.py::test_get_wekoid_record_data ERROR
tests/test_utils.py::test_build_record_model_for_wekoid ERROR
=======
tests/test_utils.py::test_get_workflow_journal PASSED
tests/test_utils.py::test_convert_crossref_xml_data_to_dictionary PASSED
tests/test_utils.py::test_get_contributor_and_author_names PASSED
tests/test_utils.py::test_get_wekoid_record_data PASSED
tests/test_utils.py::test_build_record_model_for_wekoid PASSED
>>>>>>> origin/feature/change-pub-status-enum
tests/test_utils.py::test_is_multiple_item PASSED
tests/test_utils.py::test_get_record_model PASSED
tests/test_utils.py::test_set_val_for_record_model PASSED
tests/test_utils.py::test_set_val_for_all_child PASSED
tests/test_utils.py::test_remove_sub_record_model_no_value PASSED
<<<<<<< HEAD
tests/test_views.py::test_index ERROR
tests/test_views.py::test_get_selection_option_acl_login[0-True] ERROR
tests/test_views.py::test_get_selection_option_acl_login[1-True] ERROR
tests/test_views.py::test_get_selection_option_acl_login[2-True] ERROR
tests/test_views.py::test_get_selection_option_acl_login[3-True] ERROR
tests/test_views.py::test_get_selection_option_acl_login[4-True] ERROR
tests/test_views.py::test_get_selection_option_acl_login[5-True] ERROR
tests/test_views.py::test_get_selection_option_acl_login[7-True] ERROR
tests/test_views.py::test_get_selection_option_acl_guest ERROR
tests/test_views.py::test_get_selection_option ERROR
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True] ERROR
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True] ERROR
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True] ERROR
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True] ERROR
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True] ERROR
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True] ERROR
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True] ERROR
tests/test_views.py::test_get_title_pubdate_id_acl_guest ERROR
tests/test_views.py::test_get_title_pubdate_id ERROR
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True] ERROR
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True] ERROR
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True] ERROR
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True] ERROR
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True] ERROR
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True] ERROR
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True] ERROR
tests/test_views.py::test_get_auto_fill_record_data_acl_guest ERROR
tests/test_views.py::test_get_auto_fill_record_data ERROR
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True] ERROR
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True] ERROR
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True] ERROR
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True] ERROR
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True] ERROR
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True] ERROR
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True] ERROR
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest ERROR
tests/test_views.py::test_get_item_auto_fill_journal ERROR
tests/test_views.py::test_dbsession_clean ERROR
tests/test_weko_items_autofill.py::test_version PASSED
tests/test_weko_items_autofill.py::test_init PASSED

==================================== ERRORS ====================================
____________ ERROR at setup of TestCrossRefOpenURL.test_create_url _____________
file /code/modules/weko-items-autofill/tests/test_api.py, line 51
      def test_create_url(self,mocker):
E       fixture 'mocker' not found
>       available fixtures: actions, api_certificate, app, base_app, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, celery_app, celery_config, celery_enable_logging, celery_includes, celery_parameters, celery_session_app, celery_session_worker, celery_worker, celery_worker_parameters, celery_worker_pool, client, client_api, cov, create_app, db, depends_on_current_app, doctest_namespace, instance_path, itemtypes, location, monkeypatch, no_cover, pytestconfig, record_property, record_xml_attribute, records, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, use_celery_app_trap, users
>       use 'pytest --fixtures [testpath]' for help on them.

/code/modules/weko-items-autofill/tests/test_api.py:51
________________ ERROR at setup of TestCrossRefOpenURL.test_url ________________
file /code/modules/weko-items-autofill/tests/test_api.py, line 60
      def test_url(self,mocker):
E       fixture 'mocker' not found
>       available fixtures: actions, api_certificate, app, base_app, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, celery_app, celery_config, celery_enable_logging, celery_includes, celery_parameters, celery_session_app, celery_session_worker, celery_worker, celery_worker_parameters, celery_worker_pool, client, client_api, cov, create_app, db, depends_on_current_app, doctest_namespace, instance_path, itemtypes, location, monkeypatch, no_cover, pytestconfig, record_property, record_xml_attribute, records, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, use_celery_app_trap, users
>       use 'pytest --fixtures [testpath]' for help on them.

/code/modules/weko-items-autofill/tests/test_api.py:60
__________ ERROR at setup of TestCrossRefOpenURL.test_do_http_request __________
file /code/modules/weko-items-autofill/tests/test_api.py, line 70
      def test_do_http_request(self,mocker):
E       fixture 'mocker' not found
>       available fixtures: actions, api_certificate, app, base_app, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, celery_app, celery_config, celery_enable_logging, celery_includes, celery_parameters, celery_session_app, celery_session_worker, celery_worker, celery_worker_parameters, celery_worker_pool, client, client_api, cov, create_app, db, depends_on_current_app, doctest_namespace, instance_path, itemtypes, location, monkeypatch, no_cover, pytestconfig, record_property, record_xml_attribute, records, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, use_celery_app_trap, users
>       use 'pytest --fixtures [testpath]' for help on them.

/code/modules/weko-items-autofill/tests/test_api.py:70
_____________ ERROR at setup of TestCrossRefOpenURL.test_get_data ______________
file /code/modules/weko-items-autofill/tests/test_api.py, line 80
      def test_get_data(self,mocker):
E       fixture 'mocker' not found
>       available fixtures: actions, api_certificate, app, base_app, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, celery_app, celery_config, celery_enable_logging, celery_includes, celery_parameters, celery_session_app, celery_session_worker, celery_worker, celery_worker_parameters, celery_worker_pool, client, client_api, cov, create_app, db, depends_on_current_app, doctest_namespace, instance_path, itemtypes, location, monkeypatch, no_cover, pytestconfig, record_property, record_xml_attribute, records, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, use_celery_app_trap, users
>       use 'pytest --fixtures [testpath]' for help on them.

/code/modules/weko-items-autofill/tests/test_api.py:80
________________ ERROR at setup of TestCiNiiURL.test_create_url ________________
file /code/modules/weko-items-autofill/tests/test_api.py, line 135
      def test_create_url(self,mocker):
E       fixture 'mocker' not found
>       available fixtures: actions, api_certificate, app, base_app, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, celery_app, celery_config, celery_enable_logging, celery_includes, celery_parameters, celery_session_app, celery_session_worker, celery_worker, celery_worker_parameters, celery_worker_pool, client, client_api, cov, create_app, db, depends_on_current_app, doctest_namespace, instance_path, itemtypes, location, monkeypatch, no_cover, pytestconfig, record_property, record_xml_attribute, records, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, use_celery_app_trap, users
>       use 'pytest --fixtures [testpath]' for help on them.

/code/modules/weko-items-autofill/tests/test_api.py:135
___________________ ERROR at setup of TestCiNiiURL.test_url ____________________
file /code/modules/weko-items-autofill/tests/test_api.py, line 144
      def test_url(self,mocker):
E       fixture 'mocker' not found
>       available fixtures: actions, api_certificate, app, base_app, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, celery_app, celery_config, celery_enable_logging, celery_includes, celery_parameters, celery_session_app, celery_session_worker, celery_worker, celery_worker_parameters, celery_worker_pool, client, client_api, cov, create_app, db, depends_on_current_app, doctest_namespace, instance_path, itemtypes, location, monkeypatch, no_cover, pytestconfig, record_property, record_xml_attribute, records, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, use_celery_app_trap, users
>       use 'pytest --fixtures [testpath]' for help on them.

/code/modules/weko-items-autofill/tests/test_api.py:144
_____________ ERROR at setup of TestCiNiiURL.test_do_http_request ______________
file /code/modules/weko-items-autofill/tests/test_api.py, line 153
      def test_do_http_request(self,mocker):
E       fixture 'mocker' not found
>       available fixtures: actions, api_certificate, app, base_app, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, celery_app, celery_config, celery_enable_logging, celery_includes, celery_parameters, celery_session_app, celery_session_worker, celery_worker, celery_worker_parameters, celery_worker_pool, client, client_api, cov, create_app, db, depends_on_current_app, doctest_namespace, instance_path, itemtypes, location, monkeypatch, no_cover, pytestconfig, record_property, record_xml_attribute, records, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, use_celery_app_trap, users
>       use 'pytest --fixtures [testpath]' for help on them.

/code/modules/weko-items-autofill/tests/test_api.py:153
______________________ ERROR at setup of test_get_item_id ______________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff3050a1160>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3050a1160>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3050a1160>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3050a1160>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3050a1160>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff3050a1358>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff30556c748>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3050a1160>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3050a1160>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3050a1320>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3050a1160>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3050a1320>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3050a1320>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff305114cf8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________________ ERROR at setup of test_get_title_pubdate_path _________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff3050940f0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3050940f0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3050940f0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3050940f0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3050940f0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff304c96e80>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff3050f8608>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3050940f0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3050940f0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff304c96e10>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3050940f0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff304c96e10>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff304c96e10>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff3050941d0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_______________ ERROR at setup of test_get_crossref_record_data ________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff304fb2ef0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff304fb2ef0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff304fb2ef0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff304fb2ef0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff304fb2ef0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff304fdf668>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff304faedc8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff304fb2ef0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff304fb2ef0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff304fb27b8>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff304fb2ef0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff304fb27b8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff304fb27b8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff304fb2da0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_______________ ERROR at setup of test_get_crossref_record_data2 _______________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff304c7af28>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff304c7af28>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff304c7af28>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff304c7af28>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff304c7af28>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff304a00e80>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff304c87c48>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff304c7af28>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff304c7af28>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff304c88128>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff304c7af28>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff304c88128>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff304c88128>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff304c7add8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of test_get_cinii_record_data _________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff304ff36d8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff304ff36d8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff304ff36d8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff304ff36d8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff304ff36d8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff304ff38d0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff304d2bc48>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff304ff36d8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff304ff36d8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff304ff3898>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff304ff36d8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff304ff3898>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff304ff3898>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff304ff3588>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________________ ERROR at setup of test_get_cinii_page_data __________________
file /code/modules/weko-items-autofill/tests/test_utils.py, line 551
  def test_get_cinii_page_data(app, mocker):
E       fixture 'mocker' not found
>       available fixtures: actions, api_certificate, app, base_app, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, celery_app, celery_config, celery_enable_logging, celery_includes, celery_parameters, celery_session_app, celery_session_worker, celery_worker, celery_worker_parameters, celery_worker_pool, client, client_api, cov, create_app, db, depends_on_current_app, doctest_namespace, instance_path, itemtypes, location, monkeypatch, no_cover, pytestconfig, record_property, record_xml_attribute, records, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, use_celery_app_trap, users
>       use 'pytest --fixtures [testpath]' for help on them.

/code/modules/weko-items-autofill/tests/test_utils.py:551
___________________ ERROR at setup of test_get_cinii_numpage ___________________
file /code/modules/weko-items-autofill/tests/test_utils.py, line 565
  def test_get_cinii_numpage(app, mocker):
E       fixture 'mocker' not found
>       available fixtures: actions, api_certificate, app, base_app, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, celery_app, celery_config, celery_enable_logging, celery_includes, celery_parameters, celery_session_app, celery_session_worker, celery_worker, celery_worker_parameters, celery_worker_pool, client, client_api, cov, create_app, db, depends_on_current_app, doctest_namespace, instance_path, itemtypes, location, monkeypatch, no_cover, pytestconfig, record_property, record_xml_attribute, records, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, use_celery_app_trap, users
>       use 'pytest --fixtures [testpath]' for help on them.

/code/modules/weko-items-autofill/tests/test_utils.py:565
_________________ ERROR at setup of test_get_cinii_data_by_key _________________
file /code/modules/weko-items-autofill/tests/test_utils.py, line 605
  def test_get_cinii_data_by_key(app, mocker):
E       fixture 'mocker' not found
>       available fixtures: actions, api_certificate, app, base_app, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, celery_app, celery_config, celery_enable_logging, celery_includes, celery_parameters, celery_session_app, celery_session_worker, celery_worker, celery_worker_parameters, celery_worker_pool, client, client_api, cov, create_app, db, depends_on_current_app, doctest_namespace, instance_path, itemtypes, location, monkeypatch, no_cover, pytestconfig, record_property, record_xml_attribute, records, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, use_celery_app_trap, users
>       use 'pytest --fixtures [testpath]' for help on them.

/code/modules/weko-items-autofill/tests/test_utils.py:605
_______________ ERROR at setup of test_get_crossref_creator_data _______________
file /code/modules/weko-items-autofill/tests/test_utils.py, line 702
  def test_get_crossref_creator_data(mocker):
E       fixture 'mocker' not found
>       available fixtures: actions, api_certificate, app, base_app, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, celery_app, celery_config, celery_enable_logging, celery_includes, celery_parameters, celery_session_app, celery_session_worker, celery_worker, celery_worker_parameters, celery_worker_pool, client, client_api, cov, create_app, db, depends_on_current_app, doctest_namespace, instance_path, itemtypes, location, monkeypatch, no_cover, pytestconfig, record_property, record_xml_attribute, records, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, use_celery_app_trap, users
>       use 'pytest --fixtures [testpath]' for help on them.

/code/modules/weko-items-autofill/tests/test_utils.py:702
_____________ ERROR at setup of test_get_crossref_contributor_data _____________
file /code/modules/weko-items-autofill/tests/test_utils.py, line 714
  def test_get_crossref_contributor_data(mocker):
E       fixture 'mocker' not found
>       available fixtures: actions, api_certificate, app, base_app, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, celery_app, celery_config, celery_enable_logging, celery_includes, celery_parameters, celery_session_app, celery_session_worker, celery_worker, celery_worker_parameters, celery_worker_pool, client, client_api, cov, create_app, db, depends_on_current_app, doctest_namespace, instance_path, itemtypes, location, monkeypatch, no_cover, pytestconfig, record_property, record_xml_attribute, records, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, use_celery_app_trap, users
>       use 'pytest --fixtures [testpath]' for help on them.

/code/modules/weko-items-autofill/tests/test_utils.py:714
______________ ERROR at setup of test_get_crossref_relation_data _______________
file /code/modules/weko-items-autofill/tests/test_utils.py, line 769
  def test_get_crossref_relation_data(mocker):
E       fixture 'mocker' not found
>       available fixtures: actions, api_certificate, app, base_app, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, celery_app, celery_config, celery_enable_logging, celery_includes, celery_parameters, celery_session_app, celery_session_worker, celery_worker, celery_worker_parameters, celery_worker_pool, client, client_api, cov, create_app, db, depends_on_current_app, doctest_namespace, instance_path, itemtypes, location, monkeypatch, no_cover, pytestconfig, record_property, record_xml_attribute, records, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, use_celery_app_trap, users
>       use 'pytest --fixtures [testpath]' for help on them.

/code/modules/weko-items-autofill/tests/test_utils.py:769
_______________ ERROR at setup of test_get_crossref_data_by_key ________________
file /code/modules/weko-items-autofill/tests/test_utils.py, line 807
  def test_get_crossref_data_by_key(app, mocker):
E       fixture 'mocker' not found
>       available fixtures: actions, api_certificate, app, base_app, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, celery_app, celery_config, celery_enable_logging, celery_includes, celery_parameters, celery_session_app, celery_session_worker, celery_worker, celery_worker_parameters, celery_worker_pool, client, client_api, cov, create_app, db, depends_on_current_app, doctest_namespace, instance_path, itemtypes, location, monkeypatch, no_cover, pytestconfig, record_property, record_xml_attribute, records, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, use_celery_app_trap, users
>       use 'pytest --fixtures [testpath]' for help on them.

/code/modules/weko-items-autofill/tests/test_utils.py:807
________________ ERROR at setup of test_get_cinii_autofill_item ________________
file /code/modules/weko-items-autofill/tests/test_utils.py, line 886
  def test_get_cinii_autofill_item(app, mocker):
E       fixture 'mocker' not found
>       available fixtures: actions, api_certificate, app, base_app, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, celery_app, celery_config, celery_enable_logging, celery_includes, celery_parameters, celery_session_app, celery_session_worker, celery_worker, celery_worker_parameters, celery_worker_pool, client, client_api, cov, create_app, db, depends_on_current_app, doctest_namespace, instance_path, itemtypes, location, monkeypatch, no_cover, pytestconfig, record_property, record_xml_attribute, records, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, use_celery_app_trap, users
>       use 'pytest --fixtures [testpath]' for help on them.

/code/modules/weko-items-autofill/tests/test_utils.py:886
______________ ERROR at setup of test_get_crossref_autofill_item _______________
file /code/modules/weko-items-autofill/tests/test_utils.py, line 899
  def test_get_crossref_autofill_item(app, mocker):
E       fixture 'mocker' not found
>       available fixtures: actions, api_certificate, app, base_app, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, celery_app, celery_config, celery_enable_logging, celery_includes, celery_parameters, celery_session_app, celery_session_worker, celery_worker, celery_worker_parameters, celery_worker_pool, client, client_api, cov, create_app, db, depends_on_current_app, doctest_namespace, instance_path, itemtypes, location, monkeypatch, no_cover, pytestconfig, record_property, record_xml_attribute, records, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, use_celery_app_trap, users
>       use 'pytest --fixtures [testpath]' for help on them.

/code/modules/weko-items-autofill/tests/test_utils.py:899
_________________ ERROR at setup of test_get_autofill_key_tree _________________
file /code/modules/weko-items-autofill/tests/test_utils.py, line 912
  def test_get_autofill_key_tree(mocker):
E       fixture 'mocker' not found
>       available fixtures: actions, api_certificate, app, base_app, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, celery_app, celery_config, celery_enable_logging, celery_includes, celery_parameters, celery_session_app, celery_session_worker, celery_worker, celery_worker_parameters, celery_worker_pool, client, client_api, cov, create_app, db, depends_on_current_app, doctest_namespace, instance_path, itemtypes, location, monkeypatch, no_cover, pytestconfig, record_property, record_xml_attribute, records, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, use_celery_app_trap, users
>       use 'pytest --fixtures [testpath]' for help on them.

/code/modules/weko-items-autofill/tests/test_utils.py:912
_________________ ERROR at setup of test_get_workflow_journal __________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff304bf5f28>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff304bf5f28>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff304bf5f28>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff304bf5f28>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff304bf5f28>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff304d0b160>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff304d06588>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff304bf5f28>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff304bf5f28>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff304d0b128>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff304bf5f28>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff304d0b128>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff304d0b128>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff304bf5dd8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________ ERROR at setup of test_convert_crossref_xml_data_to_dictionary ________
file /code/modules/weko-items-autofill/tests/test_utils.py, line 1643
  def test_convert_crossref_xml_data_to_dictionary(mocker):
E       fixture 'mocker' not found
>       available fixtures: actions, api_certificate, app, base_app, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, celery_app, celery_config, celery_enable_logging, celery_includes, celery_parameters, celery_session_app, celery_session_worker, celery_worker, celery_worker_parameters, celery_worker_pool, client, client_api, cov, create_app, db, depends_on_current_app, doctest_namespace, instance_path, itemtypes, location, monkeypatch, no_cover, pytestconfig, record_property, record_xml_attribute, records, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, use_celery_app_trap, users
>       use 'pytest --fixtures [testpath]' for help on them.

/code/modules/weko-items-autofill/tests/test_utils.py:1643
________________ ERROR at setup of test_get_wekoid_record_data _________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff30473d6a0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff30473d6a0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff30473d6a0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff30473d6a0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff30473d6a0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff30473d898>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff304746688>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff30473d6a0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff30473d6a0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff30473d860>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff30473d6a0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff30473d860>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff30473d860>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff30473d588>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____________ ERROR at setup of test_build_record_model_for_wekoid _____________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff30473de80>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff30473de80>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff30473de80>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff30473de80>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff30473de80>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff30474d4e0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff304a8af08>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff30473de80>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff30473de80>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff304a7d080>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff30473de80>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff304a7d080>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff304a7d080>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff30473dda0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________________ ERROR at setup of test_index _________________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff304a939e8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff304a939e8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff304a939e8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff304a939e8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff304a939e8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff304a93be0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff304a59dc8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff304a939e8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff304a939e8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff304a93ba8>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff304a939e8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff304a93ba8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff304a93ba8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff304a93898>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________ ERROR at setup of test_get_selection_option_acl_login[0-True] _________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff3046b81d0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3046b81d0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3046b81d0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3046b81d0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3046b81d0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff3046b8eb8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff3049ce388>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3046b81d0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3046b81d0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff304a2d208>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3046b81d0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff304a2d208>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff304a2d208>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff3046b8c18>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________ ERROR at setup of test_get_selection_option_acl_login[1-True] _________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff304a227b8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff304a227b8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff304a227b8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff304a227b8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff304a227b8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff304a229b0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff304a1cec8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff304a227b8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff304a227b8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff304a22978>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff304a227b8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff304a22978>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff304a22978>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff304a22668>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________ ERROR at setup of test_get_selection_option_acl_login[2-True] _________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff30493fc18>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff30493fc18>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff30493fc18>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff30493fc18>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff30493fc18>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff30493f940>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff30494cc08>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff30493fc18>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff30493fc18>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff30493f978>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff30493fc18>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff30493f978>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff30493f978>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff30493fc88>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________ ERROR at setup of test_get_selection_option_acl_login[3-True] _________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff3048b0b70>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3048b0b70>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3048b0b70>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3048b0b70>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3048b0b70>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff3048b0898>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff3048cd4c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3048b0b70>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3048b0b70>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3048b08d0>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3048b0b70>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3048b08d0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3048b08d0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff3048b0be0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________ ERROR at setup of test_get_selection_option_acl_login[4-True] _________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff3049fe550>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3049fe550>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3049fe550>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3049fe550>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3049fe550>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff3049fe748>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff3049dfa48>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3049fe550>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3049fe550>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3049fe710>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3049fe550>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3049fe710>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3049fe710>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff3049fe400>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________ ERROR at setup of test_get_selection_option_acl_login[5-True] _________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff3042a5c50>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3042a5c50>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3042a5c50>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3042a5c50>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3042a5c50>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff3042a5a58>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff30449f848>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3042a5c50>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3042a5c50>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3042a5940>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3042a5c50>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3042a5940>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3042a5940>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff3042a5e48>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________ ERROR at setup of test_get_selection_option_acl_login[7-True] _________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff3046bfeb8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3046bfeb8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3046bfeb8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3046bfeb8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3046bfeb8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff304696ac8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff3046ab288>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3046bfeb8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3046bfeb8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff304696a58>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3046bfeb8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff304696a58>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff304696a58>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff3046bfd68>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________ ERROR at setup of test_get_selection_option_acl_guest _____________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff3046969b0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3046969b0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3046969b0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3046969b0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3046969b0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff304696ba8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff30490ea08>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3046969b0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3046969b0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff304696c18>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3046969b0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff304696c18>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff304696c18>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff3046967f0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of test_get_selection_option __________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff304976cf8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff304976cf8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff304976cf8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff304976cf8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff304976cf8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff304976ef0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff3049904c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff304976cf8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff304976cf8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff304976eb8>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff304976cf8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff304976eb8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff304976eb8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff304976ba8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________ ERROR at setup of test_get_title_pubdate_id_acl_login[0-True] _________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff3040e7080>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3040e7080>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3040e7080>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3040e7080>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3040e7080>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff3040e77f0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff304ab2c48>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3040e7080>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3040e7080>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3040e76d8>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3040e7080>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3040e76d8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3040e76d8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff3040e79b0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________ ERROR at setup of test_get_title_pubdate_id_acl_login[1-True] _________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff3042dbb00>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3042dbb00>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3042dbb00>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3042dbb00>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3042dbb00>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff3042dbcf8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff3042f8c08>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3042dbb00>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3042dbb00>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3042dbcc0>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3042dbb00>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3042dbcc0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3042dbcc0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff3042db9b0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________ ERROR at setup of test_get_title_pubdate_id_acl_login[2-True] _________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff3047ffcc0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3047ffcc0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3047ffcc0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3047ffcc0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3047ffcc0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff3047ffeb8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff3047e7388>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3047ffcc0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3047ffcc0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3047ffe80>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3047ffcc0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3047ffe80>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3047ffe80>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff3047ffb70>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________ ERROR at setup of test_get_title_pubdate_id_acl_login[3-True] _________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff3041b17b8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3041b17b8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3041b17b8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3041b17b8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3041b17b8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff3041b1550>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff3042b3848>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3041b17b8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3041b17b8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3041b14e0>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3041b17b8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3041b14e0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3041b14e0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff3041b15c0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________ ERROR at setup of test_get_title_pubdate_id_acl_login[4-True] _________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff3041a9898>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3041a9898>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3041a9898>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3041a9898>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3041a9898>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff3041a9a90>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff304197248>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3041a9898>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3041a9898>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3041a9a58>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3041a9898>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3041a9a58>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3041a9a58>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff3041a9748>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________ ERROR at setup of test_get_title_pubdate_id_acl_login[5-True] _________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff3047721d0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3047721d0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3047721d0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3047721d0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3047721d0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff303febac8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff30476fa48>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3047721d0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3047721d0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303feb198>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3047721d0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303feb198>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303feb198>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff304772240>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________ ERROR at setup of test_get_title_pubdate_id_acl_login[7-True] _________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff3045156d8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3045156d8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3045156d8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3045156d8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3045156d8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff3045158d0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff30451a408>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3045156d8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3045156d8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff304515898>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3045156d8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff304515898>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff304515898>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff304515588>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________ ERROR at setup of test_get_title_pubdate_id_acl_guest _____________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff3043ebef0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3043ebef0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3043ebef0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3043ebef0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3043ebef0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff3043ebcf8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff30440ea48>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3043ebef0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3043ebef0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3043ebd30>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3043ebef0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3043ebd30>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3043ebd30>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff3043e8080>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of test_get_title_pubdate_id __________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff303ff9518>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303ff9518>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff303ff9518>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff303ff9518>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303ff9518>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff303ff9710>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff304009bc8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303ff9518>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303ff9518>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303ff96d8>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff303ff9518>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303ff96d8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303ff96d8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff303ff93c8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
______ ERROR at setup of test_get_auto_fill_record_data_acl_login[0-True] ______

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff303d4d6d8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303d4d6d8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff303d4d6d8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff303d4d6d8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303d4d6d8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff303d4deb8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff3040dbc48>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303d4d6d8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303d4d6d8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303d4dda0>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff303d4d6d8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303d4dda0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303d4dda0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff303d4dbe0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
______ ERROR at setup of test_get_auto_fill_record_data_acl_login[1-True] ______

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff3044447f0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3044447f0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3044447f0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3044447f0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3044447f0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff3044449e8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff30443e348>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3044447f0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3044447f0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3044449b0>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3044447f0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3044449b0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3044449b0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff3044446a0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
______ ERROR at setup of test_get_auto_fill_record_data_acl_login[2-True] ______

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff303f93c50>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303f93c50>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff303f93c50>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff303f93c50>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303f93c50>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff303f93978>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff303f58c08>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303f93c50>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303f93c50>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303f939b0>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff303f93c50>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303f939b0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303f939b0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff303f93cc0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
______ ERROR at setup of test_get_auto_fill_record_data_acl_login[3-True] ______

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff303d2f630>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303d2f630>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff303d2f630>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff303d2f630>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303d2f630>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff303d2f828>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff303d315c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303d2f630>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303d2f630>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303d2f7f0>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff303d2f630>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303d2f7f0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303d2f7f0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff303d2f4e0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
______ ERROR at setup of test_get_auto_fill_record_data_acl_login[4-True] ______

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff304153a90>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff304153a90>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff304153a90>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff304153a90>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff304153a90>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff3041537b8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff303c65c48>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff304153a90>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff304153a90>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3041537f0>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff304153a90>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3041537f0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3041537f0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff304153b00>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
______ ERROR at setup of test_get_auto_fill_record_data_acl_login[5-True] ______

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff3041dd470>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3041dd470>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3041dd470>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3041dd470>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3041dd470>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff3041dd668>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff304208788>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3041dd470>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3041dd470>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3041dd630>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3041dd470>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3041dd630>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3041dd630>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff3041dd320>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
______ ERROR at setup of test_get_auto_fill_record_data_acl_login[7-True] ______

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff303b82b70>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303b82b70>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff303b82b70>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff303b82b70>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303b82b70>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff303b82978>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff303d75488>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303b82b70>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303b82b70>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303b82860>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff303b82b70>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303b82860>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303b82860>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff303b82d68>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________ ERROR at setup of test_get_auto_fill_record_data_acl_guest __________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff303f9a2b0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303f9a2b0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff303f9a2b0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff303f9a2b0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303f9a2b0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff303f9a4a8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff303fd29c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303f9a2b0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303f9a2b0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303f9a470>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff303f9a2b0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303f9a470>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303f9a470>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff303f9a160>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_______________ ERROR at setup of test_get_auto_fill_record_data _______________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff304016ef0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff304016ef0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff304016ef0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff304016ef0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff304016ef0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff30426a128>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff30401ccc8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff304016ef0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff304016ef0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff30426a0f0>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff304016ef0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff30426a0f0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff30426a0f0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff304016da0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____ ERROR at setup of test_get_item_auto_fill_journal_acl_login[0-True] ______

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff30426a518>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff30426a518>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff30426a518>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff30426a518>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff30426a518>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff303dc8a58>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff303dc4d08>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff30426a518>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff30426a518>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303dc8a90>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff30426a518>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303dc8a90>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303dc8a90>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff30426a2e8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____ ERROR at setup of test_get_item_auto_fill_journal_acl_login[1-True] ______

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff303c4af98>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303c4af98>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff303c4af98>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff303c4af98>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303c4af98>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff303c1b1d0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff303c4b4c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303c4af98>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303c4af98>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303c1b198>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff303c4af98>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303c1b198>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303c1b198>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff303c4ae48>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____ ERROR at setup of test_get_item_auto_fill_journal_acl_login[2-True] ______

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff303f12400>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303f12400>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff303f12400>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff303f12400>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303f12400>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff303f12128>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff303ee3d88>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303f12400>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303f12400>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303f12160>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff303f12400>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303f12160>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303f12160>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff303f12470>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____ ERROR at setup of test_get_item_auto_fill_journal_acl_login[3-True] ______

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff303b3cdd8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303b3cdd8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff303b3cdd8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff303b3cdd8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303b3cdd8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff303b3cfd0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff303b51708>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303b3cdd8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303b3cdd8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303b3cf98>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff303b3cdd8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303b3cf98>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303b3cf98>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff303b3cc88>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____ ERROR at setup of test_get_item_auto_fill_journal_acl_login[4-True] ______

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff303a30278>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303a30278>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff303a30278>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff303a30278>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303a30278>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff303a30128>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff303a41488>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303a30278>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303a30278>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303a30048>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff303a30278>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303a30048>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303a30048>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff303a302e8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____ ERROR at setup of test_get_item_auto_fill_journal_acl_login[5-True] ______

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff303ce6c18>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303ce6c18>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff303ce6c18>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff303ce6c18>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303ce6c18>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff303ce6e10>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff303ce0988>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303ce6c18>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303ce6c18>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303ce6dd8>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff303ce6c18>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303ce6dd8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303ce6dd8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff303ce6ac8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____ ERROR at setup of test_get_item_auto_fill_journal_acl_login[7-True] ______

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff3037684a8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3037684a8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3037684a8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3037684a8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3037684a8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff303768278>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff303bb4388>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3037684a8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3037684a8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303768208>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3037684a8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303768208>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303768208>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff303768320>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________ ERROR at setup of test_get_item_auto_fill_journal_acl_guest __________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff3038d1a58>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3038d1a58>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3038d1a58>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3038d1a58>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3038d1a58>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff3038d1c50>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff3038d2bc8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3038d1a58>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff3038d1a58>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3038d1c18>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff3038d1a58>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3038d1c18>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff3038d1c18>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff3038d1908>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
______________ ERROR at setup of test_get_item_auto_fill_journal _______________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff303967748>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303967748>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff303967748>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff303967748>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303967748>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff303967940>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff303976e88>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303967748>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303967748>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303967908>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff303967748>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303967908>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303967908>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff3039675f8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________________ ERROR at setup of test_dbsession_clean ____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7ff303bee2b0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303bee2b0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff303bee2b0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff303bee2b0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303bee2b0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7ff303526240>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7ff303bfdfc8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303bee2b0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7ff303bee2b0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303bee470>
pool = <sqlalchemy.pool.QueuePool object at 0x7ff303bee2b0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303bee470>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7ff303bee470>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff303bee160>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
=============================== warnings summary ===============================
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_views.py::test_index
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_dbsession_clean
  /code/modules/weko-items-autofill/.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:794: FSADeprecationWarning: SQLALCHEMY_TRACK_MODIFICATIONS adds significant overhead and will be disabled by default in the future.  Set it to True or False to suppress this warning.
    'SQLALCHEMY_TRACK_MODIFICATIONS adds significant overhead and '

tests/test_utils.py::test_is_update_cache
  /code/modules/weko-items-autofill/.tox/c1/lib/python3.6/site-packages/pkg_resources/_vendor/packaging/specifiers.py:276: DeprecationWarning: Creating a LegacyVersion has been deprecated and will be removed in the next major release
    DeprecationWarning,

tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_index
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
tests/test_views.py::test_dbsession_clean
  /code/modules/weko-items-autofill/.tox/c1/lib/python3.6/site-packages/pkg_resources/_vendor/packaging/version.py:114: DeprecationWarning: Creating a LegacyVersion has been deprecated and will be removed in the next major release
    DeprecationWarning,

tests/test_utils.py::test_is_update_cache
tests/test_utils.py::test_cached_api_json
tests/test_utils.py::test_get_item_id
tests/test_utils.py::test_get_title_data
tests/test_utils.py::test_get_title_pubdate_path
tests/test_utils.py::test_get_crossref_record_data
tests/test_utils.py::test_get_crossref_record_data2
tests/test_utils.py::test_get_cinii_record_data
tests/test_utils.py::test_get_cinii_page_data
tests/test_utils.py::test_get_cinii_numpage
tests/test_utils.py::test_get_cinii_data_by_key
tests/test_utils.py::test_get_start_and_end_page
tests/test_utils.py::test_get_crossref_data_by_key
tests/test_utils.py::test_get_cinii_autofill_item
tests/test_utils.py::test_get_crossref_autofill_item
tests/test_utils.py::test_get_autofill_key_path
tests/test_utils.py::test_merge_dict
tests/test_utils.py::test_get_workflow_journal
tests/test_utils.py::test_get_wekoid_record_data
tests/test_utils.py::test_build_record_model_for_wekoid
tests/test_views.py::test_index
tests/test_views.py::test_get_selection_option_acl_login[0-True]
tests/test_views.py::test_get_selection_option_acl_login[1-True]
tests/test_views.py::test_get_selection_option_acl_login[2-True]
tests/test_views.py::test_get_selection_option_acl_login[3-True]
tests/test_views.py::test_get_selection_option_acl_login[4-True]
tests/test_views.py::test_get_selection_option_acl_login[5-True]
tests/test_views.py::test_get_selection_option_acl_login[7-True]
tests/test_views.py::test_get_selection_option_acl_guest
tests/test_views.py::test_get_selection_option
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True]
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True]
tests/test_views.py::test_get_title_pubdate_id_acl_guest
tests/test_views.py::test_get_title_pubdate_id
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True]
tests/test_views.py::test_get_auto_fill_record_data_acl_guest
tests/test_views.py::test_get_auto_fill_record_data
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True]
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest
tests/test_views.py::test_get_item_auto_fill_journal
tests/test_views.py::test_dbsession_clean
  /code/modules/weko-items-autofill/.tox/c1/lib/python3.6/site-packages/flask_caching/__init__.py:241: DeprecationWarning: Using the initialization functions in flask_caching.backend is deprecated.  Use the a full path to backend classes directly.
    category=DeprecationWarning,

-- Docs: https://docs.pytest.org/en/latest/warnings.html
=======
tests/test_views.py::test_index PASSED
tests/test_views.py::test_get_selection_option_acl_login[0-True] PASSED
tests/test_views.py::test_get_selection_option_acl_login[1-True] PASSED
tests/test_views.py::test_get_selection_option_acl_login[2-True] PASSED
tests/test_views.py::test_get_selection_option_acl_login[3-True] PASSED
tests/test_views.py::test_get_selection_option_acl_login[4-True] PASSED
tests/test_views.py::test_get_selection_option_acl_login[5-True] PASSED
tests/test_views.py::test_get_selection_option_acl_login[7-True] PASSED
tests/test_views.py::test_get_selection_option_acl_guest PASSED
tests/test_views.py::test_get_selection_option PASSED
tests/test_views.py::test_get_title_pubdate_id_acl_login[0-True] PASSED
tests/test_views.py::test_get_title_pubdate_id_acl_login[1-True] PASSED
tests/test_views.py::test_get_title_pubdate_id_acl_login[2-True] PASSED
tests/test_views.py::test_get_title_pubdate_id_acl_login[3-True] PASSED
tests/test_views.py::test_get_title_pubdate_id_acl_login[4-True] PASSED
tests/test_views.py::test_get_title_pubdate_id_acl_login[5-True] PASSED
tests/test_views.py::test_get_title_pubdate_id_acl_login[7-True] PASSED
tests/test_views.py::test_get_title_pubdate_id_acl_guest PASSED
tests/test_views.py::test_get_title_pubdate_id PASSED
tests/test_views.py::test_get_auto_fill_record_data_acl_login[0-True] PASSED
tests/test_views.py::test_get_auto_fill_record_data_acl_login[1-True] PASSED
tests/test_views.py::test_get_auto_fill_record_data_acl_login[2-True] PASSED
tests/test_views.py::test_get_auto_fill_record_data_acl_login[3-True] PASSED
tests/test_views.py::test_get_auto_fill_record_data_acl_login[4-True] PASSED
tests/test_views.py::test_get_auto_fill_record_data_acl_login[5-True] PASSED
tests/test_views.py::test_get_auto_fill_record_data_acl_login[7-True] PASSED
tests/test_views.py::test_get_auto_fill_record_data_acl_guest PASSED
tests/test_views.py::test_get_auto_fill_record_data PASSED
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[0-True] PASSED
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[1-True] PASSED
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[2-True] PASSED
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[3-True] PASSED
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[4-True] PASSED
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[5-True] PASSED
tests/test_views.py::test_get_item_auto_fill_journal_acl_login[7-True] PASSED
tests/test_views.py::test_get_item_auto_fill_journal_acl_guest PASSED
tests/test_views.py::test_get_item_auto_fill_journal PASSED
tests/test_views.py::test_dbsession_clean PASSED
tests/test_weko_items_autofill.py::test_version PASSED
tests/test_weko_items_autofill.py::test_init PASSED

=============================== warnings summary ===============================
../invenio-indexer/invenio_indexer/cli.py:108
  /code/modules/invenio-indexer/invenio_indexer/cli.py:108: DeprecationWarning: 'resultcallback' has been renamed to 'result_callback'. The old name will be removed in Click 8.1.
    @queue.resultcallback()

.tox/c1/lib/python3.6/site-packages/flask_oauthlib/contrib/cache.py:3
  /code/modules/weko-items-autofill/.tox/c1/lib/python3.6/site-packages/flask_oauthlib/contrib/cache.py:3: DeprecationWarning: 'werkzeug.contrib.cache' is deprecated as of version 0.15 and will be removed in version 1.0. It has moved to https://github.com/pallets/cachelib.
    from werkzeug.contrib.cache import NullCache, SimpleCache, FileSystemCache

.tox/c1/lib/python3.6/site-packages/past/translation/__init__.py:35
  /code/modules/weko-items-autofill/.tox/c1/lib/python3.6/site-packages/past/translation/__init__.py:35: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
    import imp

.tox/c1/src/pypdf2/PyPDF2/generic.py:348
  /code/modules/weko-items-autofill/.tox/c1/src/pypdf2/PyPDF2/generic.py:348: DeprecationWarning: invalid escape sequence \c
    b_("c") : b_("\c"),

tests/test_utils.py: 20 warnings
tests/test_views.py: 38 warnings
  /code/modules/weko-items-autofill/.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:794: FSADeprecationWarning: SQLALCHEMY_TRACK_MODIFICATIONS adds significant overhead and will be disabled by default in the future.  Set it to True or False to suppress this warning.
    'SQLALCHEMY_TRACK_MODIFICATIONS adds significant overhead and '

-- Docs: https://docs.pytest.org/en/stable/warnings.html
>>>>>>> origin/feature/change-pub-status-enum

---------- coverage: platform linux, python 3.6.15-final-0 -----------
Name                                 Stmts   Miss Branch BrPart  Cover
----------------------------------------------------------------------
weko_items_autofill/__init__.py          5      0      0      0   100%
<<<<<<< HEAD
weko_items_autofill/api.py              84     18     30      0    82%
weko_items_autofill/config.py           18      0      0      0   100%
weko_items_autofill/ext.py              18      0     10      0   100%
weko_items_autofill/permissions.py       4      0      0      0   100%
weko_items_autofill/utils.py           808    283    489      0    64%
weko_items_autofill/version.py           3      0      0      0   100%
weko_items_autofill/views.py            63     40     10      0    32%
----------------------------------------------------------------------
TOTAL                                 1003    341    539      0    65%
Coverage HTML written to dir htmlcov
Coverage XML written to file coverage.xml

============= 42 passed, 7077 warnings, 64 error in 62.45 seconds ==============
ERROR: InvocationError for command /code/modules/weko-items-autofill/.tox/c1/bin/pytest --cov=weko_items_autofill tests -v -s -vv --cov-branch --cov-report=term --cov-report=xml --cov-report=html --basetemp=/code/modules/weko-items-autofill/.tox/c1/tmp (exited with code 1)
___________________________________ summary ____________________________________
ERROR:   c1: commands failed
=======
weko_items_autofill/api.py              84      0     30      0   100%
weko_items_autofill/config.py           18      0      0      0   100%
weko_items_autofill/ext.py              18      0     10      0   100%
weko_items_autofill/permissions.py       4      0      0      0   100%
weko_items_autofill/utils.py           808      0    489      0   100%
weko_items_autofill/version.py           3      0      0      0   100%
weko_items_autofill/views.py            63      0     10      0   100%
----------------------------------------------------------------------
TOTAL                                 1003      0    539      0   100%
Coverage HTML written to dir htmlcov
Coverage XML written to file coverage.xml

================= 106 passed, 62 warnings in 126.91s (0:02:06) =================
___________________________________ summary ____________________________________
  c1: commands succeeded
  congratulations :)
>>>>>>> origin/feature/change-pub-status-enum
