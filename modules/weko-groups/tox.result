GLOB sdist-make: /code/modules/weko-groups/setup.py
c1 inst-nodeps: /code/modules/weko-groups/.tox/.tmp/package/1/weko-groups-0.1.0.dev20170000.zip
c1 installed: alabaster==0.7.13,alembic==0.9.6,amqp==2.6.0,angular-gettext-babel==0.3,aniso8601==8.0.0,arrow==0.12.1,asn1crypto==0.23.0,atomicwrites==1.4.1,attrs==17.4.0,b2handle==1.1.2,Babel==2.5.1,bagit==1.7.0,beautifulsoup4==4.9.3,bibtexparser==1.0.1,billiard==3.6.3.0,binaryornot==0.4.4,bleach==3.1.0,blinker==1.4,boto3==1.7.84,botocore==1.10.84,cachelib==0.1,cachetools==4.2.4,cchardet==2.1.1,celery==4.4.4,certifi==2017.11.5,cffi==1.11.2,chardet==3.0.4,citeproc-py==0.5.1,citeproc-py-styles==0.1.2,click==6.7,cookiecutter==1.6.0,counter-robots==2018.6,coverage==6.2,cryptography==2.1.4,datacite==1.0.1,DateTime==4.9,decorator==4.1.2,defusedxml==0.5.0,dictdiffer==0.7.0,distlib==0.3.6,dnspython==2.2.1,docutils==0.18.1,dojson==1.3.2,elasticsearch==6.1.1,elasticsearch-dsl==6.4.0,elementpath==1.0.6,email-validator==1.0.5,entrypoints==0.2.3,feedgen==0.7.0,filelock==3.4.1,Flask==1.1.0,Flask-Admin==1.5.3,Flask-Alembic==2.0.1,Flask-Assets==0.12,Flask-BabelEx==0.9.4,Flask-Breadcrumbs==0.5.0,Flask-Caching==1.10.1,Flask-CeleryExt==0.3.4,Flask-Collect==1.2.2,Flask-Cors==3.0.3,Flask-DebugToolbar==0.13.1,Flask-IIIF==0.6.1,Flask-KVSession==0.6.2,Flask-Limiter==1.1.0,Flask-Login==0.4.1,Flask-Mail==0.9.1,flask-marshmallow==0.14.0,Flask-Menu==0.6.0,-e git+https://github.com/RCOSDP/flask-oauthlib.git@83148ee01e9da37a8a1134febe83bc32b95bac6e#egg=Flask_OAuthlib,Flask-Plugins==1.6.1,Flask-Principal==0.4.0,Flask-RESTful==0.3.8,Flask-Security==3.0.0,flask-shell-ipython==0.4.1,Flask-Sitemap==0.4.0,Flask-SQLAlchemy==2.3.2,flask-talisman==0.4.1,Flask-WTF==0.14.3,-e git+https://github.com/RCOSDP/pyfpdf.git@f9b032148283d535cabc7789858081c80de36fef#egg=fpdf,frozendict==2.3.8,fs==0.5.4,ftfy==4.4.3,future==0.16.0,github3.py==1.1.0,html5lib==1.0.1,idna==2.6,iiif-prezi==0.3.0,imagesize==1.4.1,importlib-metadata==4.8.3,importlib-resources==5.4.0,infinity==1.4,intervals==0.8.0,invenio-access==1.1.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_accounts&subdirectory=modules/invenio-accounts,invenio-admin==1.1.2,invenio-app==1.1.0,invenio-assets==1.0.0,invenio-base==1.0.2,invenio-cache==1.0.0,invenio-celery==1.1.3,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_communities&subdirectory=modules/invenio-communities,invenio-config==1.0.0,invenio-csl-rest==1.0.0a1,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_db&subdirectory=modules/invenio-db,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_deposit&subdirectory=modules/invenio-deposit,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_files_rest&subdirectory=modules/invenio-files-rest,invenio-formatter==1.0.0b3,invenio-i18n==1.0.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_iiif&subdirectory=modules/invenio-iiif,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_indexer&subdirectory=modules/invenio-indexer,invenio-jsonschemas==1.0.0,invenio-logging==1.0.0b3,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_mail&subdirectory=modules/invenio-mail,invenio-marc21==1.0.0a8,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_oaiharvester&subdirectory=modules/invenio-oaiharvester,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_oaiserver&subdirectory=modules/invenio-oaiserver,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_oauth2server&subdirectory=modules/invenio-oauth2server,invenio-oauthclient==1.0.0,invenio-pidrelations==1.0.0a4,invenio-pidstore==1.0.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_previewer&subdirectory=modules/invenio-previewer,invenio-query-parser==0.6.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_queues&subdirectory=modules/invenio-queues,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_records&subdirectory=modules/invenio-records,invenio-records-files==1.0.0a10,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_records_rest&subdirectory=modules/invenio-records-rest,invenio-records-ui==1.0.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_resourcesyncclient&subdirectory=modules/invenio-resourcesyncclient,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_resourcesyncserver&subdirectory=modules/invenio-resourcesyncserver,invenio-rest==1.1.2,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_s3&subdirectory=modules/invenio-s3,-e git+https://github.com/RCOSDP/invenio-search.git@cff9744c5dc651893a9c51672c5b8da9adc21e16#egg=invenio_search,-e git+https://github.com/RCOSDP/invenio-search-ui.git@74bd3b2990ff27b39e01b6b31be9a0b5fda3dd0f#egg=invenio_search_ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_stats&subdirectory=modules/invenio-stats,invenio-theme==1.0.0b4,ipaddress==1.0.19,ipython==6.2.1,ipython-genutils==0.2.0,itsdangerous==0.24,jedi==0.11.0,Jinja2==2.10.1,jinja2-cli==0.6.0,jinja2-time==0.2.0,jmespath==0.10.0,jsmin==2.2.2,jsonpatch==1.21,jsonpath-ng==1.5.2,jsonpointer==1.14,jsonref==0.1,jsonresolver==0.2.1,jsonschema==2.6.0,jupyter-client==5.2.2,jupyter-core==4.4.0,-e git+https://github.com/RCOSDP/kombu.git@f204fdf078d5e94393c86693f545e2d011f620f5#egg=kombu,limits==1.2.1,lxml==4.1.1,Mako==1.0.7,MarkupSafe==1.1.1,marshmallow==2.20.1,marshmallow-sqlalchemy==0.23.1,maxminddb==1.5.2,maxminddb-geolite2==2017.803,mistune==0.8.3,mock==5.0.2,more-itertools==8.10.0,msgpack==0.6.2,nbconvert==5.3.1,nbformat==4.4.0,netaddr==0.8.0,node-semver==0.1.1,numpy==1.16.1,oauthlib==2.1.0,ordereddict==1.1,packaging==21.3,pandocfilters==1.4.2,parso==0.1.0,passlib==1.7.1,pbr==5.11.1,pexpect==4.3.0,pickleshare==0.7.4,Pillow==5.4.1,platformdirs==2.4.0,pluggy==0.13.1,ply==3.11,poyo==0.4.1,prompt-toolkit==1.0.15,psycopg2==2.7.3.2,ptyprocess==0.5.2,py==1.11.0,pycparser==2.18,Pygments==2.2.0,PyJWT==1.5.3,PyLD==2.0.3,pyparsing==3.1.0,-e git+https://github.com/RCOSDP/PyPDF2.git@fefc684a3a74aff6f99e5dff24f9b4dd1c95169d#egg=PyPDF2,pyPEG2==2.15.2,pytest==4.2.0,pytest-cov==2.9.0,python-dateutil==2.6.1,python-editor==1.0.3,python-geoip==1.2,pytz==2017.3,pyzmq==17.0.0,redis==2.10.6,requests==2.18.4,requests-oauthlib==1.1.0,resync==1.0.9,s3fs==0.1.6,s3transfer==0.1.13,selenium==3.141.0,Sickle==0.6.4,simplegeneric==0.8.1,simplejson==3.12.0,simplekv==0.11.2,six==1.16.0,snowballstemmer==2.2.0,soupsieve==2.3.2.post1,speaklater==1.3,Sphinx==1.8.4,sphinxcontrib-serializinghtml==1.1.5,sphinxcontrib-websupport==1.2.4,SQLAlchemy==1.2.19,SQLAlchemy-Continuum==1.3.6,SQLAlchemy-Utils==0.35.0,stevedore==3.5.2,sword3common==0.1.1,testpath==0.3.1,toml==0.10.2,tornado==4.5.3,tox==3.28.0,traitlets==4.3.2,typing_extensions==4.1.1,ua-parser==0.7.3,uritemplate==4.1.1,uritools==2.1.0,urllib3==1.22,uWSGI==2.0.21,uwsgitop==0.11,validators==0.12.0,vine==1.3.0,virtualenv==20.17.1,virtualenv-clone==0.5.7,virtualenvwrapper==4.8.4,Wand==0.6.1,wcwidth==0.1.7,webargs==5.5.2,webassets==0.12.1,webencodings==0.5.1,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_accounts&subdirectory=modules/weko-accounts,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_admin&subdirectory=modules/weko-admin,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_authors&subdirectory=modules/weko-authors,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_bulkupdate&subdirectory=modules/weko-bulkupdate,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_deposit&subdirectory=modules/weko-deposit,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_gridlayout&subdirectory=modules/weko-gridlayout,weko-groups @ file:///code/modules/weko-groups/.tox/.tmp/package/1/weko-groups-0.1.0.dev20170000.zip,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_handle&subdirectory=modules/weko-handle,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_index_tree&subdirectory=modules/weko-index-tree,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_indextree_journal&subdirectory=modules/weko-indextree-journal,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_items_autofill&subdirectory=modules/weko-items-autofill,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_items_ui&subdirectory=modules/weko-items-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_itemtypes_ui&subdirectory=modules/weko-itemtypes-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_logging&subdirectory=modules/weko-logging,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_records&subdirectory=modules/weko-records,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_records_ui&subdirectory=modules/weko-records-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_redis&subdirectory=modules/weko-redis,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_schema_ui&subdirectory=modules/weko-schema-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_search_ui&subdirectory=modules/weko-search-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_sitemap&subdirectory=modules/weko-sitemap,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_swordserver&subdirectory=modules/weko-swordserver,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_theme&subdirectory=modules/weko-theme,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_user_profiles&subdirectory=modules/weko-user-profiles,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_workflow&subdirectory=modules/weko-workflow,Werkzeug==0.15.2,whichcraft==0.4.1,WTForms==2.1,WTForms-Alchemy==0.16.5,WTForms-Components==0.10.3,xmlschema==0.9.30,xmltodict==0.12.0,zipp==3.6.0,zope.interface==5.5.2
c1 run-test-pre: PYTHONHASHSEED='1807301118'
c1 run-test: commands[0] | pytest --cov=weko_groups tests -v --cov-branch --cov-report=term --cov-report=xml --basetemp=/code/modules/weko-groups/.tox/c1/tmp
============================= test session starts ==============================
platform linux -- Python 3.6.15, pytest-4.2.0, py-1.11.0, pluggy-0.13.1 -- /code/modules/weko-groups/.tox/c1/bin/python
cachedir: .tox/c1/.pytest_cache
rootdir: /code/modules/weko-groups, inifile:
plugins: celery-4.4.4, cov-2.9.0
collecting ... collected 50 items

tests/test_forms.py::test_emails_validator ERROR                         [  2%]
tests/test_models.py::test_subscription_policy_validate PASSED           [  4%]
tests/test_models.py::test_subscription_policy_describe PASSED           [  6%]
tests/test_models.py::test_privacy_policy_validate PASSED                [  8%]
tests/test_models.py::test_privacy_policy_describe PASSED                [ 10%]
tests/test_models.py::test_membership_state_validate PASSED              [ 12%]
tests/test_models.py::test_group_creation ERROR                          [ 14%]
tests/test_models.py::test_group_creation_existing_name ERROR            [ 16%]
tests/test_models.py::test_group_creation_signals ERROR                  [ 18%]
tests/test_models.py::test_group_creation_invalid_data ERROR             [ 20%]
tests/test_models.py::test_group_delete ERROR                            [ 22%]
tests/test_models.py::test_group_update ERROR                            [ 24%]
tests/test_models.py::test_group_update_duplicated_names ERROR           [ 26%]
tests/test_models.py::test_group_get_by_name ERROR                       [ 28%]
tests/test_models.py::test_group_query_by_names ERROR                    [ 30%]
tests/test_models.py::test_group_query_by_user ERROR                     [ 32%]
tests/test_models.py::test_group_add_admin ERROR                         [ 34%]
tests/test_models.py::test_group_remove_admin ERROR                      [ 36%]
tests/test_models.py::test_group_add_member ERROR                        [ 38%]
tests/test_models.py::test_group_remove_member ERROR                     [ 40%]
tests/test_models.py::test_group_invite ERROR                            [ 42%]
tests/test_models.py::test_group_subscribe ERROR                         [ 44%]
tests/test_models.py::test_group_is_admin ERROR                          [ 46%]
tests/test_models.py::test_group_is_member ERROR                         [ 48%]
tests/test_models.py::test_membership_create ERROR                       [ 50%]
tests/test_models.py::test_membership_delete ERROR                       [ 52%]
tests/test_models.py::test_membership_get ERROR                          [ 54%]
tests/test_models.py::test_membership_query_by_user ERROR                [ 56%]
tests/test_models.py::test_membership_query_invitations ERROR            [ 58%]
tests/test_models.py::test_membership_query_requests ERROR               [ 60%]
tests/test_models.py::test_membership_query_by_group ERROR               [ 62%]
tests/test_models.py::test_membership_accept ERROR                       [ 64%]
tests/test_models.py::test_membership_reject ERROR                       [ 66%]
tests/test_models.py::test_group_admin_create ERROR                      [ 68%]
tests/test_models.py::test_group_admin_delete ERROR                      [ 70%]
tests/test_models.py::test_group_admin_query_by_group ERROR              [ 72%]
tests/test_models.py::test_group_admin_query_by_admin ERROR              [ 74%]
tests/test_models.py::test_group_admin_query_admins_by_group_ids ERROR   [ 76%]
tests/test_models.py::test_invite_by_emails ERROR                        [ 78%]
tests/test_models.py::test_can_see_members ERROR                         [ 80%]
tests/test_models.py::test_can_edit ERROR                                [ 82%]
tests/test_models.py::test_can_invite_others ERROR                       [ 84%]
tests/test_models.py::test_can_leave ERROR                               [ 86%]
tests/test_models.py::test_members_count ERROR                           [ 88%]
tests/test_models.py::test_group_search ERROR                            [ 90%]
tests/test_models.py::test_membership_search ERROR                       [ 92%]
tests/test_models.py::test_function_issue34801 ERROR                     [ 94%]
tests/test_weko_groups.py::test_version PASSED                           [ 96%]
tests/test_weko_groups.py::test_init PASSED                              [ 98%]
tests/test_weko_groups.py::test_view ERROR                               [100%]

==================================== ERRORS ====================================
___________________ ERROR at setup of test_emails_validator ____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f938a1a9128>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f938a1a9128>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f938a1a9128>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f938a1a9128>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f938a1a9128>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f938a1a9320>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f938a1a3648>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f938a1a9128>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f938a1a9128>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f938a1a92e8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f938a1a9128>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f938a1a92e8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f938a1a92e8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f938a190828>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_emails_validator>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________________ ERROR at setup of test_group_creation _____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f938bbdde10>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f938bbdde10>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f938bbdde10>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f938bbdde10>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f938bbdde10>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f938a91fdd8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f9389e572c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f938bbdde10>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f938bbdde10>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f938a961d68>
pool = <sqlalchemy.pool.QueuePool object at 0x7f938bbdde10>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f938a961d68>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f938a961d68>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f938a8da5c0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_group_creation>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____________ ERROR at setup of test_group_creation_existing_name ______________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f9389fbda90>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389fbda90>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389fbda90>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389fbda90>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389fbda90>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f9389fbdcf8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f9389d63b88>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389fbda90>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389fbda90>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389fbdbe0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389fbda90>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389fbdbe0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389fbdbe0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f9389fbdef0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_group_creation_existing_name>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________________ ERROR at setup of test_group_creation_signals _________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f938a1a96d8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f938a1a96d8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f938a1a96d8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f938a1a96d8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f938a1a96d8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f938a1a9dd8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f938a0d2ec8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f938a1a96d8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f938a1a96d8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f938a1a9898>
pool = <sqlalchemy.pool.QueuePool object at 0x7f938a1a96d8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f938a1a9898>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f938a1a9898>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f938a1a94e0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_group_creation_signals>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
______________ ERROR at setup of test_group_creation_invalid_data ______________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f938a0a6b70>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f938a0a6b70>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f938a0a6b70>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f938a0a6b70>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f938a0a6b70>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f938a0a60b8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f9389fdb788>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f938a0a6b70>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f938a0a6b70>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f938a0a6160>
pool = <sqlalchemy.pool.QueuePool object at 0x7f938a0a6b70>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f938a0a6160>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f938a0a6160>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f938a0a6b38>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_group_creation_invalid_data>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____________________ ERROR at setup of test_group_delete ______________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f9389e5d860>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389e5d860>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389e5d860>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389e5d860>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389e5d860>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f9389e5d668>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f9389ac30c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389e5d860>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389e5d860>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389e5d358>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389e5d860>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389e5d358>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389e5d358>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f9389e5de10>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_group_delete>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____________________ ERROR at setup of test_group_update ______________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f9389ffeac8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389ffeac8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389ffeac8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389ffeac8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389ffeac8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f9389ffee48>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f938a071108>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389ffeac8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389ffeac8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389ffeda0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389ffeac8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389ffeda0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389ffeda0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f9389ffe940>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_group_update>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____________ ERROR at setup of test_group_update_duplicated_names _____________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f9389bb5438>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389bb5438>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389bb5438>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389bb5438>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389bb5438>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f9389bb5470>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f9389f82cc8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389bb5438>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389bb5438>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389bb5358>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389bb5438>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389bb5358>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389bb5358>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f9389bb5240>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_group_update_duplicated_names>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___________________ ERROR at setup of test_group_get_by_name ___________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f9389d08828>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389d08828>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389d08828>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389d08828>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389d08828>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f9389d08f28>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f9389eab8c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389d08828>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389d08828>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389d08eb8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389d08828>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389d08eb8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389d08eb8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f9389e5d2e8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_group_get_by_name>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of test_group_query_by_names __________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f9389d081d0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389d081d0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389d081d0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389d081d0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389d081d0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f9389e93240>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f9389f454c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389d081d0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389d081d0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389e93ef0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389d081d0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389e93ef0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389e93ef0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f9389d08ac8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_group_query_by_names>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________________ ERROR at setup of test_group_query_by_user __________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f9389a614e0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389a614e0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389a614e0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389a614e0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389a614e0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f9389a61860>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f9389975148>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389a614e0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389a614e0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389a617b8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389a614e0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389a617b8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389a617b8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f9389a61470>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_group_query_by_user>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________________ ERROR at setup of test_group_add_admin ____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f9389bb5748>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389bb5748>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389bb5748>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389bb5748>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389bb5748>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f9389bb55f8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f9389a3dd48>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389bb5748>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389bb5748>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389bb5a20>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389bb5748>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389bb5a20>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389bb5a20>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f9389841080>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_group_add_admin>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________________ ERROR at setup of test_group_remove_admin ___________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f93899e49b0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f93899e49b0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f93899e49b0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f93899e49b0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f93899e49b0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f93899e4ba8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f9389871988>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f93899e49b0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f93899e49b0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f93899e49e8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f93899e49b0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f93899e49e8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f93899e49e8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f93899e4860>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_group_remove_admin>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___________________ ERROR at setup of test_group_add_member ____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f9389a61cf8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389a61cf8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389a61cf8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389a61cf8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389a61cf8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f9389a61c50>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f9389b6a5c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389a61cf8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389a61cf8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389a61b38>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389a61cf8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389a61b38>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389a61b38>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f9389bc6390>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_group_add_member>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________________ ERROR at setup of test_group_remove_member __________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f93899e4d68>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f93899e4d68>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f93899e4d68>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f93899e4d68>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f93899e4d68>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f9389b17048>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f9389e0d248>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f93899e4d68>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f93899e4d68>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389b17f60>
pool = <sqlalchemy.pool.QueuePool object at 0x7f93899e4d68>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389b17f60>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389b17f60>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f93899e4eb8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_group_remove_member>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____________________ ERROR at setup of test_group_invite ______________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f9389927898>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389927898>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389927898>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389927898>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389927898>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f9389927d68>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f9389bf3e48>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389927898>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389927898>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389927f28>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389927898>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389927f28>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389927f28>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f93899273c8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_group_invite>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________________ ERROR at setup of test_group_subscribe ____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f9389da9908>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389da9908>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389da9908>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389da9908>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389da9908>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f93896cb0b8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f93898aca48>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389da9908>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389da9908>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f93896cb1d0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389da9908>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f93896cb1d0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f93896cb1d0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f9389da9748>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_group_subscribe>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________________ ERROR at setup of test_group_is_admin _____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f9389927a20>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389927a20>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389927a20>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389927a20>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389927a20>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f93898e8fd0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f9389aa6988>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389927a20>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389927a20>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f93898e8f60>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389927a20>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f93898e8f60>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f93898e8f60>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f9389927128>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_group_is_admin>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________________ ERROR at setup of test_group_is_member ____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f9389f0b588>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389f0b588>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389f0b588>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389f0b588>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389f0b588>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f9389f0b160>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f9389c650c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389f0b588>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389f0b588>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389f0b240>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389f0b588>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389f0b240>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389f0b240>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f9389f0bef0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_group_is_member>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___________________ ERROR at setup of test_membership_create ___________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f9389733a90>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389733a90>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389733a90>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389733a90>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389733a90>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f9389733cc0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f9389d11b48>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389733a90>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389733a90>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389733c50>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389733a90>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389733c50>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389733c50>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f9389733f60>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_membership_create>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___________________ ERROR at setup of test_membership_delete ___________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f93896bd1d0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f93896bd1d0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f93896bd1d0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f93896bd1d0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f93896bd1d0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f93896bd550>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f9389c14a88>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f93896bd1d0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f93896bd1d0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f93896bd588>
pool = <sqlalchemy.pool.QueuePool object at 0x7f93896bd1d0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f93896bd588>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f93896bd588>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f93896bd390>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_membership_delete>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________________ ERROR at setup of test_membership_get _____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f9389c38ba8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389c38ba8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389c38ba8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389c38ba8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389c38ba8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f9389c38da0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f9389ddd388>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389c38ba8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389c38ba8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389c38d30>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389c38ba8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389c38d30>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389c38d30>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f9389c38a20>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_membership_get>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_______________ ERROR at setup of test_membership_query_by_user ________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f9389827cf8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389827cf8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389827cf8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389827cf8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389827cf8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f9389827a20>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f93898c1fc8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389827cf8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389827cf8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389827a58>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389827cf8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389827a58>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389827a58>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f93898274e0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_membership_query_by_user>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____________ ERROR at setup of test_membership_query_invitations ______________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f9389766b38>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389766b38>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389766b38>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389766b38>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389766b38>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f93897737b8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f93896f7c08>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389766b38>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389766b38>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f93897730b8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389766b38>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f93897730b8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f93897730b8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f93897665c0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_membership_query_invitations>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_______________ ERROR at setup of test_membership_query_requests _______________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f938940bcc0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f938940bcc0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f938940bcc0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f938940bcc0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f938940bcc0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f938940b9b0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f93897ab808>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f938940bcc0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f938940bcc0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f938940b940>
pool = <sqlalchemy.pool.QueuePool object at 0x7f938940bcc0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f938940b940>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f938940b940>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f938940b550>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_membership_query_requests>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_______________ ERROR at setup of test_membership_query_by_group _______________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f9389325ba8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389325ba8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389325ba8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389325ba8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389325ba8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f9389335438>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f938974d448>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389325ba8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389325ba8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389325828>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389325ba8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389325828>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389325828>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f93893254a8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_membership_query_by_group>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___________________ ERROR at setup of test_membership_accept ___________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f938966e2e8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f938966e2e8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f938966e2e8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f938966e2e8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f938966e2e8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f938966e4e0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f9389676088>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f938966e2e8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f938966e2e8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f938966e4a8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f938966e2e8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f938966e4a8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f938966e4a8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f938966e160>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_membership_accept>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___________________ ERROR at setup of test_membership_reject ___________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f9389482ac8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389482ac8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389482ac8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389482ac8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389482ac8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f93893a0358>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f93893fad48>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389482ac8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389482ac8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389482748>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389482ac8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389482748>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389482748>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f93894823c8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_membership_reject>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________________ ERROR at setup of test_group_admin_create ___________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f938923bb00>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f938923bb00>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f938923bb00>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f938923bb00>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f938923bb00>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f938923b7f0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f93895a58c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f938923bb00>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f938923bb00>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f938923b780>
pool = <sqlalchemy.pool.QueuePool object at 0x7f938923bb00>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f938923b780>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f938923b780>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f938923b390>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_group_admin_create>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________________ ERROR at setup of test_group_admin_delete ___________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f93891a2588>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f93891a2588>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f93891a2588>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f93891a2588>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f93891a2588>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f93891a2940>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f9389530908>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f93891a2588>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f93891a2588>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f93891a2a58>
pool = <sqlalchemy.pool.QueuePool object at 0x7f93891a2588>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f93891a2a58>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f93891a2a58>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f9389191748>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_group_admin_delete>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
______________ ERROR at setup of test_group_admin_query_by_group _______________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f9389cde668>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389cde668>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389cde668>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389cde668>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389cde668>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f9389cde860>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f9389627148>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389cde668>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389cde668>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389cde908>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389cde668>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389cde908>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389cde908>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f9389cde470>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_group_admin_query_by_group>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
______________ ERROR at setup of test_group_admin_query_by_admin _______________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f93896137b8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f93896137b8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f93896137b8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f93896137b8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f93896137b8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f9389613a90>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f9389919188>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f93896137b8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f93896137b8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f93896139b0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f93896137b8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f93896139b0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f93896139b0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f9389613518>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_group_admin_query_by_admin>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________ ERROR at setup of test_group_admin_query_admins_by_group_ids _________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f93895f84a8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f93895f84a8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f93895f84a8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f93895f84a8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f93895f84a8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f93895f86d8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f93897f99c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f93895f84a8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f93895f84a8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f93895f8630>
pool = <sqlalchemy.pool.QueuePool object at 0x7f93895f84a8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f93895f8630>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f93895f8630>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f93895f8320>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_group_admin_query_admins_by_group_ids>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___________________ ERROR at setup of test_invite_by_emails ____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f93897de320>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f93897de320>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f93897de320>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f93897de320>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f93897de320>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f93897de390>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f93894d89c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f93897de320>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f93897de320>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f93897de358>
pool = <sqlalchemy.pool.QueuePool object at 0x7f93897de320>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f93897de358>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f93897de358>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f93897de1d0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_invite_by_emails>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________________ ERROR at setup of test_can_see_members ____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f9389205b38>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389205b38>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389205b38>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389205b38>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389205b38>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f9389205908>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f93892a8208>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389205b38>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389205b38>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389205898>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389205b38>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389205898>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389205898>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f9389205278>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_can_see_members>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_______________________ ERROR at setup of test_can_edit ________________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f93892b0b38>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f93892b0b38>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f93892b0b38>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f93892b0b38>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f93892b0b38>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f93892b0d30>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f93891b4308>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f93892b0b38>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f93892b0b38>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f93892b0ef0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f93892b0b38>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f93892b0ef0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f93892b0ef0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f93892b0ac8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_can_edit>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___________________ ERROR at setup of test_can_invite_others ___________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f9389205588>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389205588>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389205588>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389205588>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389205588>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f9389205fd0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f9389427d08>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389205588>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389205588>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389205cc0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389205588>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389205cc0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389205cc0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f93892052b0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_can_invite_others>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_______________________ ERROR at setup of test_can_leave _______________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f9389430c88>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389430c88>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389430c88>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389430c88>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389430c88>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f9389430f60>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f938944fc88>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389430c88>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389430c88>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389430eb8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389430c88>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389430eb8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389430eb8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f9389430c18>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_can_leave>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____________________ ERROR at setup of test_members_count _____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f9389036ba8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389036ba8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389036ba8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389036ba8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389036ba8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f9389036b00>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f938921f608>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389036ba8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9389036ba8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389036a20>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9389036ba8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389036a20>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f9389036a20>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f9389036828>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_members_count>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____________________ ERROR at setup of test_group_search ______________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f938908b908>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f938908b908>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f938908b908>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f938908b908>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f938908b908>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f938908b780>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f9389359688>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f938908b908>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f938908b908>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f938908b4a8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f938908b908>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f938908b4a8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f938908b4a8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f938908b7b8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_group_search>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___________________ ERROR at setup of test_membership_search ___________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f93892ef198>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f93892ef198>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f93892ef198>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f93892ef198>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f93892ef198>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f93892ef2b0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f938947c088>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f93892ef198>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f93892ef198>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f93892ef390>
pool = <sqlalchemy.pool.QueuePool object at 0x7f93892ef198>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f93892ef390>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f93892ef390>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f9388fd9550>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_membership_search>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________________ ERROR at setup of test_function_issue34801 __________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f9388fe9588>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9388fe9588>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9388fe9588>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9388fe9588>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9388fe9588>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f9388fe9b70>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f93893170c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9388fe9588>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f9388fe9588>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9388fe98d0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f9388fe9588>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f9388fe98d0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f9388fe98d0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f9388fe9898>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_function_issue34801>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________________ ERROR at setup of test_view __________________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f93892ef668>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f93892ef668>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f93892ef668>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f93892ef668>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f93892ef668>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f93892ef860>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f938916f908>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f93892ef668>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f93892ef668>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f93892ef828>
pool = <sqlalchemy.pool.QueuePool object at 0x7f93892ef668>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f93892ef828>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f93892ef828>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f93890b8da0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_view>>

    @pytest.fixture
    def app(request):
        """
        Flask application fixture.
    
        :param request: Request.
        :return: App object.
        """
        instance_path = tempfile.mkdtemp()
        app = Flask('weko_groups_app', instance_path=instance_path)
        app.config.update(
            LOGIN_DISABLED=False,
            MAIL_SUPPRESS_SEND=True,
            SECRET_KEY='1qertgyujk345678ijk',
            # SQLALCHEMY_DATABASE_URI=os.environ.get('SQLALCHEMY_DATABASE_URI',
            #                                        'sqlite:///test.db'),
            SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
            SQLALCHEMY_TRACK_MODIFICATIONS=True,
            TESTING=True,
            WTF_CSRF_ENABLED=False,
        )
        Babel(app)
        Menu(app)
        Breadcrumbs(app)
        InvenioDB(app)
        InvenioAccounts(app)
        WekoGroups(app)
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
=============================== warnings summary ===============================
tests/test_forms.py::test_emails_validator
  /code/modules/weko-groups/.tox/c1/lib/python3.6/site-packages/pkg_resources/_vendor/packaging/specifiers.py:276: DeprecationWarning: Creating a LegacyVersion has been deprecated and will be removed in the next major release
    DeprecationWarning,

tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_forms.py::test_emails_validator
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_existing_name
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_signals
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_creation_invalid_data
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_delete
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_update_duplicated_names
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_get_by_name
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_names
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_query_by_user
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_add_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_remove_admin
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_add_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_remove_member
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_invite
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_subscribe
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_admin
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_group_is_member
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_create
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_delete
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_get
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_by_user
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_invitations
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_requests
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_query_by_group
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_accept
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_membership_reject
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_create
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_delete
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_group
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_by_admin
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_group_admin_query_admins_by_group_ids
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_invite_by_emails
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_see_members
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_edit
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_invite_others
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_can_leave
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_members_count
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_group_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_membership_search
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_models.py::test_function_issue34801
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
tests/test_weko_groups.py::test_view
  /code/modules/weko-groups/.tox/c1/lib/python3.6/site-packages/pkg_resources/_vendor/packaging/version.py:114: DeprecationWarning: Creating a LegacyVersion has been deprecated and will be removed in the next major release
    DeprecationWarning,

-- Docs: https://docs.pytest.org/en/latest/warnings.html

---------- coverage: platform linux, python 3.6.15-final-0 -----------
Name                      Stmts   Miss Branch BrPart  Cover
-----------------------------------------------------------
weko_groups/__init__.py       4      0      0      0   100%
weko_groups/api.py            3      0      0      0   100%
weko_groups/bundles.py        5      5      0      0     0%
weko_groups/ext.py           12      0      4      0   100%
weko_groups/forms.py         31     10     12      0    67%
weko_groups/models.py       317    190     92      0    35%
weko_groups/version.py        2      0      0      0   100%
weko_groups/views.py        217    158     42      3    24%
weko_groups/widgets.py       16      9      6      0    41%
-----------------------------------------------------------
TOTAL                       607    372    156      3    35%
Coverage XML written to file coverage.xml

============== 7 passed, 1893 warnings, 43 error in 43.23 seconds ==============
ERROR: InvocationError for command /code/modules/weko-groups/.tox/c1/bin/pytest --cov=weko_groups tests -v --cov-branch --cov-report=term --cov-report=xml --basetemp=/code/modules/weko-groups/.tox/c1/tmp (exited with code 1)
___________________________________ summary ____________________________________
ERROR:   c1: commands failed
