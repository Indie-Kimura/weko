GLOB sdist-make: /code/modules/weko-records/setup.py
c1 inst-nodeps: /code/modules/weko-records/.tox/.tmp/package/1/weko-records-0.1.0.dev20170000.zip
c1 installed: alabaster==0.7.13,alembic==0.9.6,amqp==2.6.0,angular-gettext-babel==0.3,aniso8601==8.0.0,arrow==0.12.1,asn1crypto==0.23.0,atomicwrites==1.4.1,attrs==17.4.0,b2handle==1.1.2,Babel==2.5.1,bagit==1.7.0,beautifulsoup4==4.9.3,bibtexparser==1.0.1,billiard==3.6.3.0,binaryornot==0.4.4,bleach==3.1.0,blinker==1.4,boto3==1.7.84,botocore==1.10.84,cachelib==0.1,cachetools==4.2.4,cchardet==2.1.1,celery==4.4.4,certifi==2017.11.5,cffi==1.11.2,chardet==3.0.4,citeproc-py==0.5.1,citeproc-py-styles==0.1.2,click==6.7,cookiecutter==1.6.0,counter-robots==2018.6,coverage==6.2,cryptography==2.1.4,datacite==1.0.1,DateTime==4.9,decorator==4.1.2,defusedxml==0.5.0,dictdiffer==0.7.0,distlib==0.3.6,dnspython==2.2.1,docutils==0.18.1,dojson==1.3.2,elasticsearch==6.1.1,elasticsearch-dsl==6.4.0,elementpath==1.0.6,email-validator==1.0.5,entrypoints==0.2.3,feedgen==0.7.0,filelock==3.4.1,Flask==1.1.0,Flask-Admin==1.5.3,Flask-Alembic==2.0.1,Flask-Assets==0.12,Flask-BabelEx==0.9.4,Flask-Breadcrumbs==0.5.0,Flask-Caching==1.10.1,Flask-CeleryExt==0.3.4,Flask-Collect==1.2.2,Flask-Cors==3.0.3,Flask-DebugToolbar==0.13.1,Flask-IIIF==0.6.1,Flask-KVSession==0.6.2,Flask-Limiter==1.1.0,Flask-Login==0.4.1,Flask-Mail==0.9.1,flask-marshmallow==0.14.0,Flask-Menu==0.6.0,-e git+https://github.com/RCOSDP/flask-oauthlib.git@83148ee01e9da37a8a1134febe83bc32b95bac6e#egg=Flask_OAuthlib,Flask-Plugins==1.6.1,Flask-Principal==0.4.0,Flask-RESTful==0.3.8,Flask-Security==3.0.0,flask-shell-ipython==0.4.1,Flask-Sitemap==0.4.0,Flask-SQLAlchemy==2.3.2,flask-talisman==0.4.1,Flask-WTF==0.14.3,-e git+https://github.com/RCOSDP/pyfpdf.git@f9b032148283d535cabc7789858081c80de36fef#egg=fpdf,frozendict==2.3.8,fs==0.5.4,ftfy==4.4.3,future==0.16.0,github3.py==1.1.0,html5lib==1.0.1,idna==2.6,iiif-prezi==0.3.0,imagesize==1.4.1,importlib-metadata==4.8.3,importlib-resources==5.4.0,infinity==1.4,intervals==0.8.0,invenio-access==1.1.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_accounts&subdirectory=modules/invenio-accounts,invenio-admin==1.1.2,invenio-app==1.1.0,invenio-assets==1.0.0,invenio-base==1.0.2,invenio-cache==1.0.0,invenio-celery==1.1.3,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_communities&subdirectory=modules/invenio-communities,invenio-config==1.0.0,invenio-csl-rest==1.0.0a1,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_db&subdirectory=modules/invenio-db,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_deposit&subdirectory=modules/invenio-deposit,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_files_rest&subdirectory=modules/invenio-files-rest,invenio-formatter==1.0.0b3,invenio-i18n==1.0.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_iiif&subdirectory=modules/invenio-iiif,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_indexer&subdirectory=modules/invenio-indexer,invenio-jsonschemas==1.0.0,invenio-logging==1.0.0b3,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_mail&subdirectory=modules/invenio-mail,invenio-marc21==1.0.0a8,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_oaiharvester&subdirectory=modules/invenio-oaiharvester,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_oaiserver&subdirectory=modules/invenio-oaiserver,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_oauth2server&subdirectory=modules/invenio-oauth2server,invenio-oauthclient==1.0.0,invenio-pidrelations==1.0.0a4,invenio-pidstore==1.0.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_previewer&subdirectory=modules/invenio-previewer,invenio-query-parser==0.6.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_queues&subdirectory=modules/invenio-queues,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_records&subdirectory=modules/invenio-records,invenio-records-files==1.0.0a10,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_records_rest&subdirectory=modules/invenio-records-rest,invenio-records-ui==1.0.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_resourcesyncclient&subdirectory=modules/invenio-resourcesyncclient,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_resourcesyncserver&subdirectory=modules/invenio-resourcesyncserver,invenio-rest==1.1.2,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_s3&subdirectory=modules/invenio-s3,-e git+https://github.com/RCOSDP/invenio-search.git@cff9744c5dc651893a9c51672c5b8da9adc21e16#egg=invenio_search,-e git+https://github.com/RCOSDP/invenio-search-ui.git@74bd3b2990ff27b39e01b6b31be9a0b5fda3dd0f#egg=invenio_search_ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_stats&subdirectory=modules/invenio-stats,invenio-theme==1.0.0b4,ipaddress==1.0.19,ipython==6.2.1,ipython-genutils==0.2.0,itsdangerous==0.24,jedi==0.11.0,Jinja2==2.10.1,jinja2-cli==0.6.0,jinja2-time==0.2.0,jmespath==0.10.0,jsmin==2.2.2,jsonpatch==1.21,jsonpath-ng==1.5.2,jsonpointer==1.14,jsonref==0.1,jsonresolver==0.2.1,jsonschema==2.6.0,jupyter-client==5.2.2,jupyter-core==4.4.0,-e git+https://github.com/RCOSDP/kombu.git@f204fdf078d5e94393c86693f545e2d011f620f5#egg=kombu,limits==1.2.1,lxml==4.1.1,Mako==1.0.7,MarkupSafe==1.1.1,marshmallow==2.20.1,marshmallow-sqlalchemy==0.23.1,maxminddb==1.5.2,maxminddb-geolite2==2017.803,mistune==0.8.3,mock==5.0.2,more-itertools==8.10.0,msgpack==0.6.2,nbconvert==5.3.1,nbformat==4.4.0,netaddr==0.8.0,node-semver==0.1.1,numpy==1.16.1,oauthlib==2.1.0,ordereddict==1.1,packaging==21.3,pandocfilters==1.4.2,parso==0.1.0,passlib==1.7.1,pbr==5.11.1,pexpect==4.3.0,pickleshare==0.7.4,Pillow==5.4.1,platformdirs==2.4.0,pluggy==0.13.1,ply==3.11,poyo==0.4.1,prompt-toolkit==1.0.15,psycopg2==2.7.3.2,ptyprocess==0.5.2,py==1.11.0,pycparser==2.18,Pygments==2.2.0,PyJWT==1.5.3,PyLD==2.0.3,pyparsing==3.1.0,-e git+https://github.com/RCOSDP/PyPDF2.git@fefc684a3a74aff6f99e5dff24f9b4dd1c95169d#egg=PyPDF2,pyPEG2==2.15.2,pytest==4.2.0,pytest-cov==2.9.0,python-dateutil==2.6.1,python-editor==1.0.3,python-geoip==1.2,pytz==2017.3,pyzmq==17.0.0,redis==2.10.6,requests==2.18.4,requests-oauthlib==1.1.0,resync==1.0.9,s3fs==0.1.6,s3transfer==0.1.13,selenium==3.141.0,Sickle==0.6.4,simplegeneric==0.8.1,simplejson==3.12.0,simplekv==0.11.2,six==1.16.0,snowballstemmer==2.2.0,soupsieve==2.3.2.post1,speaklater==1.3,Sphinx==1.8.4,sphinxcontrib-serializinghtml==1.1.5,sphinxcontrib-websupport==1.2.4,SQLAlchemy==1.2.19,SQLAlchemy-Continuum==1.3.6,SQLAlchemy-Utils==0.35.0,stevedore==3.5.2,sword3common==0.1.1,testpath==0.3.1,toml==0.10.2,tornado==4.5.3,tox==3.28.0,traitlets==4.3.2,typing_extensions==4.1.1,ua-parser==0.7.3,uritemplate==4.1.1,uritools==2.1.0,urllib3==1.22,uWSGI==2.0.21,uwsgitop==0.11,validators==0.12.0,vine==1.3.0,virtualenv==20.17.1,virtualenv-clone==0.5.7,virtualenvwrapper==4.8.4,Wand==0.6.1,wcwidth==0.1.7,webargs==5.5.2,webassets==0.12.1,webencodings==0.5.1,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_accounts&subdirectory=modules/weko-accounts,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_admin&subdirectory=modules/weko-admin,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_authors&subdirectory=modules/weko-authors,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_bulkupdate&subdirectory=modules/weko-bulkupdate,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_deposit&subdirectory=modules/weko-deposit,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_gridlayout&subdirectory=modules/weko-gridlayout,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_groups&subdirectory=modules/weko-groups,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_handle&subdirectory=modules/weko-handle,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_index_tree&subdirectory=modules/weko-index-tree,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_indextree_journal&subdirectory=modules/weko-indextree-journal,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_items_autofill&subdirectory=modules/weko-items-autofill,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_items_ui&subdirectory=modules/weko-items-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_itemtypes_ui&subdirectory=modules/weko-itemtypes-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_logging&subdirectory=modules/weko-logging,weko-records @ file:///code/modules/weko-records/.tox/.tmp/package/1/weko-records-0.1.0.dev20170000.zip,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_records_ui&subdirectory=modules/weko-records-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_redis&subdirectory=modules/weko-redis,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_schema_ui&subdirectory=modules/weko-schema-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_search_ui&subdirectory=modules/weko-search-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_sitemap&subdirectory=modules/weko-sitemap,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_swordserver&subdirectory=modules/weko-swordserver,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_theme&subdirectory=modules/weko-theme,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_user_profiles&subdirectory=modules/weko-user-profiles,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_workflow&subdirectory=modules/weko-workflow,Werkzeug==0.15.2,whichcraft==0.4.1,WTForms==2.1,WTForms-Alchemy==0.16.5,WTForms-Components==0.10.3,xmlschema==0.9.30,xmltodict==0.12.0,zipp==3.6.0,zope.interface==5.5.2
c1 run-test-pre: PYTHONHASHSEED='288316191'
c1 run-test: commands[0] | pytest --cov=weko_records tests -v -s -vv --cov-branch --cov-report=term --cov-report=xml --cov-config=tox.ini --basetemp=/code/modules/weko-records/.tox/c1/tmp
============================= test session starts ==============================
platform linux -- Python 3.6.15, pytest-4.2.0, py-1.11.0, pluggy-0.13.1 -- /code/modules/weko-records/.tox/c1/bin/python
cachedir: .tox/c1/.pytest_cache
rootdir: /code/modules/weko-records, inifile:
plugins: celery-4.4.4, cov-2.9.0
collecting ... collected 124 items

tests/test_api.py::test_recordbase ERROR
tests/test_api.py::test_itemtypenames ERROR
tests/test_api.py::test_itemtypes_create ERROR
tests/test_api.py::test_itemtypes_update ERROR
tests/test_api.py::test_itemtypes_update_item_type ERROR
tests/test_api.py::test_itemtypes_get_record ERROR
tests/test_api.py::test_itemtypes_get_records ERROR
tests/test_api.py::test_itemtypes_get_by_id ERROR
tests/test_api.py::test_itemtypes_get_by_name_id ERROR
tests/test_api.py::test_itemtypes_get_records_by_name_id ERROR
tests/test_api.py::test_itemtypes_get_latest ERROR
tests/test_api.py::test_itemtypes_get_latest_with_item_type ERROR
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting ERROR
tests/test_api.py::test_itemtypes_get_all ERROR
tests/test_api.py::test_itemtypes_commit ERROR
tests/test_api.py::test_itemtypes_delete ERROR
tests/test_api.py::test_itemtypes_revert ERROR
tests/test_api.py::test_itemtypes_restore ERROR
tests/test_api.py::test_item_type_edit_history ERROR
tests/test_api.py::test_mapping_create ERROR
tests/test_api.py::test_mapping_get_record ERROR
tests/test_api.py::test_mapping_commit ERROR
tests/test_api.py::test_mapping_delete ERROR
tests/test_api.py::test_mapping_revert ERROR
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids ERROR
tests/test_api.py::test_item_type_props ERROR
tests/test_api.py::test_item_metadata_create ERROR
tests/test_api.py::test_item_metadata_get_record ERROR
tests/test_api.py::test_item_metadata_get_records ERROR
tests/test_api.py::test_item_metadata_get_by_item_type_id ERROR
tests/test_api.py::test_item_metadata_get_by_object_id ERROR
tests/test_api.py::test_item_metadata_commit ERROR
tests/test_api.py::test_item_metadata_delete ERROR
tests/test_api.py::test_item_metadata_revert ERROR
tests/test_api.py::test_files_metadata_create ERROR
tests/test_api.py::test_files_metadata_get_record ERROR
tests/test_api.py::test_files_metadata_get_records ERROR
tests/test_api.py::test_files_metadata_update_data ERROR
tests/test_api.py::test_files_metadata_commit ERROR
tests/test_api.py::test_files_metadata_delete ERROR
tests/test_api.py::test_files_metadata_revert ERROR
tests/test_api.py::test_site_license_get_records ERROR
tests/test_api.py::test_site_license_update ERROR
tests/test_api.py::test_wekorecord_get_record ERROR
tests/test_api.py::test_feedback_mail_list_create_and_update ERROR
tests/test_api.py::test_feedback_mail_list_delete ERROR
tests/test_api.py::test_item_link_update ERROR
tests/test_api.py::test_item_link_bulk_create ERROR
tests/test_api.py::test_item_link_bulk_update ERROR
tests/test_api.py::test_item_link_bulk_delete ERROR
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype ERROR
tests/test_serializers_entry.py::test_weko_feed_entry PASSED
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json] ERROR
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json] ERROR
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json] ERROR
tests/test_serializers_opensearch_response.py::test_add_link_header ERROR
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers ERROR
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers ERROR
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True] ERROR
tests/test_serializers_utils.py::test_get_mapping PASSED
tests/test_serializers_utils.py::test_get_full_mapping PASSED
tests/test_serializers_utils.py::test_get_mapping_inactive_show_list PASSED
tests/test_serializers_utils.py::test_get_metadata_from_map PASSED
tests/test_serializers_utils.py::test_get_attribute_schema ERROR
tests/test_serializers_utils.py::test_get_item_type_name_id ERROR
tests/test_serializers_utils.py::test_get_item_type_name ERROR
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True] ERROR
tests/test_utils.py::test_json_loader ERROR
tests/test_utils.py::test_copy_field_test PASSED
tests/test_utils.py::test_convert_range_value PASSED
tests/test_utils.py::test_convert_date_range_value PASSED
tests/test_utils.py::test_makeDateRangeValue PASSED
tests/test_utils.py::test_get_value_from_dict PASSED
tests/test_utils.py::test_get_values_from_dict PASSED
tests/test_utils.py::test_copy_value_xml_path exception
PASSED
tests/test_utils.py::test_copy_value_json_path PASSED
tests/test_utils.py::test_copy_values_json_path PASSED
tests/test_utils.py::test_set_timestamp PASSED
tests/test_utils.py::test_sort_records PASSED
tests/test_utils.py::test_sort_op PASSED
tests/test_utils.py::test_find_items PASSED
tests/test_utils.py::test_get_all_items PASSED
tests/test_utils.py::test_get_all_items2 PASSED
tests/test_utils.py::test_to_orderdict PASSED
tests/test_utils.py::test_get_options_and_order_list ERROR
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True] ERROR
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False] ERROR
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False] ERROR
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False] ERROR
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False] ERROR
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False] ERROR
tests/test_utils.py::test_sort_meta_data_by_options_exception ERROR
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id ERROR
tests/test_utils.py::test_get_keywords_data_load ERROR
tests/test_utils.py::test_is_valid_openaire_type ERROR
tests/test_utils.py::test_check_has_attribute_value PASSED
tests/test_utils.py::test_get_attribute_value_all_items PASSED
tests/test_utils.py::test_check_input_value PASSED
tests/test_utils.py::test_remove_key PASSED
tests/test_utils.py::test_remove_keys PASSED
tests/test_utils.py::test_remove_multiple PASSED
tests/test_utils.py::test_check_to_upgrade_version PASSED
tests/test_utils.py::test_remove_weko2_special_character PASSED
tests/test_utils.py::test_selected_value_by_language PASSED
tests/test_utils.py::test_selected_value_by_language_2 PASSED
tests/test_utils.py::test_selected_value_by_language_3 PASSED
tests/test_utils.py::test_check_info_in_metadata PASSED
tests/test_utils.py::test_get_value_and_lang_by_key PASSED
tests/test_utils.py::test_get_value_by_selected_lang PASSED
tests/test_utils.py::test_get_show_list_author PASSED
tests/test_utils.py::test_format_creates PASSED
tests/test_utils.py::test_get_creator PASSED
tests/test_utils.py::test_get_creator_by_languages PASSED
tests/test_utils.py::test_get_affiliation PASSED
tests/test_utils.py::test_get_author_has_language PASSED
tests/test_utils.py::test_add_author PASSED
tests/test_utils.py::test_convert_bibliographic PASSED
tests/test_utils.py::test_custom_record_medata_for_export ERROR
tests/test_utils.py::test_replace_fqdn PASSED
tests/test_utils.py::test_replace_fqdn_of_file_metadata PASSED
tests/test_weko_records.py::test_version PASSED
tests/test_weko_records.py::test_init PASSED
tests/test_weko_records.py::test_feed_entry ERROR
tests/test_weko_records.py::test_weko_feed_generator ERROR

==================================== ERRORS ====================================
______________________ ERROR at setup of test_recordbase _______________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5e08f1ba8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e08f1ba8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e08f1ba8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e08f1ba8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e08f1ba8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5e08f1da0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5e1315ec8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e08f1ba8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e08f1ba8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e08f1d68>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e08f1ba8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e08f1d68>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e08f1d68>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5e08f1a90>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____________________ ERROR at setup of test_itemtypenames _____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5e0851550>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e0851550>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e0851550>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e0851550>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e0851550>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5e0464080>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5e06fc248>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e0851550>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e0851550>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e0464550>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e0851550>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e0464550>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e0464550>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5e0851208>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___________________ ERROR at setup of test_itemtypes_create ____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5e0637a20>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e0637a20>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e0637a20>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e0637a20>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e0637a20>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5e0637ba8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5e08387c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e0637a20>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e0637a20>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e0637c18>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e0637a20>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e0637c18>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e0637c18>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5e0637860>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___________________ ERROR at setup of test_itemtypes_update ____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5e07e3208>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e07e3208>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e07e3208>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e07e3208>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e07e3208>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5e054c630>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5e0455908>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e07e3208>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e07e3208>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e054c6a0>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e07e3208>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e054c6a0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e054c6a0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5e07e3160>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
______________ ERROR at setup of test_itemtypes_update_item_type _______________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5e03f0c50>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e03f0c50>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e03f0c50>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e03f0c50>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e03f0c50>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5e03f0d68>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5e07dbc88>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e03f0c50>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e03f0c50>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e03f0cf8>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e03f0c50>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e03f0cf8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e03f0cf8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5e03f0160>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of test_itemtypes_get_record __________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5e05c4400>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e05c4400>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e05c4400>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e05c4400>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e05c4400>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5e08996a0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5e0897288>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e05c4400>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e05c4400>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e0899668>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e05c4400>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e0899668>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e0899668>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5e05c4630>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of test_itemtypes_get_records _________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5e03cce48>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e03cce48>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e03cce48>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e03cce48>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e03cce48>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5e03bb080>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5e03cd308>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e03cce48>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e03cce48>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e03bb048>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e03cce48>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e03bb048>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e03bb048>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5e03cccf8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________________ ERROR at setup of test_itemtypes_get_by_id __________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5e0368a90>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e0368a90>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e0368a90>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e0368a90>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e0368a90>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5e0281ac8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5e035c608>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e0368a90>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e0368a90>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e0281a90>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e0368a90>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e0281a90>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e0281a90>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5e0368be0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_______________ ERROR at setup of test_itemtypes_get_by_name_id ________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5e04a31d0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e04a31d0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e04a31d0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e04a31d0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e04a31d0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5e04a34e0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5e0490908>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e04a31d0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e04a31d0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e04a34a8>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e04a31d0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e04a34a8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e04a34a8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5e04a3080>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___________ ERROR at setup of test_itemtypes_get_records_by_name_id ____________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5e04e6c50>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e04e6c50>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e04e6c50>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e04e6c50>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e04e6c50>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5e04e6e48>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5e04eeb88>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e04e6c50>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e04e6c50>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e04e6e10>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e04e6c50>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e04e6e10>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e04e6e10>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5e04e6b00>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of test_itemtypes_get_latest __________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5e018bef0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e018bef0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e018bef0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e018bef0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e018bef0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5e02eaa58>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5e05b5ec8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e018bef0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e018bef0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e02eabe0>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e018bef0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e02eabe0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e02eabe0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5e018bbe0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________ ERROR at setup of test_itemtypes_get_latest_with_item_type __________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5e0147278>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e0147278>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e0147278>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e0147278>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e0147278>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5e069d358>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5e0140108>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e0147278>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e0147278>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e069d320>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e0147278>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e069d320>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e069d320>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5e01471d0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________ ERROR at setup of test_itemtypes_get_latest_custorm_harvesting ________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5e00a6f28>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e00a6f28>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e00a6f28>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e00a6f28>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e00a6f28>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5e00a6128>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5e021d888>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e00a6f28>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e00a6f28>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e00a64e0>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e00a6f28>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e00a64e0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e00a64e0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5e00a6cc0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___________________ ERROR at setup of test_itemtypes_get_all ___________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5e00e19e8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e00e19e8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e00e19e8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e00e19e8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e00e19e8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5dff93b00>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5e00bab08>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e00e19e8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e00e19e8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dff93c88>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e00e19e8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dff93c88>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dff93c88>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5e00e14e0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___________________ ERROR at setup of test_itemtypes_commit ____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5e02d3e48>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e02d3e48>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e02d3e48>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e02d3e48>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e02d3e48>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5e02c0080>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5e02b9b08>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e02d3e48>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e02d3e48>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e02c0048>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e02d3e48>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e02c0048>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e02c0048>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5e02d3cf8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___________________ ERROR at setup of test_itemtypes_delete ____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5dff84b00>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dff84b00>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dff84b00>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dff84b00>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dff84b00>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5dff84cf8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5dff87208>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dff84b00>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dff84b00>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dff84cc0>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dff84b00>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dff84cc0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dff84cc0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5dff849b0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___________________ ERROR at setup of test_itemtypes_revert ____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5dfda1390>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfda1390>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfda1390>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfda1390>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfda1390>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5e0049b38>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5e07a1508>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfda1390>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfda1390>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e0049b00>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfda1390>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e0049b00>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e0049b00>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5dfda10b8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___________________ ERROR at setup of test_itemtypes_restore ___________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5dfcedf98>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfcedf98>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfcedf98>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfcedf98>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfcedf98>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5dfced630>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5e0023148>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfcedf98>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfcedf98>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dfced438>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfcedf98>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dfced438>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dfced438>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5dfcedc88>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________________ ERROR at setup of test_item_type_edit_history _________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5e06b6ef0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e06b6ef0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e06b6ef0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e06b6ef0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e06b6ef0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5dfc90be0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5e06c4648>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e06b6ef0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e06b6ef0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dfc90b00>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e06b6ef0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dfc90b00>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dfc90b00>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5e06b6be0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________________ ERROR at setup of test_mapping_create _____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5dfec6208>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfec6208>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfec6208>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfec6208>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfec6208>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5dfe40438>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5e06689c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfec6208>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfec6208>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dfe40400>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfec6208>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dfe40400>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dfe40400>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5dfec62e8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________________ ERROR at setup of test_mapping_get_record ___________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5dfd51da0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfd51da0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfd51da0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfd51da0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfd51da0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5dfd514a8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5e01ba148>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfd51da0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfd51da0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dfd51470>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfd51da0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dfd51470>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dfd51470>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5dfd51e48>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________________ ERROR at setup of test_mapping_commit _____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5dfb607f0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfb607f0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfb607f0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfb607f0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfb607f0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5dfb609b0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5dfd3a048>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfb607f0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfb607f0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dfb60a20>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfb607f0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dfb60a20>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dfb60a20>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5dfb60588>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________________ ERROR at setup of test_mapping_delete _____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5dfbbfb00>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfbbfb00>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfbbfb00>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfbbfb00>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfbbfb00>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5dfdcd160>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5e026c408>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfbbfb00>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfbbfb00>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dfbbf518>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfbbfb00>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dfbbf518>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dfbbf518>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5dfbbfe80>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________________ ERROR at setup of test_mapping_revert _____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5dfd0e7b8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfd0e7b8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfd0e7b8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfd0e7b8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfd0e7b8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5dff2be80>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5dff1c588>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfd0e7b8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfd0e7b8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dff2be48>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfd0e7b8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dff2be48>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dff2be48>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5dfd0e668>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________ ERROR at setup of test_mapping_get_mapping_by_item_type_ids __________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5e010d4e0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e010d4e0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e010d4e0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e010d4e0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e010d4e0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5e010d6d8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5e012ad08>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e010d4e0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5e010d4e0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e010d6a0>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5e010d4e0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e010d6a0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5e010d6a0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5e010d390>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________________ ERROR at setup of test_item_type_props ____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5df918f98>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df918f98>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df918f98>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df918f98>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df918f98>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5df918630>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5dfe0fb48>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df918f98>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df918f98>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df918358>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df918f98>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df918358>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df918358>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5df918c88>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of test_item_metadata_create __________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5dfdf1c50>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfdf1c50>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfdf1c50>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfdf1c50>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfdf1c50>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5df941a58>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5dfe85288>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfdf1c50>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfdf1c50>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df941be0>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfdf1c50>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df941be0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df941be0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5dfe7ce80>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_______________ ERROR at setup of test_item_metadata_get_record ________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5dfc29278>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfc29278>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfc29278>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfc29278>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfc29278>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5dfbdb358>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5dfc22408>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfc29278>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfc29278>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dfbdb320>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfc29278>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dfbdb320>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dfbdb320>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5dfc291d0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_______________ ERROR at setup of test_item_metadata_get_records _______________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5df9e0f28>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df9e0f28>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df9e0f28>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df9e0f28>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df9e0f28>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5df9e0128>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5dfb79908>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df9e0f28>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df9e0f28>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df9e04e0>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df9e0f28>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df9e04e0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df9e04e0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5df9e0cc0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___________ ERROR at setup of test_item_metadata_get_by_item_type_id ___________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5df7d1320>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df7d1320>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df7d1320>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df7d1320>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df7d1320>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5df9376d8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5dfc7b848>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df7d1320>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df7d1320>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df9376a0>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df7d1320>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df9376a0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df9376a0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5df7d10b8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________ ERROR at setup of test_item_metadata_get_by_object_id _____________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5dfb0de48>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfb0de48>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfb0de48>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfb0de48>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfb0de48>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5dfb19080>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5dfb05b88>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfb0de48>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfb0de48>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dfb19048>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfb0de48>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dfb19048>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dfb19048>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5dfb0dcf8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of test_item_metadata_commit __________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5df9e2cf8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df9e2cf8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df9e2cf8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df9e2cf8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df9e2cf8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5df9e2ef0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5df987848>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df9e2cf8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df9e2cf8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df9e2eb8>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df9e2cf8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df9e2eb8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df9e2eb8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5df9e2ba8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of test_item_metadata_delete __________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5df98ac50>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df98ac50>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df98ac50>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df98ac50>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df98ac50>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5df8d62e8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5df8cb5c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df98ac50>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df98ac50>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df8d62b0>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df98ac50>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df8d62b0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df8d62b0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5df80d208>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of test_item_metadata_revert __________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5dfad5898>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfad5898>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfad5898>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfad5898>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfad5898>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5dfad5d30>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5dfabc488>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfad5898>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfad5898>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dfad5f28>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfad5898>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dfad5f28>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dfad5f28>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5dfad58d0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of test_files_metadata_create _________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5df5b8e80>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df5b8e80>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df5b8e80>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df5b8e80>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df5b8e80>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5df67f8d0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5dfa5c748>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df5b8e80>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df5b8e80>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df67f898>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df5b8e80>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df67f898>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df67f898>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5df5b8550>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_______________ ERROR at setup of test_files_metadata_get_record _______________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5dfc6e1d0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfc6e1d0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfc6e1d0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfc6e1d0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfc6e1d0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5df817358>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5dfc399c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfc6e1d0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfc6e1d0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df817320>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfc6e1d0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df817320>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df817320>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5df67f908>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
______________ ERROR at setup of test_files_metadata_get_records _______________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5df74df28>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df74df28>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df74df28>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df74df28>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df74df28>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5df74d128>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5df841188>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df74df28>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df74df28>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df74d4e0>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df74df28>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df74d4e0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df74d4e0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5df74dcc0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
______________ ERROR at setup of test_files_metadata_update_data _______________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5df5062b0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df5062b0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df5062b0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df5062b0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df5062b0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5df7e66a0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5df7f02c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df5062b0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df5062b0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df7e6668>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df5062b0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df7e6668>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df7e6668>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5df506048>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of test_files_metadata_commit _________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5dfa06e48>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfa06e48>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfa06e48>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfa06e48>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfa06e48>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5dfa1f080>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5dfa0e408>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfa06e48>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfa06e48>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dfa1f048>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfa06e48>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dfa1f048>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dfa1f048>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5dfa06cf8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of test_files_metadata_delete _________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5df76fb38>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df76fb38>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df76fb38>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df76fb38>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df76fb38>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5df521ac8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5df5b4608>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df76fb38>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df76fb38>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df521a90>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df76fb38>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df521a90>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df521a90>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5df76f9e8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of test_files_metadata_revert _________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5df64a518>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df64a518>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df64a518>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df64a518>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df64a518>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5df64a710>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5df6588c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df64a518>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df64a518>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df64a6d8>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df64a518>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df64a6d8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df64a6d8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5df64a3c8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_______________ ERROR at setup of test_site_license_get_records ________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5df91aa58>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df91aa58>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df91aa58>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df91aa58>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df91aa58>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5df92cdd8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5df92d7c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df91aa58>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df91aa58>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df92cef0>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df91aa58>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df92cef0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df92cef0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5df91a9b0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________________ ERROR at setup of test_site_license_update __________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5df397908>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df397908>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df397908>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df397908>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df397908>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5df397b00>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5df477088>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df397908>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df397908>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df397940>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df397908>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df397940>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df397940>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5df397898>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of test_wekorecord_get_record _________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5dfaa8320>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfaa8320>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfaa8320>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfaa8320>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfaa8320>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5df3852e8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5df382448>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfaa8320>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dfaa8320>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df3852b0>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dfaa8320>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df3852b0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df3852b0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5dfaa83c8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________ ERROR at setup of test_feedback_mail_list_create_and_update __________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5df595cc0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df595cc0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df595cc0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df595cc0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df595cc0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5df595eb8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5df58ea08>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df595cc0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df595cc0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df595e80>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df595cc0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df595e80>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df595e80>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5df595b70>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_______________ ERROR at setup of test_feedback_mail_list_delete _______________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5df0b2400>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df0b2400>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df0b2400>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df0b2400>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df0b2400>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5df3d26d8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5df5338c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df0b2400>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df0b2400>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df3d26a0>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df0b2400>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df3d26a0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df3d26a0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5df0b24e0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___________________ ERROR at setup of test_item_link_update ____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5df3d2b00>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df3d2b00>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df3d2b00>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df3d2b00>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df3d2b00>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5df6e2128>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5df6bbd48>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df3d2b00>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df3d2b00>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df6e20f0>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df3d2b00>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df6e20f0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df6e20f0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5df3d2a20>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of test_item_link_bulk_create _________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5df29b860>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df29b860>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df29b860>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df29b860>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df29b860>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5df29ba58>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5df28ff48>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df29b860>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df29b860>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df29ba20>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df29b860>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df29ba20>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df29ba20>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5df29b710>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of test_item_link_bulk_update _________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5df232278>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df232278>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df232278>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df232278>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df232278>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5df3004e0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5df2345c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df232278>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df232278>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df3004a8>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df232278>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df3004a8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df3004a8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5df20f198>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of test_item_link_bulk_delete _________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5df46cef0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df46cef0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df46cef0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df46cef0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df46cef0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5df084128>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5df09c908>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df46cef0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df46cef0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df0840f0>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df46cef0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df0840f0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df0840f0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5df46cda0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________ ERROR at setup of TestObjectType.test_get_openaire_subtype __________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5df2d7550>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df2d7550>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df2d7550>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df2d7550>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df2d7550>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5deee8ac8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5df095848>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df2d7550>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df2d7550>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5deee8c50>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df2d7550>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5deee8c50>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5deee8c50>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5df2d75f8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__ ERROR at setup of test_jpcoar_serializer[data/record_hit/record_hit1.json] __

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5df148b38>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df148b38>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df148b38>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df148b38>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df148b38>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5df13c6d8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5df79c748>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df148b38>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df148b38>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df13c6a0>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df148b38>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df13c6a0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df13c6a0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5df148a90>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___ ERROR at setup of test_json_serializer[data/record_hit/record_hit1.json] ___

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5df1e1e10>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df1e1e10>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df1e1e10>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df1e1e10>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df1e1e10>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5df1e60b8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5df1d2ac8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df1e1e10>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df1e1e10>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df1e1fd0>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df1e1e10>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df1e1fd0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df1e1fd0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5df1e1cc0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_ ERROR at setup of test_oepnsearch_responsify[data/record_hit/record_hit1.json] _

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5def2b978>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5def2b978>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5def2b978>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5def2b978>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5def2b978>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5df00eac8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5df057908>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5def2b978>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5def2b978>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df00ea90>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5def2b978>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df00ea90>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df00ea90>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5def2ba90>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________________ ERROR at setup of test_add_link_header ____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5df102518>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df102518>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df102518>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df102518>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df102518>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5df102710>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5df101488>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df102518>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df102518>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df1026d8>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df102518>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df1026d8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df1026d8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5df1023c8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____________ ERROR at setup of test_serialize_related_identifiers _____________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5ded50898>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5ded50898>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5ded50898>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5ded50898>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5ded50898>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5df1f1ef0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5df357488>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5ded50898>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5ded50898>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df1f1eb8>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5ded50898>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df1f1eb8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df1f1eb8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5ded50c50>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________ ERROR at setup of test_preprocess_related_identifiers _____________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5decf2940>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5decf2940>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5decf2940>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5decf2940>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5decf2940>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5decf2b38>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5deec5708>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5decf2940>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5decf2940>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5decf2978>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5decf2940>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5decf2978>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5decf2978>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5decf28d0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_ ERROR at setup of test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True] _

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5defc8208>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5defc8208>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5defc8208>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5defc8208>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5defc8208>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5defcc358>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5def45948>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5defc8208>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5defc8208>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5defcc320>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5defc8208>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5defcc320>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5defcc320>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5defc82e8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of test_get_attribute_schema __________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5defcc908>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5defcc908>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5defcc908>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5defcc908>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5defcc908>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5deace0b8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5ded66508>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5defcc908>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5defcc908>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5deace080>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5defcc908>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5deace080>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5deace080>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5defcc860>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of test_get_item_type_name_id _________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5deb05a58>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5deb05a58>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5deb05a58>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5deb05a58>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5deb05a58>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5deb05c50>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5dee21748>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5deb05a58>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5deb05a58>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5deb05a90>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5deb05a58>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5deb05a90>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5deb05a90>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5deb057b8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________________ ERROR at setup of test_get_item_type_name ___________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5dedc0518>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dedc0518>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dedc0518>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dedc0518>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dedc0518>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5dedb4438>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5dedbd908>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dedc0518>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dedc0518>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dedb4400>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dedc0518>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dedb4400>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dedb4400>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5dea10128>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_ ERROR at setup of test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True] _

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5df181b70>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df181b70>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df181b70>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df181b70>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df181b70>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5df181d68>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5df192d48>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df181b70>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5df181b70>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df181d30>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5df181b70>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df181d30>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5df181d30>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5df181a20>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
______________________ ERROR at setup of test_json_loader ______________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5de9a5da0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5de9a5da0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5de9a5da0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5de9a5da0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5de9a5da0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5de942860>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5deb0a2c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5de9a5da0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5de9a5da0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5de942828>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5de9a5da0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5de942828>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5de942828>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5de9a5748>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
______________ ERROR at setup of test_get_options_and_order_list _______________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5de9b0320>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5de9b0320>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5de9b0320>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5de9b0320>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5de9b0320>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5dea3b320>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5de9fb0c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5de9b0320>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5de9b0320>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dea3b3c8>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5de9b0320>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dea3b3c8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dea3b3c8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5de9b0438>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_ ERROR at setup of test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True] _

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5de68ce80>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5de68ce80>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5de68ce80>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5de68ce80>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5de68ce80>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5de6a60b8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5de924d88>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5de68ce80>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5de68ce80>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5de6a6080>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5de68ce80>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5de6a6080>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5de6a6080>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5de68cd30>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_ ERROR at setup of test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False] _

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5dea19400>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dea19400>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dea19400>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dea19400>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dea19400>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5dec17358>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5de9f8e48>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dea19400>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dea19400>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dec17ba8>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dea19400>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dec17ba8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dec17ba8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5dea192e8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_ ERROR at setup of test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False] _

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5dea187f0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dea187f0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dea187f0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dea187f0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dea187f0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5dea187b8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5ded86a48>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dea187f0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5dea187f0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dea18c18>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5dea187f0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dea18c18>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5dea18c18>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5dea42e48>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_ ERROR at setup of test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False] _

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5ded25160>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5ded25160>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5ded25160>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5ded25160>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5ded25160>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5ded25668>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5debeea48>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5ded25160>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5ded25160>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5ded25320>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5ded25160>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5ded25320>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5ded25320>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5de8470b8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_ ERROR at setup of test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False] _

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5ded20cc0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5ded20cc0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5ded20cc0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5ded20cc0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5ded20cc0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5ded20780>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5ded83188>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5ded20cc0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5ded20cc0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5ded209b0>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5ded20cc0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5ded209b0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5ded209b0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5de91add8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_ ERROR at setup of test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False] _

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5def2d5c0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5def2d5c0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5def2d5c0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5def2d5c0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5def2d5c0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5def2d908>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5debcffc8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5def2d5c0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5def2d5c0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5def2db38>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5def2d5c0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5def2db38>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5def2db38>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5dea16fd0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________ ERROR at setup of test_sort_meta_data_by_options_exception __________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5de738a20>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5de738a20>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5de738a20>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5de738a20>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5de738a20>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5de78a240>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5de4b3348>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5de738a20>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5de738a20>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5de78a198>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5de738a20>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5de78a198>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5de78a198>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5de92a390>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_______ ERROR at setup of test_sort_meta_data_by_options_no_item_type_id _______

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5de77ba58>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5de77ba58>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5de77ba58>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5de77ba58>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5de77ba58>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5de77b668>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5df343688>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5de77ba58>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5de77ba58>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5de77b4a8>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5de77ba58>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5de77b4a8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5de77b4a8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5de77b518>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________________ ERROR at setup of test_get_keywords_data_load _________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5de615ba8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5de615ba8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5de615ba8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5de615ba8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5de615ba8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5de8b0ba8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5de4ef288>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5de615ba8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5de615ba8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5de6157f0>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5de615ba8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5de6157f0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5de6157f0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5de615cf8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________________ ERROR at setup of test_is_valid_openaire_type _________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5de3e6240>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5de3e6240>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5de3e6240>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5de3e6240>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5de3e6240>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5de3e64a8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5de530788>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5de3e6240>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5de3e6240>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5de3e63c8>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5de3e6240>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5de3e63c8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5de3e63c8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5de3e6160>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________ ERROR at setup of test_custom_record_medata_for_export ____________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5ddfcf908>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5ddfcf908>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5ddfcf908>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5ddfcf908>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5ddfcf908>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5ddfcfa58>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5de0abe88>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5ddfcf908>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5ddfcf908>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5ddfcf9b0>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5ddfcf908>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5ddfcf9b0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5ddfcf9b0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5ddfcf7f0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
______________________ ERROR at setup of test_feed_entry _______________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5ddfaa550>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5ddfaa550>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5ddfaa550>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5ddfaa550>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5ddfaa550>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5ddfaa748>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5ddf83088>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5ddfaa550>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5ddfaa550>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5ddfaa710>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5ddfaa550>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5ddfaa710>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5ddfaa710>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5ddfaa400>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________________ ERROR at setup of test_weko_feed_generator __________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fa5de1f1390>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5de1f1390>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5de1f1390>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5de1f1390>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5de1f1390>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fa5de858470>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fa5de9faa08>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5de1f1390>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fa5de1f1390>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5de858860>
pool = <sqlalchemy.pool.QueuePool object at 0x7fa5de1f1390>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5de858860>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fa5de858860>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa5de1f1f28>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
=============================== warnings summary ===============================
tests/test_api.py::test_recordbase
  /code/modules/weko-records/.tox/c1/lib/python3.6/site-packages/pkg_resources/_vendor/packaging/specifiers.py:276: DeprecationWarning: Creating a LegacyVersion has been deprecated and will be removed in the next major release
    DeprecationWarning,

tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
  /code/modules/weko-records/.tox/c1/lib/python3.6/site-packages/pkg_resources/_vendor/packaging/version.py:114: DeprecationWarning: Creating a LegacyVersion has been deprecated and will be removed in the next major release
    DeprecationWarning,

tests/test_serializers_entry.py::test_weko_feed_entry
  /code/modules/weko-records/weko_records/serializers/entry.py:686: UserWarning: pubdate(... is deprecated and may be removed in feedgen > 0.8. Use pubDate(...) instead.
    warnings.warn('pubdate(... is deprecated and may be removed in feedgen '

-- Docs: https://docs.pytest.org/en/latest/warnings.html

---------- coverage: platform linux, python 3.6.15-final-0 -----------
Name                                               Stmts   Miss Branch BrPart  Cover
------------------------------------------------------------------------------------
weko_records/__init__.py                               4      0      0      0   100%
weko_records/api.py                                  856    685    304      1    17%
weko_records/config.py                                25      0      0      0   100%
weko_records/ext.py                                   15      1     10      1    92%
weko_records/fetchers.py                               7      2      0      0    71%
weko_records/models.py                               136     24     64     11    74%
weko_records/serializers/__init__.py                  21      0      0      0   100%
weko_records/serializers/atom.py                       7      2      2      0    78%
weko_records/serializers/csl.py                       57     40     18      0    25%
weko_records/serializers/dc.py                        51     39     28      0    20%
weko_records/serializers/depositschema.py             20      9      6      0    50%
weko_records/serializers/entry.py                    387    280    231     13    20%
weko_records/serializers/feed.py                     564    505    316      0     7%
weko_records/serializers/jpcoar.py                    36     22      4      0    40%
weko_records/serializers/json.py                      38     22     14      0    35%
weko_records/serializers/opensearch.py                60     43     30      0    26%
weko_records/serializers/opensearchresponse.py        32     24     20      0    15%
weko_records/serializers/opensearchserializer.py      25     16      8      0    33%
weko_records/serializers/pidrelations.py              35     28     18      0    13%
weko_records/serializers/prism.py                    132    107     78      0    15%
weko_records/serializers/rss.py                        7      2      2      0    78%
weko_records/serializers/schemas/__init__.py           1      0      0      0   100%
weko_records/serializers/schemas/csl.py              128     96     88     10    20%
weko_records/serializers/searchserializer.py           5      1      2      0    86%
weko_records/serializers/utils.py                    467    361    298      4    20%
weko_records/utils.py                               1294    660    790     92    47%
weko_records/version.py                                2      0      0      0   100%
------------------------------------------------------------------------------------
TOTAL                                               4412   2969   2331    132    29%
Coverage XML written to file coverage.xml

============= 47 passed, 6274 warnings, 77 error in 96.35 seconds ==============
ERROR: InvocationError for command /code/modules/weko-records/.tox/c1/bin/pytest --cov=weko_records tests -v -s -vv --cov-branch --cov-report=term --cov-report=xml --cov-config=tox.ini --basetemp=/code/modules/weko-records/.tox/c1/tmp (exited with code 1)
___________________________________ summary ____________________________________
ERROR:   c1: commands failed
