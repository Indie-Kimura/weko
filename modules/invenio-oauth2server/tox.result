GLOB sdist-make: /code/modules/invenio-oauth2server/setup.py
c1 inst-nodeps: /code/modules/invenio-oauth2server/.tox/.tmp/package/1/invenio-oauth2server-1.0.0.zip
c1 installed: alabaster==0.7.13,alembic==0.9.6,amqp==2.6.0,angular-gettext-babel==0.3,aniso8601==8.0.0,arrow==0.12.1,asn1crypto==0.23.0,atomicwrites==1.4.1,attrs==17.4.0,b2handle==1.1.2,Babel==2.5.1,bagit==1.7.0,beautifulsoup4==4.9.3,bibtexparser==1.0.1,billiard==3.6.3.0,binaryornot==0.4.4,bleach==3.1.0,blinker==1.4,boto3==1.7.84,botocore==1.10.84,cachelib==0.1,cachetools==4.2.4,cchardet==2.1.1,celery==4.4.4,certifi==2017.11.5,cffi==1.11.2,chardet==3.0.4,citeproc-py==0.5.1,citeproc-py-styles==0.1.2,click==6.7,cookiecutter==1.6.0,counter-robots==2018.6,coverage==6.2,cryptography==2.1.4,datacite==1.0.1,DateTime==4.9,decorator==4.1.2,defusedxml==0.5.0,dictdiffer==0.7.0,distlib==0.3.6,dnspython==2.2.1,docutils==0.18.1,dojson==1.3.2,elasticsearch==6.1.1,elasticsearch-dsl==6.4.0,elementpath==1.0.6,email-validator==1.0.5,entrypoints==0.2.3,feedgen==0.7.0,filelock==3.4.1,Flask==1.1.0,Flask-Admin==1.5.3,Flask-Alembic==2.0.1,Flask-Assets==0.12,Flask-BabelEx==0.9.4,Flask-Breadcrumbs==0.5.0,Flask-Caching==1.10.1,Flask-CeleryExt==0.3.4,Flask-Collect==1.2.2,Flask-Cors==3.0.3,Flask-DebugToolbar==0.13.1,Flask-IIIF==0.6.1,Flask-KVSession==0.6.2,Flask-Limiter==1.1.0,Flask-Login==0.4.1,Flask-Mail==0.9.1,flask-marshmallow==0.14.0,Flask-Menu==0.6.0,-e git+https://github.com/RCOSDP/flask-oauthlib.git@83148ee01e9da37a8a1134febe83bc32b95bac6e#egg=Flask_OAuthlib,Flask-Plugins==1.6.1,Flask-Principal==0.4.0,Flask-RESTful==0.3.8,Flask-Security==3.0.0,flask-shell-ipython==0.4.1,Flask-Sitemap==0.4.0,Flask-SQLAlchemy==2.3.2,flask-talisman==0.4.1,Flask-WTF==0.14.3,-e git+https://github.com/RCOSDP/pyfpdf.git@f9b032148283d535cabc7789858081c80de36fef#egg=fpdf,frozendict==2.3.8,fs==0.5.4,ftfy==4.4.3,future==0.16.0,github3.py==1.1.0,html5lib==1.0.1,idna==2.6,iiif-prezi==0.3.0,imagesize==1.4.1,importlib-metadata==4.8.3,importlib-resources==5.4.0,infinity==1.4,intervals==0.8.0,invenio-access==1.1.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_accounts&subdirectory=modules/invenio-accounts,invenio-admin==1.1.2,invenio-app==1.1.0,invenio-assets==1.0.0,invenio-base==1.0.2,invenio-cache==1.0.0,invenio-celery==1.1.3,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_communities&subdirectory=modules/invenio-communities,invenio-config==1.0.0,invenio-csl-rest==1.0.0a1,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_db&subdirectory=modules/invenio-db,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_deposit&subdirectory=modules/invenio-deposit,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_files_rest&subdirectory=modules/invenio-files-rest,invenio-formatter==1.0.0b3,invenio-i18n==1.0.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_iiif&subdirectory=modules/invenio-iiif,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_indexer&subdirectory=modules/invenio-indexer,invenio-jsonschemas==1.0.0,invenio-logging==1.0.0b3,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_mail&subdirectory=modules/invenio-mail,invenio-marc21==1.0.0a8,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_oaiharvester&subdirectory=modules/invenio-oaiharvester,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_oaiserver&subdirectory=modules/invenio-oaiserver,invenio-oauth2server @ file:///code/modules/invenio-oauth2server/.tox/.tmp/package/1/invenio-oauth2server-1.0.0.zip,invenio-oauthclient==1.0.0,invenio-pidrelations==1.0.0a4,invenio-pidstore==1.0.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_previewer&subdirectory=modules/invenio-previewer,invenio-query-parser==0.6.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_queues&subdirectory=modules/invenio-queues,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_records&subdirectory=modules/invenio-records,invenio-records-files==1.0.0a10,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_records_rest&subdirectory=modules/invenio-records-rest,invenio-records-ui==1.0.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_resourcesyncclient&subdirectory=modules/invenio-resourcesyncclient,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_resourcesyncserver&subdirectory=modules/invenio-resourcesyncserver,invenio-rest==1.1.2,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_s3&subdirectory=modules/invenio-s3,-e git+https://github.com/RCOSDP/invenio-search.git@cff9744c5dc651893a9c51672c5b8da9adc21e16#egg=invenio_search,-e git+https://github.com/RCOSDP/invenio-search-ui.git@74bd3b2990ff27b39e01b6b31be9a0b5fda3dd0f#egg=invenio_search_ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_stats&subdirectory=modules/invenio-stats,invenio-theme==1.0.0b4,ipaddress==1.0.19,ipython==6.2.1,ipython-genutils==0.2.0,itsdangerous==0.24,jedi==0.11.0,Jinja2==2.10.1,jinja2-cli==0.6.0,jinja2-time==0.2.0,jmespath==0.10.0,jsmin==2.2.2,jsonpatch==1.21,jsonpath-ng==1.5.2,jsonpointer==1.14,jsonref==0.1,jsonresolver==0.2.1,jsonschema==2.6.0,jupyter-client==5.2.2,jupyter-core==4.4.0,-e git+https://github.com/RCOSDP/kombu.git@f204fdf078d5e94393c86693f545e2d011f620f5#egg=kombu,limits==1.2.1,lxml==4.1.1,Mako==1.0.7,MarkupSafe==1.1.1,marshmallow==2.20.1,marshmallow-sqlalchemy==0.23.1,maxminddb==1.5.2,maxminddb-geolite2==2017.803,mistune==0.8.3,mock==5.0.2,more-itertools==8.10.0,msgpack==0.6.2,nbconvert==5.3.1,nbformat==4.4.0,netaddr==0.8.0,node-semver==0.1.1,numpy==1.16.1,oauthlib==2.1.0,ordereddict==1.1,packaging==21.3,pandocfilters==1.4.2,parso==0.1.0,passlib==1.7.1,pbr==5.11.1,pexpect==4.3.0,pickleshare==0.7.4,Pillow==5.4.1,platformdirs==2.4.0,pluggy==0.13.1,ply==3.11,poyo==0.4.1,prompt-toolkit==1.0.15,psycopg2==2.7.3.2,ptyprocess==0.5.2,py==1.11.0,pycparser==2.18,Pygments==2.2.0,PyJWT==1.5.3,PyLD==2.0.3,pyparsing==3.1.0,-e git+https://github.com/RCOSDP/PyPDF2.git@fefc684a3a74aff6f99e5dff24f9b4dd1c95169d#egg=PyPDF2,pyPEG2==2.15.2,pytest==4.2.0,pytest-cov==2.9.0,python-dateutil==2.6.1,python-editor==1.0.3,python-geoip==1.2,pytz==2017.3,pyzmq==17.0.0,redis==2.10.6,requests==2.18.4,requests-oauthlib==1.1.0,resync==1.0.9,s3fs==0.1.6,s3transfer==0.1.13,selenium==3.141.0,Sickle==0.6.4,simplegeneric==0.8.1,simplejson==3.12.0,simplekv==0.11.2,six==1.16.0,snowballstemmer==2.2.0,soupsieve==2.3.2.post1,speaklater==1.3,Sphinx==1.8.4,sphinxcontrib-serializinghtml==1.1.5,sphinxcontrib-websupport==1.2.4,SQLAlchemy==1.2.19,SQLAlchemy-Continuum==1.3.6,SQLAlchemy-Utils==0.35.0,stevedore==3.5.2,sword3common==0.1.1,testpath==0.3.1,toml==0.10.2,tornado==4.5.3,tox==3.28.0,traitlets==4.3.2,typing_extensions==4.1.1,ua-parser==0.7.3,uritemplate==4.1.1,uritools==2.1.0,urllib3==1.22,uWSGI==2.0.21,uwsgitop==0.11,validators==0.12.0,vine==1.3.0,virtualenv==20.17.1,virtualenv-clone==0.5.7,virtualenvwrapper==4.8.4,Wand==0.6.1,wcwidth==0.1.7,webargs==5.5.2,webassets==0.12.1,webencodings==0.5.1,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_accounts&subdirectory=modules/weko-accounts,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_admin&subdirectory=modules/weko-admin,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_authors&subdirectory=modules/weko-authors,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_bulkupdate&subdirectory=modules/weko-bulkupdate,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_deposit&subdirectory=modules/weko-deposit,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_gridlayout&subdirectory=modules/weko-gridlayout,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_groups&subdirectory=modules/weko-groups,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_handle&subdirectory=modules/weko-handle,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_index_tree&subdirectory=modules/weko-index-tree,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_indextree_journal&subdirectory=modules/weko-indextree-journal,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_items_autofill&subdirectory=modules/weko-items-autofill,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_items_ui&subdirectory=modules/weko-items-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_itemtypes_ui&subdirectory=modules/weko-itemtypes-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_logging&subdirectory=modules/weko-logging,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_records&subdirectory=modules/weko-records,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_records_ui&subdirectory=modules/weko-records-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_redis&subdirectory=modules/weko-redis,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_schema_ui&subdirectory=modules/weko-schema-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_search_ui&subdirectory=modules/weko-search-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_sitemap&subdirectory=modules/weko-sitemap,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_swordserver&subdirectory=modules/weko-swordserver,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_theme&subdirectory=modules/weko-theme,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_user_profiles&subdirectory=modules/weko-user-profiles,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_workflow&subdirectory=modules/weko-workflow,Werkzeug==0.15.2,whichcraft==0.4.1,WTForms==2.1,WTForms-Alchemy==0.16.5,WTForms-Components==0.10.3,xmlschema==0.9.30,xmltodict==0.12.0,zipp==3.6.0,zope.interface==5.5.2
c1 run-test-pre: PYTHONHASHSEED='2791856334'
c1 run-test: commands[0] | pytest --cov=invenio_oauth2server tests -v --cov-branch --cov-report=term --cov-report=xml --basetemp=/code/modules/invenio-oauth2server/.tox/c1/tmp
============================= test session starts ==============================
platform linux -- Python 3.6.15, pytest-4.2.0, py-1.11.0, pluggy-0.13.1 -- /code/modules/invenio-oauth2server/.tox/c1/bin/python
cachedir: .tox/c1/.pytest_cache
rootdir: /code/modules/invenio-oauth2server, inifile:
plugins: celery-4.4.4, cov-2.9.0
collecting ... collected 59 items

tests/test_admin.py::test_admin ERROR                                    [  1%]
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue ERROR [  3%]
tests/test_decorators.py::test_require_api_auth_test1 ERROR              [  5%]
tests/test_decorators.py::test_require_api_auth_test2 ERROR              [  6%]
tests/test_decorators.py::test_require_oauth_scopes_test1 ERROR          [  8%]
tests/test_decorators.py::test_require_oauth_scopes_test2 ERROR          [ 10%]
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous ERROR [ 11%]
tests/test_decorators.py::test_rest_extension ERROR                      [ 13%]
tests/test_decorators.py::test_access_login_required ERROR               [ 15%]
tests/test_decorators.py::test_jwt_client ERROR                          [ 16%]
tests/test_invenio_oauth2server.py::test_version PASSED                  [ 18%]
tests/test_invenio_oauth2server.py::test_init SKIPPED                    [ 20%]
tests/test_invenio_oauth2server.py::test_init_rest PASSED                [ 22%]
tests/test_invenio_oauth2server.py::test_init_rest_with_oauthlib_monkeypatch PASSED [ 23%]
tests/test_models.py::test_empty_redirect_uri_and_scope ERROR            [ 25%]
tests/test_models.py::test_token_scopes ERROR                            [ 27%]
tests/test_models.py::test_registering_invalid_scope ERROR               [ 28%]
tests/test_models.py::test_deletion_of_consumer_resource_owner ERROR     [ 30%]
tests/test_models.py::test_deletion_of_resource_owner_consumer ERROR     [ 32%]
tests/test_models.py::test_deletion_of_client1 ERROR                     [ 33%]
tests/test_models.py::test_deletion_of_token1 ERROR                      [ 35%]
tests/test_models.py::test_deletion_of_token2 ERROR                      [ 37%]
tests/test_provider.py::test_client_salt ERROR                           [ 38%]
tests/test_provider.py::test_invalid_authorize_requests ERROR            [ 40%]
tests/test_provider.py::test_refresh_flow ERROR                          [ 42%]
tests/test_provider.py::test_implicit_flow ERROR                         [ 44%]
tests/test_provider.py::test_client_flow ERROR                           [ 45%]
tests/test_provider.py::test_auth_flow_denied ERROR                      [ 47%]
tests/test_provider.py::test_personal_access_token ERROR                 [ 49%]
tests/test_provider.py::test_resource_auth_methods ERROR                 [ 50%]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True] ERROR [ 52%]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True] ERROR [ 54%]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True] ERROR [ 55%]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True] ERROR [ 57%]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True] ERROR [ 59%]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False] ERROR [ 61%]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False] ERROR [ 62%]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False] ERROR [ 64%]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False] ERROR [ 66%]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False] ERROR [ 67%]
tests/test_provider.py::test_oauthlib_monkeypatch ERROR                  [ 69%]
tests/test_provider.py::test_settings_index ERROR                        [ 71%]
tests/test_provider.py::test_info_not_accessible_in_production ERROR     [ 72%]
tests/test_provider.py::test_expired_refresh_flow ERROR                  [ 74%]
tests/test_provider.py::test_not_allowed_public_refresh_flow ERROR       [ 76%]
tests/test_provider.py::test_password_grant_type ERROR                   [ 77%]
tests/test_provider.py::test_email_scope ERROR                           [ 79%]
tests/test_server.py::test_user_identity_init ERROR                      [ 81%]
tests/test_settings.py::test_personal_token_management ERROR             [ 83%]
tests/test_settings.py::test_authorized_app_revocation ERROR             [ 84%]
tests/test_settings.py::test_client_management ERROR                     [ 86%]
tests/test_utils.py::test_rebuilding_access_tokens ERROR                 [ 88%]
tests/test_validators.py::test_validate_redirect_uri[example.org/-expected0] PASSED [ 89%]
tests/test_validators.py::test_validate_redirect_uri[http://-expected1] PASSED [ 91%]
tests/test_validators.py::test_validate_redirect_uri[http://example.org/-expected2] PASSED [ 93%]
tests/test_validators.py::test_validate_redirect_uri[https://example.org/-None] PASSED [ 94%]
tests/test_validators.py::test_validate_redirect_uri[https://localhost/-None] PASSED [ 96%]
tests/test_validators.py::test_validate_redirect_uri[https://127.0.0.1-None] PASSED [ 98%]
tests/test_validators.py::test_url_validator ERROR                       [100%]

==================================== ERRORS ====================================
_________________________ ERROR at setup of test_admin _________________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4bae40cb00>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bae40cb00>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bae40cb00>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bae40cb00>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bae40cb00>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4bae40ccf8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4bae6c4b08>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bae40cb00>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bae40cb00>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bae40ccc0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bae40cb00>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bae40ccc0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bae40ccc0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4bae40ca20>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_admin>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_______ ERROR at setup of test_require_api_auth_oauthlib_urldecode_issue _______

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4bae0907b8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bae0907b8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bae0907b8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bae0907b8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bae0907b8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4bae090978>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4bae2e6608>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bae0907b8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bae0907b8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bae0909b0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bae0907b8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bae0909b0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bae0909b0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4bae090748>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_require_api_auth_oauthlib_urldecode_issue>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________________ ERROR at setup of test_require_api_auth_test1 _________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4bae380780>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bae380780>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bae380780>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bae380780>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bae380780>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4bae380978>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4bae38a708>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bae380780>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bae380780>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bae380940>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bae380780>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bae380940>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bae380940>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4bae3805f8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_require_api_auth_test1>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________________ ERROR at setup of test_require_api_auth_test2 _________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4bae0cb550>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bae0cb550>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bae0cb550>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bae0cb550>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bae0cb550>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4bade807f0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4bade7c8c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bae0cb550>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bae0cb550>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bade80898>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bae0cb550>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bade80898>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bade80898>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4bae0cbdd8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_require_api_auth_test2>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
______________ ERROR at setup of test_require_oauth_scopes_test1 _______________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4bae188780>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bae188780>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bae188780>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bae188780>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bae188780>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4bae188978>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4bae198a08>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bae188780>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bae188780>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bae188940>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bae188780>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bae188940>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bae188940>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4bae1885f8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_require_oauth_scopes_test1>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
______________ ERROR at setup of test_require_oauth_scopes_test2 _______________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4bae05b320>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bae05b320>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bae05b320>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bae05b320>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bae05b320>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4bae05b2e8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4bae05c848>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bae05b320>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bae05b320>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bae05b2b0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bae05b320>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bae05b2b0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bae05b2b0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4bae05ae10>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_require_oauth_scopes_test2>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________ ERROR at setup of test_require_oauth_scopes_allow_anonymous __________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4badc5db38>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4badc5db38>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4badc5db38>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4badc5db38>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4badc5db38>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4badc5dd30>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4badc5f908>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4badc5db38>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4badc5db38>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4badc5dcf8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4badc5db38>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4badc5dcf8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4badc5dcf8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4badc5d9b0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_require_oauth_scopes_allow_anonymous>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________________ ERROR at setup of test_rest_extension _____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4badccdba8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4badccdba8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4badccdba8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4badccdba8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4badccdba8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4badccdda0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4badce06c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4badccdba8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4badccdba8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4badccdd68>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4badccdba8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4badccdd68>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4badccdd68>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4badccda20>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_rest_extension>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of test_access_login_required _________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4badb814a8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4badb814a8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4badb814a8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4badb814a8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4badb814a8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4bae155630>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4bae1454c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4badb814a8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4badb814a8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bae1555f8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4badb814a8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bae1555f8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bae1555f8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4badd07ba8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_access_login_required>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
______________________ ERROR at setup of test_jwt_client _______________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4bae2ae198>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bae2ae198>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bae2ae198>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bae2ae198>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bae2ae198>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4bae2ae4e0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4bae2947c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bae2ae198>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bae2ae198>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bae2ae4a8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bae2ae198>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bae2ae4a8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bae2ae4a8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4bae2b3fd0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_jwt_client>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____________ ERROR at setup of test_empty_redirect_uri_and_scope ______________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4bada8bc50>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bada8bc50>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bada8bc50>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bada8bc50>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bada8bc50>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4bada8bfd0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4bada8e988>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bada8bc50>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bada8bc50>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bada8be48>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bada8bc50>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bada8be48>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bada8be48>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4bada8b940>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_empty_redirect_uri_and_scope>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____________________ ERROR at setup of test_token_scopes ______________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4bad875908>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad875908>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad875908>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad875908>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad875908>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4bad875b00>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4bad879408>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad875908>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad875908>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bad875ac8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad875908>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bad875ac8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bad875ac8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4bad875780>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_token_scopes>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_______________ ERROR at setup of test_registering_invalid_scope _______________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4bad9294a8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad9294a8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad9294a8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad9294a8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad9294a8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4bad9296a0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4bad92be08>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad9294a8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad9294a8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bad929668>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad9294a8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bad929668>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bad929668>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4bad929320>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_registering_invalid_scope>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________ ERROR at setup of test_deletion_of_consumer_resource_owner __________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4bad7bde10>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad7bde10>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad7bde10>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad7bde10>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad7bde10>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4bad7cc0b8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4bad7c2c08>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad7bde10>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad7bde10>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bad7bdfd0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad7bde10>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bad7bdfd0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bad7bdfd0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4bad7bdc88>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_deletion_of_consumer_resource_owner>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________ ERROR at setup of test_deletion_of_resource_owner_consumer __________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4bad792f98>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad792f98>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad792f98>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad792f98>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad792f98>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4bad7a4358>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4bad798f08>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad792f98>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad792f98>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bad7a4518>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad792f98>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bad7a4518>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bad7a4518>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4bad792e10>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_deletion_of_resource_owner_consumer>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________________ ERROR at setup of test_deletion_of_client1 __________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4badd9ed30>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4badd9ed30>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4badd9ed30>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4badd9ed30>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4badd9ed30>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4badd9ef28>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4badd87ec8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4badd9ed30>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4badd9ed30>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4badd9eef0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4badd9ed30>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4badd9eef0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4badd9eef0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4badd9eba8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_deletion_of_client1>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________________ ERROR at setup of test_deletion_of_token1 ___________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4bad5b0ba8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad5b0ba8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad5b0ba8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad5b0ba8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad5b0ba8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4badb4f978>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4bad993548>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad5b0ba8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad5b0ba8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4badb4f7b8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad5b0ba8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4badb4f7b8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4badb4f7b8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4bad5b0a20>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_deletion_of_token1>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________________ ERROR at setup of test_deletion_of_token2 ___________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4bad832828>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad832828>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad832828>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad832828>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad832828>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4bad832a20>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4bad800a08>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad832828>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad832828>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bad8329e8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad832828>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bad8329e8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bad8329e8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4bad8326a0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_deletion_of_token2>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
______________________ ERROR at setup of test_client_salt ______________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4bad434860>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad434860>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad434860>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad434860>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad434860>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4bad434a58>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4bad436cc8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad434860>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad434860>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bad434a20>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad434860>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bad434a20>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bad434a20>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4bad4346d8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_client_salt>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
______________ ERROR at setup of test_invalid_authorize_requests _______________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4bad4975f8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad4975f8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad4975f8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad4975f8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad4975f8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4bad4977f0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4bad48d8c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad4975f8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad4975f8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bad4977b8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad4975f8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bad4977b8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bad4977b8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4bad497470>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_invalid_authorize_requests>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____________________ ERROR at setup of test_refresh_flow ______________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4bad5f45f8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad5f45f8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad5f45f8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad5f45f8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad5f45f8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4bad5f47f0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4bad5f3808>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad5f45f8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad5f45f8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bad5f47b8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad5f45f8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bad5f47b8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bad5f47b8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4bad5f4470>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_refresh_flow>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____________________ ERROR at setup of test_implicit_flow _____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4bada1ce80>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bada1ce80>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bada1ce80>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bada1ce80>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bada1ce80>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4bada290b8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4bada16508>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bada1ce80>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bada1ce80>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bada29080>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bada1ce80>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bada29080>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bada29080>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4bada1ccf8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_implicit_flow>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
______________________ ERROR at setup of test_client_flow ______________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4bad20def0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad20def0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad20def0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad20def0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad20def0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4bad219128>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4bad20a508>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad20def0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad20def0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bad2190f0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad20def0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bad2190f0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bad2190f0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4bad20dd68>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_client_flow>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___________________ ERROR at setup of test_auth_flow_denied ____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4bad1799e8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad1799e8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad1799e8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad1799e8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad1799e8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4bad179be0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4bad0d23c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad1799e8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad1799e8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bad179ba8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad1799e8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bad179ba8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bad179ba8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4bad179860>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_auth_flow_denied>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of test_personal_access_token _________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4bad478780>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad478780>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad478780>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad478780>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad478780>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4bad478978>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4bad43a9c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad478780>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad478780>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bad478940>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad478780>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bad478940>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bad478940>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4bad4785f8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_personal_access_token>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of test_resource_auth_methods _________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4bad271cc0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad271cc0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad271cc0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad271cc0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad271cc0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4bad2712b0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4bad683788>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad271cc0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad271cc0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bad271358>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad271cc0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bad271358>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bad271358>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4bad271da0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_resource_auth_methods>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____ ERROR at setup of test_oauthlib_urldecoding_issue[q=RegularArg-True] _____

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4bad04b438>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad04b438>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad04b438>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad04b438>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad04b438>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4bad04b198>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4bad05a088>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad04b438>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bad04b438>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bad04b320>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bad04b438>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bad04b320>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bad04b320>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4bad045eb8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_oauthlib_urldecoding_issue[q=RegularArg-True]>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____ ERROR at setup of test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True] ______

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4bacd3d3c8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bacd3d3c8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bacd3d3c8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bacd3d3c8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bacd3d3c8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4bacd3d748>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4bacd67fc8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bacd3d3c8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bacd3d3c8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bacd3d710>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bacd3d3c8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bacd3d710>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bacd3d710>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4bacd3d208>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__ ERROR at setup of test_oauthlib_urldecoding_issue[q=text+with+spaces-True] __

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4bacbbc400>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bacbbc400>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bacbbc400>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bacbbc400>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bacbbc400>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4bacbbc5f8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4bacbbe548>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bacbbc400>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bacbbc400>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bacbbc5c0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bacbbc400>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bacbbc5c0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bacbbc5c0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4bacbbc278>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_oauthlib_urldecoding_issue[q=text+with+spaces-True]>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___ ERROR at setup of test_oauthlib_urldecoding_issue[q=title:TheTitle-True] ___

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4bacee09e8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bacee09e8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bacee09e8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bacee09e8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bacee09e8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4bacee0be0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4baced2948>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bacee09e8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bacee09e8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bacee0ba8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bacee09e8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bacee0ba8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bacee0ba8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4bacee0860>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_oauthlib_urldecoding_issue[q=title:TheTitle-True]>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_ ERROR at setup of test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True] _

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4bace267b8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bace267b8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bace267b8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bace267b8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bace267b8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4bace269b0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4bace1a948>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bace267b8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bace267b8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bace26978>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bace267b8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bace26978>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bace26978>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4bace26630>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____ ERROR at setup of test_oauthlib_urldecoding_issue[$type=search-False] _____

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4bacaeaf60>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bacaeaf60>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bacaeaf60>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bacaeaf60>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bacaeaf60>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4bacac3128>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4bacaeccc8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bacaeaf60>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bacaeaf60>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bacac3048>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bacaeaf60>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bacac3048>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bacac3048>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4bacaeadd8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_oauthlib_urldecoding_issue[$type=search-False]>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____ ERROR at setup of test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False] _____

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4bac8e85c0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bac8e85c0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bac8e85c0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bac8e85c0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bac8e85c0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4bac8e87b8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4bac8e6ac8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bac8e85c0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bac8e85c0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bac8e8780>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bac8e85c0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bac8e8780>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bac8e8780>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4bac8e8438>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_ ERROR at setup of test_oauthlib_urldecoding_issue[with regular spaces-False] _

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4baca77438>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4baca77438>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4baca77438>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4baca77438>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4baca77438>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4baca77240>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4baca52688>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4baca77438>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4baca77438>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4baca77198>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4baca77438>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4baca77198>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4baca77198>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4baca4ef60>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_oauthlib_urldecoding_issue[with regular spaces-False]>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__ ERROR at setup of test_oauthlib_urldecoding_issue[json_data={a: 42}-False] __

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4bac4f3a90>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bac4f3a90>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bac4f3a90>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bac4f3a90>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bac4f3a90>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4bac5aa5f8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4bac5a7e08>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bac4f3a90>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bac4f3a90>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bac5aa5c0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bac4f3a90>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bac5aa5c0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bac5aa5c0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4bac505e80>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_oauthlib_urldecoding_issue[json_data={a: 42}-False]>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___ ERROR at setup of test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False] ___

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4bac6acda0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bac6acda0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bac6acda0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bac6acda0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bac6acda0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4bac6a0128>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4bac69c108>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bac6acda0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bac6acda0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bac6a00f0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bac6acda0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bac6a00f0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bac6a00f0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4bac6acf98>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of test_oauthlib_monkeypatch __________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4bac3d29e8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bac3d29e8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bac3d29e8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bac3d29e8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bac3d29e8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4bac3d2be0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4bac3bf788>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bac3d29e8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bac3d29e8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bac3d2ba8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bac3d29e8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bac3d2ba8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bac3d2ba8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4bac3d2860>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_oauthlib_monkeypatch>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________________ ERROR at setup of test_settings_index _____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4bac326b70>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bac326b70>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bac326b70>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bac326b70>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bac326b70>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4bac2fc198>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4bac32afc8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bac326b70>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bac326b70>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bac2fc160>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bac326b70>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bac2fc160>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bac2fc160>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4bac326f28>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_settings_index>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___________ ERROR at setup of test_info_not_accessible_in_production ___________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4bac022518>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bac022518>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bac022518>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bac022518>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bac022518>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4bac022710>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4bac016a88>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bac022518>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bac022518>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bac0226d8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bac022518>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bac0226d8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bac0226d8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4bac022390>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_info_not_accessible_in_production>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of test_expired_refresh_flow __________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4bac2cb358>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bac2cb358>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bac2cb358>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bac2cb358>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bac2cb358>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4bac2cb128>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4bac474088>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bac2cb358>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bac2cb358>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bac2cb198>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bac2cb358>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bac2cb198>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bac2cb198>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4bac2cb470>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_expired_refresh_flow>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________ ERROR at setup of test_not_allowed_public_refresh_flow ____________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4babdd8668>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4babdd8668>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4babdd8668>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4babdd8668>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4babdd8668>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4babdd8860>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4babddf088>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4babdd8668>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4babdd8668>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4babdd8828>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4babdd8668>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4babdd8828>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4babdd8828>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4babdd84e0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_not_allowed_public_refresh_flow>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________________ ERROR at setup of test_password_grant_type __________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4babeb20f0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4babeb20f0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4babeb20f0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4babeb20f0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4babeb20f0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4babeb22e8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4babeb6048>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4babeb20f0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4babeb20f0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4babeb22b0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4babeb20f0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4babeb22b0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4babeb22b0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4babe92eb8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_password_grant_type>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
______________________ ERROR at setup of test_email_scope ______________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4babdfce48>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4babdfce48>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4babdfce48>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4babdfce48>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4babdfce48>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4babe12080>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4babe0d448>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4babdfce48>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4babdfce48>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4babe12048>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4babdfce48>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4babe12048>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4babe12048>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4babdfccc0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_email_scope>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________________ ERROR at setup of test_user_identity_init ___________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4babbbbef0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4babbbbef0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4babbbbef0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4babbbbef0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4babbbbef0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4babbcb160>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4babbc1d88>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4babbbbef0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4babbbbef0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4babbcb128>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4babbbbef0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4babbcb128>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4babbcb128>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4babbbbd68>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_user_identity_init>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_______________ ERROR at setup of test_personal_token_management _______________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4bab83a9e8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bab83a9e8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bab83a9e8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bab83a9e8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bab83a9e8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4bab83abe0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4bab83f8c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bab83a9e8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bab83a9e8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bab83aba8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bab83a9e8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bab83aba8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bab83aba8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4bab83a860>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_personal_token_management>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_______________ ERROR at setup of test_authorized_app_revocation _______________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4bab8a89b0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bab8a89b0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bab8a89b0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bab8a89b0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bab8a89b0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4bab8a8ba8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4bab897fc8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bab8a89b0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bab8a89b0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bab8a8b70>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bab8a89b0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bab8a8b70>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bab8a8b70>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4bab8a8828>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_authorized_app_revocation>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___________________ ERROR at setup of test_client_management ___________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4babcf8c50>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4babcf8c50>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4babcf8c50>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4babcf8c50>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4babcf8c50>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4babcf8e48>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4babcc9dc8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4babcf8c50>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4babcf8c50>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4babcf8e10>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4babcf8c50>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4babcf8e10>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4babcf8e10>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4babcf8ac8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_client_management>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_______________ ERROR at setup of test_rebuilding_access_tokens ________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4bab62f0b8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bab62f0b8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bab62f0b8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bab62f0b8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bab62f0b8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4bab62f2b0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4bab625488>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bab62f0b8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bab62f0b8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bab62f278>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bab62f0b8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bab62f278>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bab62f278>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4bab63eef0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_rebuilding_access_tokens>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____________________ ERROR at setup of test_url_validator _____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f4bab7060b8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bab7060b8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bab7060b8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bab7060b8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bab7060b8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f4bab706390>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f4bab70dfc8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bab7060b8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f4bab7060b8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bab7064e0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f4bab7060b8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bab7064e0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f4bab7064e0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f4bab706320>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_url_validator>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                # SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                #                                   'sqlite:///test.db'),
                SQLALCHEMY_DATABASE_URI='postgresql+psycopg2://invenio:dbpass123@localhost:5432/wekotest',
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
>              not database_exists(str(db.engine.url)):

tests/conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
=============================== warnings summary ===============================
tests/test_admin.py::test_admin
  /code/modules/invenio-oauth2server/.tox/c1/lib/python3.6/site-packages/pkg_resources/_vendor/packaging/specifiers.py:276: DeprecationWarning: Creating a LegacyVersion has been deprecated and will be removed in the next major release
    DeprecationWarning,

tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
  /code/modules/invenio-oauth2server/.tox/c1/lib/python3.6/site-packages/pkg_resources/_vendor/packaging/version.py:114: DeprecationWarning: Creating a LegacyVersion has been deprecated and will be removed in the next major release
    DeprecationWarning,

tests/test_admin.py::test_admin
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_jwt_client
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_token_scopes
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token2
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_email_scope
tests/test_server.py::test_user_identity_init
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_client_management
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_validators.py::test_url_validator
  /code/modules/invenio-oauth2server/tests/conftest.py:90: DeprecationWarning: 'werkzeug.wsgi.DispatcherMiddleware' has moved to 'werkzeug.middleware.dispatcher.DispatcherMiddleware'. This import is deprecated as of version 0.15 and will be removed in version 1.0.
    '/api': api_app.wsgi_app

tests/test_models.py::test_empty_redirect_uri_and_scope
  /code/modules/invenio-oauth2server/invenio_oauth2server/ext.py:285: RuntimeWarning: You are overriding the default OAuthlib "URL encoded" set of valid characters. Make sure that the characters defined in oauthlib.common.urlencoded are indeed limitting your needs.
    RuntimeWarning

-- Docs: https://docs.pytest.org/en/latest/warnings.html

---------- coverage: platform linux, python 3.6.15-final-0 -----------
Name                                     Stmts   Miss Branch BrPart  Cover
--------------------------------------------------------------------------
invenio_oauth2server/__init__.py             7      0      0      0   100%
invenio_oauth2server/admin.py               24      0      4      0   100%
invenio_oauth2server/config.py              15      0      0      0   100%
invenio_oauth2server/decorators.py          35     14     12      0    45%
invenio_oauth2server/errors.py              40     12     22      0    71%
invenio_oauth2server/ext.py                110     36     54      7    59%
invenio_oauth2server/forms.py               55     28     26      0    48%
invenio_oauth2server/models.py             141     60     30      0    53%
invenio_oauth2server/provider.py            46     29     18      1    28%
invenio_oauth2server/proxies.py              5      0      2      0   100%
invenio_oauth2server/scopes.py               6      0      0      0   100%
invenio_oauth2server/utils.py               31     19     10      0    29%
invenio_oauth2server/validators.py          28      9     16      2    61%
invenio_oauth2server/version.py              3      0      0      0   100%
invenio_oauth2server/views/__init__.py       5      0      0      0   100%
invenio_oauth2server/views/server.py        84     51     20      0    32%
invenio_oauth2server/views/settings.py     126     75     32      1    33%
--------------------------------------------------------------------------
TOTAL                                      761    333    246     11    50%
Coverage XML written to file coverage.xml

======== 9 passed, 1 skipped, 5539 warnings, 49 error in 73.48 seconds =========
ERROR: InvocationError for command /code/modules/invenio-oauth2server/.tox/c1/bin/pytest --cov=invenio_oauth2server tests -v --cov-branch --cov-report=term --cov-report=xml --basetemp=/code/modules/invenio-oauth2server/.tox/c1/tmp (exited with code 1)
___________________________________ summary ____________________________________
ERROR:   c1: commands failed
