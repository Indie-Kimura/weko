GLOB sdist-make: /code/modules/invenio-files-rest/setup.py
c1 inst-nodeps: /code/modules/invenio-files-rest/.tox/.tmp/package/1/invenio-files-rest-1.0.1.zip
c1 installed: alabaster==0.7.13,alembic==0.9.6,amqp==2.6.0,angular-gettext-babel==0.3,aniso8601==8.0.0,arrow==0.12.1,asn1crypto==0.23.0,atomicwrites==1.4.1,attrs==17.4.0,b2handle==1.1.2,Babel==2.5.1,bagit==1.7.0,beautifulsoup4==4.9.3,bibtexparser==1.0.1,billiard==3.6.3.0,binaryornot==0.4.4,bleach==3.1.0,blinker==1.4,boto3==1.7.84,botocore==1.10.84,cachelib==0.1,cachetools==4.2.4,cchardet==2.1.1,celery==4.4.4,certifi==2017.11.5,cffi==1.11.2,chardet==3.0.4,citeproc-py==0.5.1,citeproc-py-styles==0.1.2,click==6.7,cookiecutter==1.6.0,counter-robots==2018.6,coverage==6.2,cryptography==2.1.4,datacite==1.0.1,DateTime==4.9,decorator==4.1.2,defusedxml==0.5.0,dictdiffer==0.7.0,distlib==0.3.6,dnspython==2.2.1,docutils==0.18.1,dojson==1.3.2,elasticsearch==6.1.1,elasticsearch-dsl==6.4.0,elementpath==1.0.6,email-validator==1.0.5,entrypoints==0.2.3,feedgen==0.7.0,filelock==3.4.1,Flask==1.1.0,Flask-Admin==1.5.3,Flask-Alembic==2.0.1,Flask-Assets==0.12,Flask-BabelEx==0.9.4,Flask-Breadcrumbs==0.5.0,Flask-Caching==1.10.1,Flask-CeleryExt==0.3.4,Flask-Collect==1.2.2,Flask-Cors==3.0.3,Flask-DebugToolbar==0.13.1,Flask-IIIF==0.6.1,Flask-KVSession==0.6.2,Flask-Limiter==1.1.0,Flask-Login==0.4.1,Flask-Mail==0.9.1,flask-marshmallow==0.14.0,Flask-Menu==0.6.0,-e git+https://github.com/RCOSDP/flask-oauthlib.git@83148ee01e9da37a8a1134febe83bc32b95bac6e#egg=Flask_OAuthlib,Flask-Plugins==1.6.1,Flask-Principal==0.4.0,Flask-RESTful==0.3.8,Flask-Security==3.0.0,flask-shell-ipython==0.4.1,Flask-Sitemap==0.4.0,Flask-SQLAlchemy==2.3.2,flask-talisman==0.4.1,Flask-WTF==0.14.3,-e git+https://github.com/RCOSDP/pyfpdf.git@f9b032148283d535cabc7789858081c80de36fef#egg=fpdf,frozendict==2.3.8,fs==0.5.4,ftfy==4.4.3,future==0.16.0,github3.py==1.1.0,html5lib==1.0.1,idna==2.6,iiif-prezi==0.3.0,imagesize==1.4.1,importlib-metadata==4.8.3,importlib-resources==5.4.0,infinity==1.4,intervals==0.8.0,invenio-access==1.1.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_accounts&subdirectory=modules/invenio-accounts,invenio-admin==1.1.2,invenio-app==1.1.0,invenio-assets==1.0.0,invenio-base==1.0.2,invenio-cache==1.0.0,invenio-celery==1.1.3,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_communities&subdirectory=modules/invenio-communities,invenio-config==1.0.0,invenio-csl-rest==1.0.0a1,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_db&subdirectory=modules/invenio-db,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_deposit&subdirectory=modules/invenio-deposit,invenio-files-rest @ file:///code/modules/invenio-files-rest/.tox/.tmp/package/1/invenio-files-rest-1.0.1.zip,invenio-formatter==1.0.0b3,invenio-i18n==1.0.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_iiif&subdirectory=modules/invenio-iiif,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_indexer&subdirectory=modules/invenio-indexer,invenio-jsonschemas==1.0.0,invenio-logging==1.0.0b3,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_mail&subdirectory=modules/invenio-mail,invenio-marc21==1.0.0a8,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_oaiharvester&subdirectory=modules/invenio-oaiharvester,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_oaiserver&subdirectory=modules/invenio-oaiserver,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_oauth2server&subdirectory=modules/invenio-oauth2server,invenio-oauthclient==1.0.0,invenio-pidrelations==1.0.0a4,invenio-pidstore==1.0.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_previewer&subdirectory=modules/invenio-previewer,invenio-query-parser==0.6.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_queues&subdirectory=modules/invenio-queues,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_records&subdirectory=modules/invenio-records,invenio-records-files==1.0.0a10,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_records_rest&subdirectory=modules/invenio-records-rest,invenio-records-ui==1.0.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_resourcesyncclient&subdirectory=modules/invenio-resourcesyncclient,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_resourcesyncserver&subdirectory=modules/invenio-resourcesyncserver,invenio-rest==1.1.2,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_s3&subdirectory=modules/invenio-s3,-e git+https://github.com/RCOSDP/invenio-search.git@cff9744c5dc651893a9c51672c5b8da9adc21e16#egg=invenio_search,-e git+https://github.com/RCOSDP/invenio-search-ui.git@74bd3b2990ff27b39e01b6b31be9a0b5fda3dd0f#egg=invenio_search_ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_stats&subdirectory=modules/invenio-stats,invenio-theme==1.0.0b4,ipaddress==1.0.19,ipython==6.2.1,ipython-genutils==0.2.0,itsdangerous==0.24,jedi==0.11.0,Jinja2==2.10.1,jinja2-cli==0.6.0,jinja2-time==0.2.0,jmespath==0.10.0,jsmin==2.2.2,jsonpatch==1.21,jsonpath-ng==1.5.2,jsonpointer==1.14,jsonref==0.1,jsonresolver==0.2.1,jsonschema==2.6.0,jupyter-client==5.2.2,jupyter-core==4.4.0,-e git+https://github.com/RCOSDP/kombu.git@f204fdf078d5e94393c86693f545e2d011f620f5#egg=kombu,limits==1.2.1,lxml==4.1.1,Mako==1.0.7,MarkupSafe==1.1.1,marshmallow==2.20.1,marshmallow-sqlalchemy==0.23.1,maxminddb==1.5.2,maxminddb-geolite2==2017.803,mistune==0.8.3,mock==5.0.2,more-itertools==8.10.0,msgpack==0.6.2,nbconvert==5.3.1,nbformat==4.4.0,netaddr==0.8.0,node-semver==0.1.1,numpy==1.16.1,oauthlib==2.1.0,ordereddict==1.1,packaging==21.3,pandocfilters==1.4.2,parso==0.1.0,passlib==1.7.1,pbr==5.11.1,pexpect==4.3.0,pickleshare==0.7.4,Pillow==5.4.1,platformdirs==2.4.0,pluggy==0.13.1,ply==3.11,poyo==0.4.1,prompt-toolkit==1.0.15,psycopg2==2.7.3.2,ptyprocess==0.5.2,py==1.11.0,pycparser==2.18,Pygments==2.2.0,PyJWT==1.5.3,PyLD==2.0.3,pyparsing==3.1.0,-e git+https://github.com/RCOSDP/PyPDF2.git@fefc684a3a74aff6f99e5dff24f9b4dd1c95169d#egg=PyPDF2,pyPEG2==2.15.2,pytest==4.2.0,pytest-cov==2.9.0,python-dateutil==2.6.1,python-editor==1.0.3,python-geoip==1.2,pytz==2017.3,pyzmq==17.0.0,redis==2.10.6,requests==2.18.4,requests-oauthlib==1.1.0,resync==1.0.9,s3fs==0.1.6,s3transfer==0.1.13,selenium==3.141.0,Sickle==0.6.4,simplegeneric==0.8.1,simplejson==3.12.0,simplekv==0.11.2,six==1.16.0,snowballstemmer==2.2.0,soupsieve==2.3.2.post1,speaklater==1.3,Sphinx==1.8.4,sphinxcontrib-serializinghtml==1.1.5,sphinxcontrib-websupport==1.2.4,SQLAlchemy==1.2.19,SQLAlchemy-Continuum==1.3.6,SQLAlchemy-Utils==0.35.0,stevedore==3.5.2,sword3common==0.1.1,testpath==0.3.1,toml==0.10.2,tornado==4.5.3,tox==3.28.0,traitlets==4.3.2,typing_extensions==4.1.1,ua-parser==0.7.3,uritemplate==4.1.1,uritools==2.1.0,urllib3==1.22,uWSGI==2.0.21,uwsgitop==0.11,validators==0.12.0,vine==1.3.0,virtualenv==20.17.1,virtualenv-clone==0.5.7,virtualenvwrapper==4.8.4,Wand==0.6.1,wcwidth==0.1.7,webargs==5.5.2,webassets==0.12.1,webencodings==0.5.1,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_accounts&subdirectory=modules/weko-accounts,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_admin&subdirectory=modules/weko-admin,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_authors&subdirectory=modules/weko-authors,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_bulkupdate&subdirectory=modules/weko-bulkupdate,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_deposit&subdirectory=modules/weko-deposit,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_gridlayout&subdirectory=modules/weko-gridlayout,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_groups&subdirectory=modules/weko-groups,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_handle&subdirectory=modules/weko-handle,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_index_tree&subdirectory=modules/weko-index-tree,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_indextree_journal&subdirectory=modules/weko-indextree-journal,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_items_autofill&subdirectory=modules/weko-items-autofill,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_items_ui&subdirectory=modules/weko-items-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_itemtypes_ui&subdirectory=modules/weko-itemtypes-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_logging&subdirectory=modules/weko-logging,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_records&subdirectory=modules/weko-records,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_records_ui&subdirectory=modules/weko-records-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_redis&subdirectory=modules/weko-redis,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_schema_ui&subdirectory=modules/weko-schema-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_search_ui&subdirectory=modules/weko-search-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_sitemap&subdirectory=modules/weko-sitemap,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_swordserver&subdirectory=modules/weko-swordserver,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_theme&subdirectory=modules/weko-theme,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_user_profiles&subdirectory=modules/weko-user-profiles,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_workflow&subdirectory=modules/weko-workflow,Werkzeug==0.15.2,whichcraft==0.4.1,WTForms==2.1,WTForms-Alchemy==0.16.5,WTForms-Components==0.10.3,xmlschema==0.9.30,xmltodict==0.12.0,zipp==3.6.0,zope.interface==5.5.2
c1 run-test-pre: PYTHONHASHSEED='3961748718'
c1 run-test: commands[0] | pytest --cov=invenio_files_rest tests -v --cov-branch --cov-report=term --cov-report=xml --basetemp=/code/modules/invenio-files-rest/.tox/c1/tmp
============================= test session starts ==============================
platform linux -- Python 3.6.15, pytest-4.2.0, py-1.11.0, pluggy-0.13.1 -- /code/modules/invenio-files-rest/.tox/c1/bin/python
cachedir: .tox/c1/.pytest_cache
rootdir: /code/modules/invenio-files-rest, inifile:
plugins: celery-4.4.4, cov-2.9.0
collecting ... collected 141 items

tests/test_admin.py::test_require_slug PASSED                            [  0%]
tests/test_admin.py::test_admin_views ERROR                              [  1%]
tests/test_cli.py::test_simple_workflow SKIPPED                          [  2%]
tests/test_examples_app.py::test_example_app SKIPPED                     [  2%]
tests/test_helpers.py::test_make_path PASSED                             [  3%]
tests/test_invenio_files_rest.py::test_version PASSED                    [  4%]
tests/test_invenio_files_rest.py::test_init PASSED                       [  4%]
tests/test_limiters.py::test_file_size_limit_comparisons PASSED          [  5%]
tests/test_models.py::test_location ERROR                                [  6%]
tests/test_models.py::test_location_default ERROR                        [  7%]
tests/test_models.py::test_location_validation ERROR                     [  7%]
tests/test_models.py::test_bucket_removal ERROR                          [  8%]
tests/test_models.py::test_bucket_kwargs_creation ERROR                  [  9%]
tests/test_models.py::test_bucket_create_object ERROR                    [  9%]
tests/test_models.py::test_bucket_retrieval ERROR                        [ 10%]
tests/test_models.py::test_object_create ERROR                           [ 11%]
tests/test_models.py::test_object_create_with_fileid ERROR               [ 12%]
tests/test_models.py::test_object_multibucket ERROR                      [ 12%]
tests/test_models.py::test_object_get_by_bucket ERROR                    [ 13%]
tests/test_models.py::test_object_delete ERROR                           [ 14%]
tests/test_models.py::test_object_remove ERROR                           [ 14%]
tests/test_models.py::test_object_remove_marker ERROR                    [ 15%]
tests/test_models.py::test_object_set_contents ERROR                     [ 16%]
tests/test_models.py::test_object_set_location ERROR                     [ 17%]
tests/test_models.py::test_object_snapshot ERROR                         [ 17%]
tests/test_models.py::test_object_snapshot_deleted ERROR                 [ 18%]
tests/test_models.py::test_bucket_sync_new_object ERROR                  [ 19%]
tests/test_models.py::test_bucket_sync_same_object ERROR                 [ 19%]
tests/test_models.py::test_bucket_sync_deleted_object ERROR              [ 20%]
tests/test_models.py::test_bucket_sync_delete_extras ERROR               [ 21%]
tests/test_models.py::test_bucket_sync ERROR                             [ 21%]
tests/test_models.py::test_bucket_sync_deleted ERROR                     [ 22%]
tests/test_models.py::test_object_copy ERROR                             [ 23%]
tests/test_models.py::test_object_set_file ERROR                         [ 24%]
tests/test_models.py::test_object_mimetype ERROR                         [ 24%]
tests/test_models.py::test_object_restore ERROR                          [ 25%]
tests/test_models.py::test_object_relink_all ERROR                       [ 26%]
tests/test_models.py::test_object_validation ERROR                       [ 26%]
tests/test_models.py::test_bucket_tags ERROR                             [ 27%]
tests/test_models.py::test_fileinstance_get ERROR                        [ 28%]
tests/test_models.py::test_fileinstance_get_by_uri ERROR                 [ 29%]
tests/test_models.py::test_fileinstance_create ERROR                     [ 29%]
tests/test_models.py::test_fileinstance_set_contents ERROR               [ 30%]
tests/test_models.py::test_fileinstance_copy_contents ERROR              [ 31%]
tests/test_models.py::test_fileinstance_copy_contents_invalid ERROR      [ 31%]
tests/test_models.py::test_fileinstance_send_file ERROR                  [ 32%]
tests/test_models.py::test_fileinstance_validation ERROR                 [ 33%]
tests/test_models.py::test_object_version_tags ERROR                     [ 34%]
tests/test_models_multipart.py::test_multipart_creation ERROR            [ 34%]
tests/test_models_multipart.py::test_multipart_last_part ERROR           [ 35%]
tests/test_models_multipart.py::test_part_creation ERROR                 [ 36%]
tests/test_models_multipart.py::test_multipart_full ERROR                [ 36%]
tests/test_request.py::test_max_content_length PASSED                    [ 37%]
tests/test_serializer.py::test_serialize_pretty PASSED                   [ 38%]
tests/test_storage.py::test_storage_interface PASSED                     [ 39%]
tests/test_storage.py::test_pyfs_initialize ERROR                        [ 39%]
tests/test_storage.py::test_pyfs_delete ERROR                            [ 40%]
tests/test_storage.py::test_pyfs_delete_fail ERROR                       [ 41%]
tests/test_storage.py::test_pyfs_save ERROR                              [ 41%]
tests/test_storage.py::test_pyfs_save_failcleanup ERROR                  [ 42%]
tests/test_storage.py::test_pyfs_save_callback ERROR                     [ 43%]
tests/test_storage.py::test_pyfs_save_limits ERROR                       [ 43%]
tests/test_storage.py::test_pyfs_update ERROR                            [ 44%]
tests/test_storage.py::test_pyfs_update_fail ERROR                       [ 45%]
tests/test_storage.py::test_pyfs_checksum PASSED                         [ 46%]
tests/test_storage.py::test_pyfs_checksum_fail PASSED                    [ 46%]
tests/test_storage.py::test_pyfs_send_file ERROR                         [ 47%]
tests/test_storage.py::test_pyfs_send_file_for_download ERROR            [ 48%]
tests/test_storage.py::test_pyfs_send_file_xss_prevention ERROR          [ 48%]
tests/test_storage.py::test_pyfs_send_file_fail ERROR                    [ 49%]
tests/test_storage.py::test_pyfs_copy ERROR                              [ 50%]
tests/test_storage.py::test_non_unicode_filename ERROR                   [ 51%]
tests/test_tasks.py::test_verify_checksum ERROR                          [ 51%]
tests/test_tasks.py::test_schedule_checksum_verification ERROR           [ 52%]
tests/test_tasks.py::test_migrate_file ERROR                             [ 53%]
tests/test_tasks.py::test_migrate_file_copyfail ERROR                    [ 53%]
tests/test_tasks.py::test_remove_file_data ERROR                         [ 54%]
tests/test_views_bucket.py::test_head ERROR                              [ 55%]
tests/test_views_bucket.py::test_head_locked_deleted ERROR               [ 56%]
tests/test_views_bucket.py::test_get ERROR                               [ 56%]
tests/test_views_bucket.py::test_get_versions ERROR                      [ 57%]
tests/test_views_bucket.py::test_get_empty_bucket ERROR                  [ 58%]
tests/test_views_location.py::test_post_bucket[None-401] ERROR           [ 58%]
tests/test_views_location.py::test_post_bucket[auth-403] ERROR           [ 59%]
tests/test_views_location.py::test_post_bucket[location-200] ERROR       [ 60%]
tests/test_views_location.py::test_get_location[None-405] ERROR          [ 60%]
tests/test_views_location.py::test_get_location[auth-405] ERROR          [ 61%]
tests/test_views_location.py::test_get_location[location-405] ERROR      [ 62%]
tests/test_views_multipart.py::test_post_init ERROR                      [ 63%]
tests/test_views_multipart.py::test_post_init_querystring ERROR          [ 63%]
tests/test_views_multipart.py::test_get_init_not_allowed ERROR           [ 64%]
tests/test_views_multipart.py::test_post_invalid_partsizes ERROR         [ 65%]
tests/test_views_multipart.py::test_post_size_limits ERROR               [ 65%]
tests/test_views_multipart.py::test_post_locked_bucket ERROR             [ 66%]
tests/test_views_multipart.py::test_post_invalidkey ERROR                [ 67%]
tests/test_views_multipart.py::test_put ERROR                            [ 68%]
tests/test_views_multipart.py::test_put_not_found ERROR                  [ 68%]
tests/test_views_multipart.py::test_put_wrong_sizes ERROR                [ 69%]
tests/test_views_multipart.py::test_put_ngfileupload ERROR               [ 70%]
tests/test_views_multipart.py::test_put_invalid_part_number ERROR        [ 70%]
tests/test_views_multipart.py::test_put_completed_multipart ERROR        [ 71%]
tests/test_views_multipart.py::test_put_badstream ERROR                  [ 72%]
tests/test_views_multipart.py::test_get ERROR                            [ 73%]
tests/test_views_multipart.py::test_get_empty ERROR                      [ 73%]
tests/test_views_multipart.py::test_get_serialization ERROR              [ 74%]
tests/test_views_multipart.py::test_post_complete[None-404] ERROR        [ 75%]
tests/test_views_multipart.py::test_post_complete[auth-404] ERROR        [ 75%]
tests/test_views_multipart.py::test_post_complete[objects-404] ERROR     [ 76%]
tests/test_views_multipart.py::test_post_complete[bucket-200] ERROR      [ 77%]
tests/test_views_multipart.py::test_post_complete[location-200] ERROR    [ 78%]
tests/test_views_multipart.py::test_post_complete_fail ERROR             [ 78%]
tests/test_views_multipart.py::test_post_complete_timeout ERROR          [ 79%]
tests/test_views_multipart.py::test_delete ERROR                         [ 80%]
tests/test_views_multipart.py::test_delete_invalid ERROR                 [ 80%]
tests/test_views_multipart.py::test_delete_init_not_allowed ERROR        [ 81%]
tests/test_views_multipart.py::test_get_listuploads ERROR                [ 82%]
tests/test_views_multipart.py::test_already_exhausted_input_stream ERROR [ 82%]
tests/test_views_objectversion.py::test_get_not_found ERROR              [ 83%]
tests/test_views_objectversion.py::test_get ERROR                        [ 84%]
tests/test_views_objectversion.py::test_get_download ERROR               [ 85%]
tests/test_views_objectversion.py::test_last_modified_utc_conversion ERROR [ 85%]
tests/test_views_objectversion.py::test_get_unreadable_file ERROR        [ 86%]
tests/test_views_objectversion.py::test_get_versions ERROR               [ 87%]
tests/test_views_objectversion.py::test_get_versions_invalid ERROR       [ 87%]
tests/test_views_objectversion.py::test_post ERROR                       [ 88%]
tests/test_views_objectversion.py::test_put ERROR                        [ 89%]
tests/test_views_objectversion.py::test_put_versioning ERROR             [ 90%]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota] ERROR [ 90%]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size] ERROR [ 91%]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None] ERROR [ 92%]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None] ERROR [ 92%]
tests/test_views_objectversion.py::test_put_invalid_key ERROR            [ 93%]
tests/test_views_objectversion.py::test_put_zero_size ERROR              [ 94%]
tests/test_views_objectversion.py::test_put_deleted_locked ERROR         [ 95%]
tests/test_views_objectversion.py::test_put_error ERROR                  [ 95%]
tests/test_views_objectversion.py::test_put_multipartform ERROR          [ 96%]
tests/test_views_objectversion.py::test_delete_versions_head_reset ERROR [ 97%]
tests/test_views_objectversion.py::test_delete_locked_deleted ERROR      [ 97%]
tests/test_views_objectversion.py::test_delete_unwritable ERROR          [ 98%]
tests/test_views_objectversion.py::test_put_header_tags ERROR            [ 99%]
tests/test_views_objectversion.py::test_put_header_invalid_tags ERROR    [100%]

==================================== ERRORS ====================================
______________________ ERROR at setup of test_admin_views ______________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c0866b940>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0866b940>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c0866b940>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c0866b940>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0866b940>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c086728d0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c08993408>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0866b940>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0866b940>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c08672ef0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c0866b940>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c08672ef0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c08672ef0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c0866bfd0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_______________________ ERROR at setup of test_location ________________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c087be1d0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c087be1d0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c087be1d0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c087be1d0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c087be1d0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c087be390>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c08ca4648>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c087be1d0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c087be1d0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c087be3c8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c087be1d0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c087be3c8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c087be3c8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c087be198>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___________________ ERROR at setup of test_location_default ____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c085ecc18>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c085ecc18>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c085ecc18>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c085ecc18>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c085ecc18>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c08452390>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c085fc588>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c085ecc18>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c085ecc18>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c08452358>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c085ecc18>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c08452358>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c08452358>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c085f9fd0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________________ ERROR at setup of test_location_validation __________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c08452cf8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c08452cf8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c08452cf8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c08452cf8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c08452cf8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c083cc4e0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c083fe288>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c08452cf8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c08452cf8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c083cc4a8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c08452cf8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c083cc4a8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c083cc4a8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c083cc240>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________________ ERROR at setup of test_bucket_removal _____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c08018ac8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c08018ac8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c08018ac8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c08018ac8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c08018ac8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c08185908>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c08186408>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c08018ac8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c08018ac8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c081858d0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c08018ac8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c081858d0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c081858d0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c081855f8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________________ ERROR at setup of test_bucket_kwargs_creation _________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c082ccda0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c082ccda0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c082ccda0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c082ccda0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c082ccda0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c082a1048>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c082bfb48>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c082ccda0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c082ccda0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c08283fd0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c082ccda0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c08283fd0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c08283fd0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c08283cf8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of test_bucket_create_object __________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c08346668>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c08346668>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c08346668>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c08346668>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c08346668>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c08350a20>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c08356708>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c08346668>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c08346668>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c08350978>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c08346668>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c08350978>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c08350978>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c08350710>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___________________ ERROR at setup of test_bucket_retrieval ____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c07f31630>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07f31630>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07f31630>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07f31630>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07f31630>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c082da320>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c082e9588>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07f31630>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07f31630>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c082da2e8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07f31630>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c082da2e8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c082da2e8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c082d5fd0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____________________ ERROR at setup of test_object_create _____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c0803ed30>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0803ed30>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c0803ed30>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c0803ed30>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0803ed30>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c07f090b8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c07f27808>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0803ed30>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0803ed30>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07f09128>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c0803ed30>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07f09128>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07f09128>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c07f2b2e8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_______________ ERROR at setup of test_object_create_with_fileid _______________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c07e89c88>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07e89c88>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07e89c88>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07e89c88>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07e89c88>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c08119668>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c081205c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07e89c88>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07e89c88>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c08119630>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07e89c88>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c08119630>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c08119630>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c08119358>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________________ ERROR at setup of test_object_multibucket ___________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c08393898>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c08393898>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c08393898>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c08393898>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c08393898>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c07e17a58>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c07e1a488>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c08393898>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c08393898>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07e17a20>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c08393898>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07e17a20>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07e17a20>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c07e17748>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of test_object_get_by_bucket __________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c07df9160>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07df9160>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07df9160>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07df9160>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07df9160>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c07f6a198>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c07f5d908>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07df9160>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07df9160>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07f6a160>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07df9160>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07f6a160>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07f6a160>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c07f7def0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____________________ ERROR at setup of test_object_delete _____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c08167eb8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c08167eb8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c08167eb8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c08167eb8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c08167eb8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c07dc3ac8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c07dc8208>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c08167eb8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c08167eb8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07dc3a90>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c08167eb8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07dc3a90>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07dc3a90>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c07dc37b8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____________________ ERROR at setup of test_object_remove _____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c07c39128>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07c39128>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07c39128>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07c39128>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07c39128>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c07fda748>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c07fe8088>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07c39128>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07c39128>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07fda710>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07c39128>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07fda710>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07fda710>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c07fda438>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of test_object_remove_marker __________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c07fda898>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07fda898>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07fda898>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07fda898>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07fda898>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c084c9390>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c084d3fc8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07fda898>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07fda898>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c084c9358>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07fda898>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c084c9358>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c084c9358>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c084c9080>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________________ ERROR at setup of test_object_set_contents __________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c07d7fdd8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07d7fdd8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07d7fdd8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07d7fdd8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07d7fdd8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c07d8a7b8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c07db5a48>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07d7fdd8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07d7fdd8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07d8a780>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07d7fdd8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07d8a780>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07d8a780>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c07d8a4a8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________________ ERROR at setup of test_object_set_location __________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c07d9e208>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07d9e208>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07d9e208>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07d9e208>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07d9e208>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c07ca5be0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c07ca6708>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07d9e208>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07d9e208>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07ca5ba8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07d9e208>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07ca5ba8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07ca5ba8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c07ca58d0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________________ ERROR at setup of test_object_snapshot ____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c079d1cc0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c079d1cc0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c079d1cc0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c079d1cc0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c079d1cc0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c07b8c2e8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c07bae848>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c079d1cc0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c079d1cc0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07b8c2b0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c079d1cc0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07b8c2b0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07b8c2b0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c08502828>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________________ ERROR at setup of test_object_snapshot_deleted ________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c07964748>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07964748>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07964748>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07964748>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07964748>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c080adc50>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c08086e48>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07964748>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07964748>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c080adc18>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07964748>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c080adc18>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c080adc18>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c080ad940>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________________ ERROR at setup of test_bucket_sync_new_object _________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c07849e48>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07849e48>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07849e48>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07849e48>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07849e48>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c07a7e5f8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c07a43608>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07849e48>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07849e48>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07a7e5c0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07849e48>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07a7e5c0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07a7e5c0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c07a7e2e8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________________ ERROR at setup of test_bucket_sync_same_object ________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c07909f98>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07909f98>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07909f98>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07909f98>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07909f98>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c07af3748>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c07ad7888>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07909f98>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07909f98>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07af3710>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07909f98>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07af3710>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07af3710>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c07af3438>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
______________ ERROR at setup of test_bucket_sync_deleted_object _______________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c077f4518>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c077f4518>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c077f4518>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c077f4518>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c077f4518>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c07b490f0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c07b4ad48>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c077f4518>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c077f4518>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07b490b8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c077f4518>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07b490b8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07b490b8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c07b49b70>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_______________ ERROR at setup of test_bucket_sync_delete_extras _______________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c077341d0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c077341d0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c077341d0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c077341d0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c077341d0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c078a8a90>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c078873c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c077341d0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c077341d0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c078a8a58>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c077341d0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c078a8a58>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c078a8a58>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c078a8780>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
______________________ ERROR at setup of test_bucket_sync ______________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c07616c88>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07616c88>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07616c88>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07616c88>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07616c88>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c0785a710>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c07852548>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07616c88>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07616c88>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0785a7b8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07616c88>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0785a7b8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0785a7b8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c0785a128>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________________ ERROR at setup of test_bucket_sync_deleted __________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c079e8ba8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c079e8ba8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c079e8ba8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c079e8ba8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c079e8ba8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c07d3fd68>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c07d3b808>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c079e8ba8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c079e8ba8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07d3fd30>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c079e8ba8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07d3fd30>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07d3fd30>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c07d3fa58>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
______________________ ERROR at setup of test_object_copy ______________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c07507cc0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07507cc0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07507cc0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07507cc0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07507cc0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c07717a58>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c07715088>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07507cc0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07507cc0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c077179e8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07507cc0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c077179e8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c077179e8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c077172e8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________________ ERROR at setup of test_object_set_file ____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c07476ac8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07476ac8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07476ac8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07476ac8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07476ac8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c07986898>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c07983c48>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07476ac8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07476ac8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07986860>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07476ac8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07986860>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07986860>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c07986588>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________________ ERROR at setup of test_object_mimetype ____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c076fee80>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c076fee80>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c076fee80>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c076fee80>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c076fee80>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c075c2a20>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c075dbfc8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c076fee80>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c076fee80>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c075c29e8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c076fee80>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c075c29e8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c075c29e8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c075c2710>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________________ ERROR at setup of test_object_restore _____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c07318cc0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07318cc0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07318cc0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07318cc0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07318cc0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c07479e48>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c07453448>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07318cc0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07318cc0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07479e10>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07318cc0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07479e10>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07479e10>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c07479b38>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___________________ ERROR at setup of test_object_relink_all ___________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c07258da0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07258da0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07258da0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07258da0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07258da0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c075452e8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c07568c08>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07258da0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07258da0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c075452b0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07258da0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c075452b0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c075452b0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c0755ff98>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___________________ ERROR at setup of test_object_validation ___________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c0760acf8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0760acf8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c0760acf8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c0760acf8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0760acf8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c07586dd8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c07582a48>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0760acf8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0760acf8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07586ef0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c0760acf8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07586ef0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07586ef0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c07586860>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
______________________ ERROR at setup of test_bucket_tags ______________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c07382ba8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07382ba8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07382ba8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07382ba8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07382ba8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c07658898>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c07656e08>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07382ba8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c07382ba8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07658860>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c07382ba8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07658860>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c07658860>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c07658588>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___________________ ERROR at setup of test_fileinstance_get ____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c0704e208>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0704e208>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c0704e208>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c0704e208>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0704e208>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c073aa780>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c073b5a88>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0704e208>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0704e208>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c073aa748>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c0704e208>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c073aa748>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c073aa748>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c073aa470>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________________ ERROR at setup of test_fileinstance_get_by_uri ________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c06fc6ef0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06fc6ef0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06fc6ef0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06fc6ef0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06fc6ef0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c071feba8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c071c1cc8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06fc6ef0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06fc6ef0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c071feb70>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06fc6ef0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c071feb70>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c071feb70>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c071fe898>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________________ ERROR at setup of test_fileinstance_create __________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c06f73e80>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06f73e80>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06f73e80>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06f73e80>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06f73e80>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c06f87d30>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c06f89cc8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06f73e80>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06f73e80>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c06f87cf8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06f73e80>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c06f87cf8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c06f87cf8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c06f87a20>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_______________ ERROR at setup of test_fileinstance_set_contents _______________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c06f9ea90>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06f9ea90>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06f9ea90>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06f9ea90>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06f9ea90>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c070bc438>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c07093448>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06f9ea90>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06f9ea90>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c070bc400>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06f9ea90>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c070bc400>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c070bc400>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c070bc128>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
______________ ERROR at setup of test_fileinstance_copy_contents _______________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c06e49cc0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06e49cc0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06e49cc0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06e49cc0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06e49cc0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c06eab080>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c072fb508>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06e49cc0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06e49cc0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c06eab048>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06e49cc0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c06eab048>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c06eab048>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c072c4d30>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________ ERROR at setup of test_fileinstance_copy_contents_invalid ___________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c06df7550>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06df7550>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06df7550>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06df7550>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06df7550>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c06f379e8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c06f35508>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06df7550>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06df7550>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c06f379b0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06df7550>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c06f379b0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c06f379b0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c06f376d8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________________ ERROR at setup of test_fileinstance_send_file _________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c06c3e208>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06c3e208>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06c3e208>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06c3e208>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06c3e208>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c06f54b70>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c06f4ad48>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06c3e208>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06c3e208>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c06f54b38>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06c3e208>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c06f54b38>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c06f54b38>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c06f54630>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________________ ERROR at setup of test_fileinstance_validation ________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c06ec3780>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06ec3780>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06ec3780>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06ec3780>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06ec3780>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c0714ca58>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c0717b548>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06ec3780>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06ec3780>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0714ca20>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06ec3780>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0714ca20>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0714ca20>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c0714c748>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________________ ERROR at setup of test_object_version_tags __________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c06e2c588>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06e2c588>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06e2c588>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06e2c588>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06e2c588>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c06cee160>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c06ce9948>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06e2c588>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06e2c588>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c06cee128>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06e2c588>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c06cee128>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c06cee128>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c06ce4ef0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________________ ERROR at setup of test_multipart_creation ___________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c06b5ca90>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06b5ca90>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06b5ca90>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06b5ca90>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06b5ca90>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c06e52240>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c06e7fa88>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06b5ca90>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06b5ca90>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c06e524a8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06b5ca90>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c06e524a8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c06e524a8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c06e522b0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________________ ERROR at setup of test_multipart_last_part __________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c06b34e10>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06b34e10>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06b34e10>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06b34e10>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06b34e10>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c06c4f198>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c06c6a808>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06b34e10>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06b34e10>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c06c4f160>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06b34e10>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c06c4f160>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c06c4f160>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c06c79e48>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____________________ ERROR at setup of test_part_creation _____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c06b37ef0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06b37ef0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06b37ef0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06b37ef0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06b37ef0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c069f3b70>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c069f62c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06b37ef0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06b37ef0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c069f3b38>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06b37ef0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c069f3b38>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c069f3b38>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c069f3860>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________________ ERROR at setup of test_multipart_full _____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c068f45f8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c068f45f8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c068f45f8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c068f45f8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c068f45f8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c06bc2cc0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c06da8348>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c068f45f8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c068f45f8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c06bc2c88>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c068f45f8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c06bc2c88>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c06bc2c88>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c06bc29b0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________________ ERROR at setup of test_pyfs_initialize ____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c06925dd8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06925dd8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06925dd8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06925dd8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06925dd8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c068feeb8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c068eda08>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06925dd8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06925dd8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c068fee80>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06925dd8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c068fee80>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c068fee80>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c068feb38>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
______________________ ERROR at setup of test_pyfs_delete ______________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c06587240>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06587240>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06587240>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06587240>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06587240>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c0689e4e0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c0689a6c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06587240>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06587240>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0689e4a8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06587240>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0689e4a8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0689e4a8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c0689e1d0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___________________ ERROR at setup of test_pyfs_delete_fail ____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c067737b8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c067737b8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c067737b8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c067737b8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c067737b8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c0653d2e8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c06537f08>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c067737b8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c067737b8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0653d2b0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c067737b8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0653d2b0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0653d2b0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c06533f98>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_______________________ ERROR at setup of test_pyfs_save _______________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c06cb3160>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06cb3160>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06cb3160>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06cb3160>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06cb3160>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c06443b70>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c06445848>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06cb3160>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06cb3160>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c06443c88>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06cb3160>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c06443c88>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c06443c88>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c06443940>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of test_pyfs_save_failcleanup _________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c064219e8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c064219e8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c064219e8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c064219e8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c064219e8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c06418dd8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c06422e48>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c064219e8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c064219e8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c06418da0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c064219e8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c06418da0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c06418da0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c06418cc0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________________ ERROR at setup of test_pyfs_save_callback ___________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c064cd9e8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c064cd9e8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c064cd9e8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c064cd9e8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c064cd9e8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c06660da0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c0638d088>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c064cd9e8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c064cd9e8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c06660d68>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c064cd9e8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c06660d68>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c06660d68>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c06660a90>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___________________ ERROR at setup of test_pyfs_save_limits ____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c06349a90>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06349a90>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06349a90>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06349a90>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06349a90>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c064ce4e0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c064d8088>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06349a90>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06349a90>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c064ce4a8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06349a90>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c064ce4a8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c064ce4a8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c064ce1d0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
______________________ ERROR at setup of test_pyfs_update ______________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c062fdf60>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c062fdf60>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c062fdf60>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c062fdf60>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c062fdf60>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c063f59b0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c063fecc8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c062fdf60>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c062fdf60>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c063f5978>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c062fdf60>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c063f5978>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c063f5978>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c063f56a0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___________________ ERROR at setup of test_pyfs_update_fail ____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c06090e10>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06090e10>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06090e10>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06090e10>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06090e10>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c05fe8630>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c05fe9588>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06090e10>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c06090e10>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c05fe85f8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c06090e10>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c05fe85f8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c05fe85f8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c05fe8320>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________________ ERROR at setup of test_pyfs_send_file _____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c05e8f470>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05e8f470>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c05e8f470>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c05e8f470>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05e8f470>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c060954a8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c060a6488>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05e8f470>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05e8f470>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c06095470>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c05e8f470>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c06095470>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c06095470>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c06095198>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
______________ ERROR at setup of test_pyfs_send_file_for_download ______________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c05f61ba8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05f61ba8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c05f61ba8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c05f61ba8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05f61ba8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c05ee84a8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c05eea2c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05f61ba8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05f61ba8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c05ee8390>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c05f61ba8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c05ee8390>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c05ee8390>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c05ee8160>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____________ ERROR at setup of test_pyfs_send_file_xss_prevention _____________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c05d53d68>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05d53d68>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c05d53d68>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c05d53d68>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05d53d68>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c0618ea90>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c061a4408>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05d53d68>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05d53d68>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0618ea58>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c05d53d68>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0618ea58>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0618ea58>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c061bcc88>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________________ ERROR at setup of test_pyfs_send_file_fail __________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c05dfccf8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05dfccf8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c05dfccf8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c05dfccf8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05dfccf8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c05ceba58>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c05ce9f08>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05dfccf8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05dfccf8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c05ceba20>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c05dfccf8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c05ceba20>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c05ceba20>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c05ceb748>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_______________________ ERROR at setup of test_pyfs_copy _______________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c05c2ebe0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05c2ebe0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c05c2ebe0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c05c2ebe0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05c2ebe0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c05e8def0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c05e9b908>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05c2ebe0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05c2ebe0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c05e8deb8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c05c2ebe0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c05e8deb8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c05e8deb8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c05e8dbe0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of test_non_unicode_filename __________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c05aff240>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05aff240>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c05aff240>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c05aff240>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05aff240>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c05f0cb38>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c05f06f08>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05aff240>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05aff240>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c05f0cb00>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c05aff240>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c05f0cb00>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c05f0cb00>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c05f0c828>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________________ ERROR at setup of test_verify_checksum ____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c05b9ec18>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05b9ec18>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c05b9ec18>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c05b9ec18>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05b9ec18>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c05b827b8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c05b84608>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05b9ec18>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05b9ec18>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c05b82780>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c05b9ec18>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c05b82780>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c05b82780>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c05b824a8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________ ERROR at setup of test_schedule_checksum_verification _____________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c05e6def0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05e6def0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c05e6def0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c05e6def0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05e6def0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c05a86668>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c05a8e0c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05e6def0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05e6def0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c05a86630>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c05e6def0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c05a86630>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c05a86630>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c05a86358>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____________________ ERROR at setup of test_migrate_file ______________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c05888748>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05888748>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c05888748>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c05888748>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05888748>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c0588e588>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c0588ab88>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05888748>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05888748>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0588e550>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c05888748>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0588e550>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0588e550>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c0588e278>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of test_migrate_file_copyfail _________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c058582e8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c058582e8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c058582e8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c058582e8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c058582e8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c05851be0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c05861108>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c058582e8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c058582e8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c05851ba8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c058582e8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c05851ba8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c05851ba8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c05851668>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___________________ ERROR at setup of test_remove_file_data ____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c056a6dd8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c056a6dd8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c056a6dd8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c056a6dd8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c056a6dd8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c0595d0b8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c059428c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c056a6dd8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c056a6dd8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0595d080>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c056a6dd8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0595d080>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0595d080>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c05953cf8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________________ ERROR at setup of test_head __________________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c05bd6ba8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05bd6ba8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c05bd6ba8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c05bd6ba8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05bd6ba8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c05559be0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c055607c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05bd6ba8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05bd6ba8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c05559ba8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c05bd6ba8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c05559ba8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c05559ba8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c055598d0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________________ ERROR at setup of test_head_locked_deleted __________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c0571b6d8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0571b6d8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c0571b6d8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c0571b6d8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0571b6d8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c05402cc0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c05401e88>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0571b6d8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0571b6d8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c05402c88>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c0571b6d8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c05402c88>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c05402c88>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c054029e8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________________________ ERROR at setup of test_get __________________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c05364ef0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05364ef0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c05364ef0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c05364ef0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05364ef0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c056fc748>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c056ec1c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05364ef0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05364ef0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c056fc710>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c05364ef0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c056fc710>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c056fc710>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c056fc438>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____________________ ERROR at setup of test_get_versions ______________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c052a1198>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c052a1198>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c052a1198>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c052a1198>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c052a1198>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c05485ba8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c0606e388>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c052a1198>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c052a1198>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c05485b70>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c052a1198>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c05485b70>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c05485b70>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c05485898>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___________________ ERROR at setup of test_get_empty_bucket ____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c052ebd68>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c052ebd68>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c052ebd68>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c052ebd68>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c052ebd68>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c0546ca20>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c05475108>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c052ebd68>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c052ebd68>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0546c9e8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c052ebd68>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0546c9e8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0546c9e8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c0546c8d0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of test_post_bucket[None-401] _________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c05051278>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05051278>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c05051278>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c05051278>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05051278>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c05640710>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c05641b08>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05051278>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c05051278>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c056406d8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c05051278>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c056406d8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c056406d8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c05640400>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of test_post_bucket[auth-403] _________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c051596a0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c051596a0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c051596a0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c051596a0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c051596a0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c04f5d128>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c04f59788>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c051596a0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c051596a0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c04f5d0f0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c051596a0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c04f5d0f0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c04f5d0f0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c04f54dd8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_______________ ERROR at setup of test_post_bucket[location-200] _______________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c04e12eb8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c04e12eb8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c04e12eb8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c04e12eb8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c04e12eb8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c05241d30>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c05243688>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c04e12eb8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c04e12eb8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c05241cf8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c04e12eb8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c05241cf8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c05241cf8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c05241a20>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________________ ERROR at setup of test_get_location[None-405] _________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c050945f8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c050945f8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c050945f8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c050945f8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c050945f8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c04dcc9e8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c04dce788>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c050945f8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c050945f8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c04dcc9b0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c050945f8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c04dcc9b0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c04dcc9b0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c04dcc6d8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________________ ERROR at setup of test_get_location[auth-405] _________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c04c990f0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c04c990f0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c04c990f0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c04c990f0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c04c990f0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c04d41ba8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c05207288>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c04c990f0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c04c990f0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c04d41b70>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c04c990f0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c04d41b70>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c04d41b70>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c04d41898>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
______________ ERROR at setup of test_get_location[location-405] _______________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c04be7d30>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c04be7d30>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c04be7d30>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c04be7d30>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c04be7d30>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c04e662b0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c04e61588>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c04be7d30>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c04be7d30>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c04e66278>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c04be7d30>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c04e66278>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c04e66278>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c051d4f60>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_______________________ ERROR at setup of test_post_init _______________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c04a68eb8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c04a68eb8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c04a68eb8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c04a68eb8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c04a68eb8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c04d84780>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c04dab448>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c04a68eb8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c04a68eb8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c04d84748>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c04a68eb8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c04d84748>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c04d84748>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c04d84470>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of test_post_init_querystring _________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c049b3080>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c049b3080>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c049b3080>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c049b3080>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c049b3080>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c053b0128>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c053a5cc8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c049b3080>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c049b3080>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c053b00f0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c049b3080>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c053b00f0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c053b00f0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c053aedd8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of test_get_init_not_allowed __________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c0481af98>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0481af98>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c0481af98>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c0481af98>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0481af98>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c049eb860>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c049edcc8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0481af98>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0481af98>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c049eb940>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c0481af98>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c049eb940>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c049eb940>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c049ebb38>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________________ ERROR at setup of test_post_invalid_partsizes _________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c047adf28>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c047adf28>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c047adf28>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c047adf28>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c047adf28>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c04afdcc0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c064db688>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c047adf28>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c047adf28>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c04afdc88>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c047adf28>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c04afdc88>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c04afdc88>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c04afd9b0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___________________ ERROR at setup of test_post_size_limits ____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c04668080>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c04668080>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c04668080>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c04668080>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c04668080>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c049270b8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c04707648>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c04668080>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c04668080>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c04927080>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c04668080>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c04927080>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c04927080>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c04705d68>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________________ ERROR at setup of test_post_locked_bucket ___________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c044e72b0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c044e72b0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c044e72b0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c044e72b0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c044e72b0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c04596240>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c04598d48>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c044e72b0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c044e72b0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c04596208>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c044e72b0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c04596208>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c04596208>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c045bdef0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________________ ERROR at setup of test_post_invalidkey ____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c046c4c18>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c046c4c18>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c046c4c18>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c046c4c18>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c046c4c18>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c04473d68>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c04471d88>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c046c4c18>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c046c4c18>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c04473cf8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c046c4c18>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c04473cf8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c04473cf8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c04473668>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________________________ ERROR at setup of test_put __________________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c04526dd8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c04526dd8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c04526dd8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c04526dd8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c04526dd8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c04ba6518>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c04b9f548>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c04526dd8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c04526dd8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c04ba64e0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c04526dd8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c04ba64e0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c04ba64e0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c04ba6208>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____________________ ERROR at setup of test_put_not_found _____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c041a6a20>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c041a6a20>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c041a6a20>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c041a6a20>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c041a6a20>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c043ace80>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c043b6148>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c041a6a20>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c041a6a20>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c043ace48>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c041a6a20>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c043ace48>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c043ace48>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c043acb70>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________________ ERROR at setup of test_put_wrong_sizes ____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c040fe208>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c040fe208>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c040fe208>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c040fe208>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c040fe208>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c04498fd0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c0449bcc8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c040fe208>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c040fe208>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c04498f98>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c040fe208>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c04498f98>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c04498f98>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c04498cc0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___________________ ERROR at setup of test_put_ngfileupload ____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c040ab320>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c040ab320>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c040ab320>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c040ab320>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c040ab320>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c04219208>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c04221048>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c040ab320>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c040ab320>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c042191d0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c040ab320>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c042191d0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c042191d0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c0420aeb8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________________ ERROR at setup of test_put_invalid_part_number ________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c03e64eb8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c03e64eb8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c03e64eb8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c03e64eb8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c03e64eb8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c03ec1390>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c03eff488>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c03e64eb8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c03e64eb8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c03ec1358>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c03e64eb8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c03ec1358>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c03ec1358>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c03ec1048>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________________ ERROR at setup of test_put_completed_multipart ________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c03d4ec18>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c03d4ec18>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c03d4ec18>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c03d4ec18>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c03d4ec18>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c03f2cc88>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c03f314c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c03d4ec18>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c03d4ec18>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c03f2cc50>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c03d4ec18>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c03f2cc50>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c03f2cc50>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c03f2c978>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____________________ ERROR at setup of test_put_badstream _____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c03cbc7b8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c03cbc7b8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c03cbc7b8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c03cbc7b8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c03cbc7b8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c03d03828>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c03d05788>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c03cbc7b8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c03cbc7b8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c03d037f0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c03cbc7b8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c03d037f0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c03d037f0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c03d033c8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________________________ ERROR at setup of test_get __________________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c03bae6d8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c03bae6d8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c03bae6d8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c03bae6d8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c03bae6d8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c03e91fd0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c03e83948>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c03bae6d8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c03bae6d8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c03e91f98>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c03bae6d8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c03e91f98>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c03e91f98>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c03e91cc0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_______________________ ERROR at setup of test_get_empty _______________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c039e1ef0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c039e1ef0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c039e1ef0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c039e1ef0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c039e1ef0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c03a55208>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c04420788>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c039e1ef0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c039e1ef0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c03a551d0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c039e1ef0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c03a551d0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c03a551d0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c04403b00>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___________________ ERROR at setup of test_get_serialization ___________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c038c6ef0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c038c6ef0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c038c6ef0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c038c6ef0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c038c6ef0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c03d86438>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c03d93848>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c038c6ef0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c038c6ef0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c03d86400>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c038c6ef0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c03d86400>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c03d86400>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c03d86240>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________________ ERROR at setup of test_post_complete[None-404] ________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c037c5fd0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c037c5fd0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c037c5fd0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c037c5fd0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c037c5fd0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c039115f8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c0393ea88>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c037c5fd0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c037c5fd0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c039115c0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c037c5fd0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c039115c0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c039115c0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c039112e8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________________ ERROR at setup of test_post_complete[auth-404] ________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c03987e80>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c03987e80>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c03987e80>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c03987e80>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c03987e80>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c036d2f60>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c036de8c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c03987e80>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c03987e80>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c036d2f28>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c03987e80>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c036d2f28>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c036d2f28>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c036d2c50>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
______________ ERROR at setup of test_post_complete[objects-404] _______________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c0356c518>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0356c518>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c0356c518>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c0356c518>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0356c518>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c0372e978>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c0380a7c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0356c518>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0356c518>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0372e940>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c0356c518>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0372e940>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0372e940>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c0372e668>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_______________ ERROR at setup of test_post_complete[bucket-200] _______________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c0341ab70>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0341ab70>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c0341ab70>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c0341ab70>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0341ab70>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c038b7358>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c038b0808>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0341ab70>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0341ab70>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c038b7320>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c0341ab70>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c038b7320>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c038b7320>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c038a8fd0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
______________ ERROR at setup of test_post_complete[location-200] ______________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c03316c88>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c03316c88>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c03316c88>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c03316c88>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c03316c88>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c036b7278>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c036a0188>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c03316c88>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c03316c88>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c036b7240>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c03316c88>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c036b7240>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c036b7240>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c0368bf28>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________________ ERROR at setup of test_post_complete_fail ___________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c031bfbe0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c031bfbe0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c031bfbe0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c031bfbe0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c031bfbe0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c0335a7f0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c0335f2c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c031bfbe0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c031bfbe0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0335a710>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c031bfbe0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0335a710>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0335a710>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c0335a4e0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of test_post_complete_timeout _________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c0310e470>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0310e470>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c0310e470>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c0310e470>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0310e470>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c03120898>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c03116148>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0310e470>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0310e470>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c03120828>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c0310e470>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c03120828>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c03120828>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c031205c0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________________________ ERROR at setup of test_delete _________________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c02fc7e10>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c02fc7e10>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c02fc7e10>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c02fc7e10>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c02fc7e10>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c02fc9ef0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c02fd3888>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c02fc7e10>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c02fc7e10>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c02fc9eb8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c02fc7e10>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c02fc9eb8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c02fc9eb8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c02fc9be0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________________ ERROR at setup of test_delete_invalid _____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c02df90f0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c02df90f0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c02df90f0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c02df90f0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c02df90f0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c0317fac8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c0314fb08>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c02df90f0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c02df90f0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0317fa90>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c02df90f0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0317fa90>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0317fa90>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c0317f7b8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________________ ERROR at setup of test_delete_init_not_allowed ________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c02d3da58>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c02d3da58>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c02d3da58>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c02d3da58>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c02d3da58>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c02d527f0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c02d53788>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c02d3da58>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c02d3da58>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c02d527b8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c02d3da58>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c02d527b8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c02d527b8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c02d524e0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________________ ERROR at setup of test_get_listuploads ____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c030bfb70>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c030bfb70>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c030bfb70>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c030bfb70>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c030bfb70>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c03087400>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c030809c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c030bfb70>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c030bfb70>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c030873c8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c030bfb70>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c030873c8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c030873c8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c030870f0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________ ERROR at setup of test_already_exhausted_input_stream _____________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c02cf7780>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c02cf7780>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c02cf7780>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c02cf7780>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c02cf7780>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c02e11588>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c02e36488>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c02cf7780>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c02cf7780>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c02e11550>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c02cf7780>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c02e11550>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c02e11550>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c02e11278>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____________________ ERROR at setup of test_get_not_found _____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c02a0b828>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c02a0b828>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c02a0b828>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c02a0b828>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c02a0b828>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c02a18a90>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c02a1c388>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c02a0b828>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c02a0b828>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c02a18a58>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c02a0b828>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c02a18a58>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c02a18a58>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c02a18780>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________________________ ERROR at setup of test_get __________________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c02ac9550>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c02ac9550>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c02ac9550>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c02ac9550>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c02ac9550>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c029351d0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c02930688>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c02ac9550>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c02ac9550>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c02935198>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c02ac9550>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c02935198>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c02935198>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c02923e80>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____________________ ERROR at setup of test_get_download ______________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c026bed30>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c026bed30>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c026bed30>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c026bed30>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c026bed30>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c026e3b70>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c026e90c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c026bed30>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c026bed30>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c026e3b38>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c026bed30>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c026e3b38>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c026e3b38>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c026e3860>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____________ ERROR at setup of test_last_modified_utc_conversion ______________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c0258ecf8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0258ecf8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c0258ecf8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c0258ecf8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0258ecf8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c02c0c7f0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c02c01ec8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0258ecf8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0258ecf8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c02c0c7b8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c0258ecf8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c02c0c7b8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c02c0c7b8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c02c0c4e0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________________ ERROR at setup of test_get_unreadable_file __________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c023eda90>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c023eda90>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c023eda90>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c023eda90>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c023eda90>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c024a4710>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c02829188>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c023eda90>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c023eda90>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c024a46d8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c023eda90>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c024a46d8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c024a46d8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c024a4400>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____________________ ERROR at setup of test_get_versions ______________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c02250f28>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c02250f28>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c02250f28>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c02250f28>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c02250f28>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c0276d940>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c027728c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c02250f28>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c02250f28>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0276d470>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c02250f28>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0276d470>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0276d470>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c0276d748>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of test_get_versions_invalid __________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c0211de48>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0211de48>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c0211de48>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c0211de48>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0211de48>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c023a5f28>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c02392448>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0211de48>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c0211de48>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c023a5fd0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c0211de48>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c023a5fd0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c023a5fd0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c023a5b70>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________________ ERROR at setup of test_post __________________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c024d5358>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c024d5358>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c024d5358>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c024d5358>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c024d5358>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c0206f470>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c0206c708>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c024d5358>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c024d5358>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0206f438>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c024d5358>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0206f438>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0206f438>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c0206f160>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________________________ ERROR at setup of test_put __________________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c01e99be0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c01e99be0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c01e99be0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c01e99be0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c01e99be0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c021ac0b8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c021af048>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c01e99be0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c01e99be0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c021ac080>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c01e99be0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c021ac080>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c021ac080>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c021b8d68>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________________ ERROR at setup of test_put_versioning _____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c01d5b630>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c01d5b630>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c01d5b630>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c01d5b630>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c01d5b630>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c020daa58>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c020de708>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c01d5b630>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c01d5b630>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c020daa20>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c01d5b630>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c020daa20>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c020daa20>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c020da748>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____ ERROR at setup of test_put_file_size_errors[50-100-400-Bucket quota] _____

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c01c51eb8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c01c51eb8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c01c51eb8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c01c51eb8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c01c51eb8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c01c76908>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c01c77788>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c01c51eb8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c01c51eb8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c01c768d0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c01c51eb8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c01c768d0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c01c768d0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c01c765f8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__ ERROR at setup of test_put_file_size_errors[100-50-400-Maximum file size] ___

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c019d7cc0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c019d7cc0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c019d7cc0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c019d7cc0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c019d7cc0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c01cc8a90>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c01cc9b48>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c019d7cc0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c019d7cc0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c01cc8a58>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c019d7cc0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c01cc8a58>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c01cc8a58>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c01cc8780>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________ ERROR at setup of test_put_file_size_errors[100-100-200-None] _________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c01cd65f8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c01cd65f8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c01cd65f8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c01cd65f8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c01cd65f8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c01daeeb8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c01db53c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c01cd65f8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c01cd65f8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c01daee80>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c01cd65f8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c01daee80>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c01daee80>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c01daeba8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_______ ERROR at setup of test_put_file_size_errors[None-None-200-None] ________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c017c0e48>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c017c0e48>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c017c0e48>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c017c0e48>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c017c0e48>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c01ac8ac8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c01ad3888>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c017c0e48>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c017c0e48>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c01ac8a90>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c017c0e48>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c01ac8a90>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c01ac8a90>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c01ac87b8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________________ ERROR at setup of test_put_invalid_key ____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c016a2e48>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c016a2e48>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c016a2e48>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c016a2e48>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c016a2e48>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c01754470>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c01747ac8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c016a2e48>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c016a2e48>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c01754438>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c016a2e48>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c01754438>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c01754438>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c01754160>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____________________ ERROR at setup of test_put_zero_size _____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c01aadef0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c01aadef0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c01aadef0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c01aadef0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c01aadef0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c017b9e80>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c017bbe08>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c01aadef0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c01aadef0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c017b9e48>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c01aadef0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c017b9e48>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c017b9e48>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c017b9b70>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
__________________ ERROR at setup of test_put_deleted_locked ___________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c013f3588>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c013f3588>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c013f3588>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c013f3588>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c013f3588>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c016f1d30>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c016eeb48>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c013f3588>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c013f3588>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c016f1cf8>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c013f3588>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c016f1cf8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c016f1cf8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c016f1a20>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_______________________ ERROR at setup of test_put_error _______________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c016f1e48>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c016f1e48>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c016f1e48>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c016f1e48>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c016f1e48>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c0134bf28>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c01348c08>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c016f1e48>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c016f1e48>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0134bef0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c016f1e48>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0134bef0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c0134bef0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c0134bc18>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___________________ ERROR at setup of test_put_multipartform ___________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c010fb0f0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c010fb0f0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c010fb0f0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c010fb0f0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c010fb0f0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c011405f8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c01143548>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c010fb0f0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c010fb0f0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c011405c0>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c010fb0f0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c011405c0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c011405c0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c011402e8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
______________ ERROR at setup of test_delete_versions_head_reset _______________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c00ff7160>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c00ff7160>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c00ff7160>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c00ff7160>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c00ff7160>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c01582a58>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c01596d08>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c00ff7160>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c00ff7160>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c01582a20>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c00ff7160>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c01582a20>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c01582a20>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c01582748>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of test_delete_locked_deleted _________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c00edfa90>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c00edfa90>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c00edfa90>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c00edfa90>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c00edfa90>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c01125160>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c01118848>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c00edfa90>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c00edfa90>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c01125128>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c00edfa90>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c01125128>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c01125128>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c0111beb8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___________________ ERROR at setup of test_delete_unwritable ___________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c00cdad30>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c00cdad30>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c00cdad30>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c00cdad30>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c00cdad30>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c00f83d68>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c00f92cc8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c00cdad30>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c00cdad30>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c00f83d30>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c00cdad30>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c00f83d30>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c00f83d30>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c00f83a58>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________________ ERROR at setup of test_put_header_tags ____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c01394438>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c01394438>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c01394438>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c01394438>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c01394438>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c00f2fcc0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c00f305c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c01394438>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c01394438>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c00f2fc88>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c01394438>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c00f2fc88>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c00f2fc88>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c00f2f9b0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________________ ERROR at setup of test_put_header_invalid_tags ________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7f6c009dd198>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c009dd198>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c009dd198>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c009dd198>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c009dd198>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7f6c00c82e48>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7f6c00c88408>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c009dd198>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7f6c009dd198>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c00c82e10>
pool = <sqlalchemy.pool.QueuePool object at 0x7f6c009dd198>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c00c82e10>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7f6c00c82e10>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f6c00c82a90>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.yield_fixture()
    def db(app):
        """Get setup database."""
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
=============================== warnings summary ===============================
tests/test_admin.py::test_admin_views
  /code/modules/invenio-files-rest/.tox/c1/lib/python3.6/site-packages/pkg_resources/_vendor/packaging/specifiers.py:276: DeprecationWarning: Creating a LegacyVersion has been deprecated and will be removed in the next major release
    DeprecationWarning,

tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_default
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_location_validation
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_removal
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_kwargs_creation
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_create_object
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_bucket_retrieval
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_create_with_fileid
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_multibucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_get_by_bucket
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_delete
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_remove_marker
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_contents
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_set_location
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_object_snapshot_deleted
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_new_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_same_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_deleted_object
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync_delete_extras
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_bucket_sync_deleted
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_copy
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_set_file
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_mimetype
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_restore
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_relink_all
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_object_validation
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_bucket_tags
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_get_by_uri
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_create
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_set_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_copy_contents_invalid
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_send_file
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_fileinstance_validation
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models.py::test_object_version_tags
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_creation
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_multipart_last_part
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_part_creation
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_models_multipart.py::test_multipart_full
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_serializer.py::test_serialize_pretty
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_initialize
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_delete_fail
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_failcleanup
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_callback
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_save_limits
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_update_fail
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_for_download
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_xss_prevention
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_send_file_fail
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_pyfs_copy
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_storage.py::test_non_unicode_filename
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_verify_checksum
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_schedule_checksum_verification
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_migrate_file_copyfail
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_tasks.py::test_remove_file_data
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_head_locked_deleted
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_versions
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_bucket.py::test_get_empty_bucket
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[None-401]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[auth-403]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_post_bucket[location-200]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[None-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[auth-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_location.py::test_get_location[location-405]
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_post_init_querystring
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_get_init_not_allowed
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_invalid_partsizes
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_size_limits
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_locked_bucket
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_post_invalidkey
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_not_found
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_wrong_sizes
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_ngfileupload
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_invalid_part_number
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_completed_multipart
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_put_badstream
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_empty
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_get_serialization
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[None-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[auth-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[objects-404]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[bucket-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete[location-200]
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_fail
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_post_complete_timeout
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_invalid
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_delete_init_not_allowed
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_get_listuploads
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_multipart.py::test_already_exhausted_input_stream
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get_not_found
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_get_download
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_last_modified_utc_conversion
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_unreadable_file
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_get_versions_invalid
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_post
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_versioning
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None]
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_invalid_key
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_zero_size
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_deleted_locked
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_error
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_put_multipartform
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_versions_head_reset
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_locked_deleted
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_delete_unwritable
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
tests/test_views_objectversion.py::test_put_header_invalid_tags
  /code/modules/invenio-files-rest/.tox/c1/lib/python3.6/site-packages/pkg_resources/_vendor/packaging/version.py:114: DeprecationWarning: Creating a LegacyVersion has been deprecated and will be removed in the next major release
    DeprecationWarning,

-- Docs: https://docs.pytest.org/en/latest/warnings.html

---------- coverage: platform linux, python 3.6.15-final-0 -----------
Name                                     Stmts   Miss Branch BrPart  Cover
--------------------------------------------------------------------------
invenio_files_rest/__init__.py               6      0      0      0   100%
invenio_files_rest/admin.py                131     17     38      7    79%
invenio_files_rest/api.py                   22     14      2      0    33%
invenio_files_rest/app.py                    6      0      2      0   100%
invenio_files_rest/cli.py                   34     14      2      0    56%
invenio_files_rest/config.py                31      0      0      0   100%
invenio_files_rest/errors.py                66      6     44      0    93%
invenio_files_rest/ext.py                   54     18     20      1    64%
invenio_files_rest/formparser.py            18      4     10      1    75%
invenio_files_rest/helpers.py              108     64     46      0    34%
invenio_files_rest/limiters.py              27      1     14      0    98%
invenio_files_rest/models.py               643    376    174     15    37%
invenio_files_rest/permissions.py           53     23     18      0    42%
invenio_files_rest/proxies.py                7      0      4      2    82%
invenio_files_rest/serializer.py           141     61     48      3    50%
invenio_files_rest/signals.py                7      0      0      0   100%
invenio_files_rest/storage/__init__.py       5      0      0      0   100%
invenio_files_rest/storage/base.py          88     44     24      0    45%
invenio_files_rest/storage/pyfs.py         120     87     28      0    24%
invenio_files_rest/tasks.py                141    105     50      0    19%
invenio_files_rest/utils.py                 82     61     26      0    19%
invenio_files_rest/version.py                3      0      0      0   100%
invenio_files_rest/views.py                336    213    126      7    30%
invenio_files_rest/wrappers.py               6      0      2      0   100%
--------------------------------------------------------------------------
TOTAL                                     2135   1108    678     36    43%
Coverage XML written to file coverage.xml

====== 10 passed, 2 skipped, 15601 warnings, 129 error in 158.92 seconds =======
ERROR: InvocationError for command /code/modules/invenio-files-rest/.tox/c1/bin/pytest --cov=invenio_files_rest tests -v --cov-branch --cov-report=term --cov-report=xml --basetemp=/code/modules/invenio-files-rest/.tox/c1/tmp (exited with code 1)
___________________________________ summary ____________________________________
ERROR:   c1: commands failed
