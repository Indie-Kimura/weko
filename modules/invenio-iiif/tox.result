GLOB sdist-make: /code/modules/invenio-iiif/setup.py
c1 inst-nodeps: /code/modules/invenio-iiif/.tox/.tmp/package/1/invenio-iiif-1.0.0a4.zip
c1 installed: alabaster==0.7.13,alembic==0.9.6,amqp==2.6.0,angular-gettext-babel==0.3,aniso8601==8.0.0,arrow==0.12.1,asn1crypto==0.23.0,atomicwrites==1.4.1,attrs==17.4.0,b2handle==1.1.2,Babel==2.5.1,bagit==1.7.0,beautifulsoup4==4.9.3,bibtexparser==1.0.1,billiard==3.6.3.0,binaryornot==0.4.4,bleach==3.1.0,blinker==1.4,boto3==1.7.84,botocore==1.10.84,cachelib==0.1,cachetools==4.2.4,cchardet==2.1.1,celery==4.4.4,certifi==2017.11.5,cffi==1.11.2,chardet==3.0.4,citeproc-py==0.5.1,citeproc-py-styles==0.1.2,click==6.7,cookiecutter==1.6.0,counter-robots==2018.6,coverage==6.2,cryptography==2.1.4,datacite==1.0.1,DateTime==4.9,decorator==4.1.2,defusedxml==0.5.0,dictdiffer==0.7.0,distlib==0.3.6,dnspython==2.2.1,docutils==0.18.1,dojson==1.3.2,elasticsearch==6.1.1,elasticsearch-dsl==6.4.0,elementpath==1.0.6,email-validator==1.0.5,entrypoints==0.2.3,feedgen==0.7.0,filelock==3.4.1,Flask==1.1.0,Flask-Admin==1.5.3,Flask-Alembic==2.0.1,Flask-Assets==0.12,Flask-BabelEx==0.9.4,Flask-Breadcrumbs==0.5.0,Flask-Caching==1.10.1,Flask-CeleryExt==0.3.4,Flask-Collect==1.2.2,Flask-Cors==3.0.3,Flask-DebugToolbar==0.13.1,Flask-IIIF==0.6.1,Flask-KVSession==0.6.2,Flask-Limiter==1.1.0,Flask-Login==0.4.1,Flask-Mail==0.9.1,flask-marshmallow==0.14.0,Flask-Menu==0.6.0,-e git+https://github.com/RCOSDP/flask-oauthlib.git@83148ee01e9da37a8a1134febe83bc32b95bac6e#egg=Flask_OAuthlib,Flask-Plugins==1.6.1,Flask-Principal==0.4.0,Flask-RESTful==0.3.8,Flask-Security==3.0.0,flask-shell-ipython==0.4.1,Flask-Sitemap==0.4.0,Flask-SQLAlchemy==2.3.2,flask-talisman==0.4.1,Flask-WTF==0.14.3,-e git+https://github.com/RCOSDP/pyfpdf.git@f9b032148283d535cabc7789858081c80de36fef#egg=fpdf,frozendict==2.3.8,fs==0.5.4,ftfy==4.4.3,future==0.16.0,github3.py==1.1.0,html5lib==1.0.1,idna==2.6,iiif-prezi==0.3.0,imagesize==1.4.1,importlib-metadata==4.8.3,importlib-resources==5.4.0,infinity==1.4,intervals==0.8.0,invenio-access==1.1.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_accounts&subdirectory=modules/invenio-accounts,invenio-admin==1.1.2,invenio-app==1.1.0,invenio-assets==1.0.0,invenio-base==1.0.2,invenio-cache==1.0.0,invenio-celery==1.1.3,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_communities&subdirectory=modules/invenio-communities,invenio-config==1.0.0,invenio-csl-rest==1.0.0a1,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_db&subdirectory=modules/invenio-db,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_deposit&subdirectory=modules/invenio-deposit,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_files_rest&subdirectory=modules/invenio-files-rest,invenio-formatter==1.0.0b3,invenio-i18n==1.0.0,invenio-iiif @ file:///code/modules/invenio-iiif/.tox/.tmp/package/1/invenio-iiif-1.0.0a4.zip,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_indexer&subdirectory=modules/invenio-indexer,invenio-jsonschemas==1.0.0,invenio-logging==1.0.0b3,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_mail&subdirectory=modules/invenio-mail,invenio-marc21==1.0.0a8,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_oaiharvester&subdirectory=modules/invenio-oaiharvester,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_oaiserver&subdirectory=modules/invenio-oaiserver,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_oauth2server&subdirectory=modules/invenio-oauth2server,invenio-oauthclient==1.0.0,invenio-pidrelations==1.0.0a4,invenio-pidstore==1.0.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_previewer&subdirectory=modules/invenio-previewer,invenio-query-parser==0.6.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_queues&subdirectory=modules/invenio-queues,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_records&subdirectory=modules/invenio-records,invenio-records-files==1.0.0a10,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_records_rest&subdirectory=modules/invenio-records-rest,invenio-records-ui==1.0.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_resourcesyncclient&subdirectory=modules/invenio-resourcesyncclient,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_resourcesyncserver&subdirectory=modules/invenio-resourcesyncserver,invenio-rest==1.1.2,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_s3&subdirectory=modules/invenio-s3,-e git+https://github.com/RCOSDP/invenio-search.git@cff9744c5dc651893a9c51672c5b8da9adc21e16#egg=invenio_search,-e git+https://github.com/RCOSDP/invenio-search-ui.git@74bd3b2990ff27b39e01b6b31be9a0b5fda3dd0f#egg=invenio_search_ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=invenio_stats&subdirectory=modules/invenio-stats,invenio-theme==1.0.0b4,ipaddress==1.0.19,ipython==6.2.1,ipython-genutils==0.2.0,itsdangerous==0.24,jedi==0.11.0,Jinja2==2.10.1,jinja2-cli==0.6.0,jinja2-time==0.2.0,jmespath==0.10.0,jsmin==2.2.2,jsonpatch==1.21,jsonpath-ng==1.5.2,jsonpointer==1.14,jsonref==0.1,jsonresolver==0.2.1,jsonschema==2.6.0,jupyter-client==5.2.2,jupyter-core==4.4.0,-e git+https://github.com/RCOSDP/kombu.git@f204fdf078d5e94393c86693f545e2d011f620f5#egg=kombu,limits==1.2.1,lxml==4.1.1,Mako==1.0.7,MarkupSafe==1.1.1,marshmallow==2.20.1,marshmallow-sqlalchemy==0.23.1,maxminddb==1.5.2,maxminddb-geolite2==2017.803,mistune==0.8.3,mock==5.0.2,more-itertools==8.10.0,msgpack==0.6.2,nbconvert==5.3.1,nbformat==4.4.0,netaddr==0.8.0,node-semver==0.1.1,numpy==1.16.1,oauthlib==2.1.0,ordereddict==1.1,packaging==21.3,pandocfilters==1.4.2,parso==0.1.0,passlib==1.7.1,pbr==5.11.1,pexpect==4.3.0,pickleshare==0.7.4,Pillow==5.4.1,platformdirs==2.4.0,pluggy==0.13.1,ply==3.11,poyo==0.4.1,prompt-toolkit==1.0.15,psycopg2==2.7.3.2,ptyprocess==0.5.2,py==1.11.0,pycparser==2.18,Pygments==2.2.0,PyJWT==1.5.3,PyLD==2.0.3,pyparsing==3.1.0,-e git+https://github.com/RCOSDP/PyPDF2.git@fefc684a3a74aff6f99e5dff24f9b4dd1c95169d#egg=PyPDF2,pyPEG2==2.15.2,pytest==4.2.0,pytest-cov==2.9.0,python-dateutil==2.6.1,python-editor==1.0.3,python-geoip==1.2,pytz==2017.3,pyzmq==17.0.0,redis==2.10.6,requests==2.18.4,requests-oauthlib==1.1.0,resync==1.0.9,s3fs==0.1.6,s3transfer==0.1.13,selenium==3.141.0,Sickle==0.6.4,simplegeneric==0.8.1,simplejson==3.12.0,simplekv==0.11.2,six==1.16.0,snowballstemmer==2.2.0,soupsieve==2.3.2.post1,speaklater==1.3,Sphinx==1.8.4,sphinxcontrib-serializinghtml==1.1.5,sphinxcontrib-websupport==1.2.4,SQLAlchemy==1.2.19,SQLAlchemy-Continuum==1.3.6,SQLAlchemy-Utils==0.35.0,stevedore==3.5.2,sword3common==0.1.1,testpath==0.3.1,toml==0.10.2,tornado==4.5.3,tox==3.28.0,traitlets==4.3.2,typing_extensions==4.1.1,ua-parser==0.7.3,uritemplate==4.1.1,uritools==2.1.0,urllib3==1.22,uWSGI==2.0.21,uwsgitop==0.11,validators==0.12.0,vine==1.3.0,virtualenv==20.17.1,virtualenv-clone==0.5.7,virtualenvwrapper==4.8.4,Wand==0.6.1,wcwidth==0.1.7,webargs==5.5.2,webassets==0.12.1,webencodings==0.5.1,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_accounts&subdirectory=modules/weko-accounts,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_admin&subdirectory=modules/weko-admin,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_authors&subdirectory=modules/weko-authors,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_bulkupdate&subdirectory=modules/weko-bulkupdate,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_deposit&subdirectory=modules/weko-deposit,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_gridlayout&subdirectory=modules/weko-gridlayout,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_groups&subdirectory=modules/weko-groups,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_handle&subdirectory=modules/weko-handle,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_index_tree&subdirectory=modules/weko-index-tree,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_indextree_journal&subdirectory=modules/weko-indextree-journal,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_items_autofill&subdirectory=modules/weko-items-autofill,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_items_ui&subdirectory=modules/weko-items-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_itemtypes_ui&subdirectory=modules/weko-itemtypes-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_logging&subdirectory=modules/weko-logging,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_records&subdirectory=modules/weko-records,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_records_ui&subdirectory=modules/weko-records-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_redis&subdirectory=modules/weko-redis,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_schema_ui&subdirectory=modules/weko-schema-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_search_ui&subdirectory=modules/weko-search-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_sitemap&subdirectory=modules/weko-sitemap,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_swordserver&subdirectory=modules/weko-swordserver,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_theme&subdirectory=modules/weko-theme,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_user_profiles&subdirectory=modules/weko-user-profiles,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@cc282f31e20f81b3e444dfa809d9ea68cbf525c6#egg=weko_workflow&subdirectory=modules/weko-workflow,Werkzeug==0.15.2,whichcraft==0.4.1,WTForms==2.1,WTForms-Alchemy==0.16.5,WTForms-Components==0.10.3,xmlschema==0.9.30,xmltodict==0.12.0,zipp==3.6.0,zope.interface==5.5.2
c1 run-test-pre: PYTHONHASHSEED='669790578'
c1 run-test: commands[0] | pytest --cov=invenio_iiif tests -v -vv -s --cov-branch --cov-report=term --cov-report=xml --cov-report=html --basetemp=/code/modules/invenio-iiif/.tox/c1/tmp
============================= test session starts ==============================
platform linux -- Python 3.6.15, pytest-4.2.0, py-1.11.0, pluggy-0.13.1 -- /code/modules/invenio-iiif/.tox/c1/bin/python
cachedir: .tox/c1/.pytest_cache
rootdir: /code/modules/invenio-iiif, inifile:
plugins: celery-4.4.4, cov-2.9.0
collecting ... collected 21 items

tests/test_handlers.py::test_protect_api ERROR
tests/test_handlers.py::test_image_opener ERROR
tests/test_invenio_iiif.py::test_version PASSED
tests/test_invenio_iiif.py::test_init PASSED
tests/test_manifest.py::TestIIIFMetadata::test_init ERROR
tests/test_manifest.py::TestIIIFManifest::test_init ERROR
tests/test_manifest.py::TestIIIFManifest::test_dumps ERROR
tests/test_previewer.py::test_previewable_extensions PASSED
tests/test_previewer.py::test_can_preview PASSED
tests/test_previewer.py::test_preview ERROR
tests/test_tasks.py::test_create_thumbnail FAILED
tests/test_utils.py::test_iiif_image_key ERROR
tests/test_utils.py::test_ui_iiif_image_url ERROR
tests/test_views.py::test_get_image ERROR
tests/test_views.py::test_image_info ERROR
tests/test_views.py::test_get_restricted_image ERROR
tests/test_views.py::test_get_restricted_image_info ERROR
tests/test_views.py::test_create_blueprint_from_app ERROR
tests/test_views.py::test_create_blueprint PASSED
tests/test_views.py::test_create_url_rule PASSED
tests/test_views.py::test_manifest_view ERROR

==================================== ERRORS ====================================
______________________ ERROR at setup of test_protect_api ______________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fce4c61fe80>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4c61fe80>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fce4c61fe80>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fce4c61fe80>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4c61fe80>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fce4c61ffd0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fce4c6364c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4c61fe80>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4c61fe80>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fce4c61f1d0>
pool = <sqlalchemy.pool.QueuePool object at 0x7fce4c61fe80>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fce4c61f1d0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fce4c61f1d0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fce4c6a2cf8>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'test_invenio_iiif_app'>

    @pytest.yield_fixture()
    def db(app):
        # if not database_exists(str(db_.engine.url)) and \
        #         app.config['SQLALCHEMY_DATABASE_URI'] != 'sqlite://':
        #     create_database(db_.engine.url)
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_____________________ ERROR at setup of test_image_opener ______________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fce4c237940>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4c237940>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fce4c237940>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fce4c237940>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4c237940>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fce4c237b38>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fce4c6b7288>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4c237940>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4c237940>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fce4c237b00>
pool = <sqlalchemy.pool.QueuePool object at 0x7fce4c237940>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fce4c237b00>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fce4c237b00>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fce4c237358>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'test_invenio_iiif_app'>

    @pytest.yield_fixture()
    def db(app):
        # if not database_exists(str(db_.engine.url)) and \
        #         app.config['SQLALCHEMY_DATABASE_URI'] != 'sqlite://':
        #     create_database(db_.engine.url)
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of TestIIIFMetadata.test_init _________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fce4c1925c0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4c1925c0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fce4c1925c0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fce4c1925c0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4c1925c0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fce4c1924a8>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fce4c19c0c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4c1925c0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4c1925c0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fce4c192470>
pool = <sqlalchemy.pool.QueuePool object at 0x7fce4c1925c0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fce4c192470>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fce4c192470>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fce4c192550>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'test_invenio_iiif_app'>

    @pytest.yield_fixture()
    def db(app):
        # if not database_exists(str(db_.engine.url)) and \
        #         app.config['SQLALCHEMY_DATABASE_URI'] != 'sqlite://':
        #     create_database(db_.engine.url)
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of TestIIIFManifest.test_init _________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fce4c3a9860>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4c3a9860>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fce4c3a9860>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fce4c3a9860>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4c3a9860>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fce4c3a9a58>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fce4c3a3808>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4c3a9860>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4c3a9860>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fce4c3a9a20>
pool = <sqlalchemy.pool.QueuePool object at 0x7fce4c3a9860>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fce4c3a9a20>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fce4c3a9a20>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fce4c3a9748>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'test_invenio_iiif_app'>

    @pytest.yield_fixture()
    def db(app):
        # if not database_exists(str(db_.engine.url)) and \
        #         app.config['SQLALCHEMY_DATABASE_URI'] != 'sqlite://':
        #     create_database(db_.engine.url)
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________________ ERROR at setup of TestIIIFManifest.test_dumps _________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fce4c0f20f0>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4c0f20f0>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fce4c0f20f0>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fce4c0f20f0>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4c0f20f0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fce4c0f22b0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fce4c1bde88>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4c0f20f0>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4c0f20f0>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fce4c0f2278>
pool = <sqlalchemy.pool.QueuePool object at 0x7fce4c0f20f0>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fce4c0f2278>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fce4c0f2278>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fce4c0f2160>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'test_invenio_iiif_app'>

    @pytest.yield_fixture()
    def db(app):
        # if not database_exists(str(db_.engine.url)) and \
        #         app.config['SQLALCHEMY_DATABASE_URI'] != 'sqlite://':
        #     create_database(db_.engine.url)
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
________________________ ERROR at setup of test_preview ________________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fce4c025908>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4c025908>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fce4c025908>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fce4c025908>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4c025908>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fce4c025a58>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fce4c003508>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4c025908>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4c025908>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fce4c025a20>
pool = <sqlalchemy.pool.QueuePool object at 0x7fce4c025908>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fce4c025a20>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fce4c025a20>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fce4c0257f0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'test_invenio_iiif_app'>

    @pytest.yield_fixture()
    def db(app):
        # if not database_exists(str(db_.engine.url)) and \
        #         app.config['SQLALCHEMY_DATABASE_URI'] != 'sqlite://':
        #     create_database(db_.engine.url)
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
____________________ ERROR at setup of test_iiif_image_key _____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fce4c30c128>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4c30c128>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fce4c30c128>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fce4c30c128>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4c30c128>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fce4c30c320>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fce4c2ff948>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4c30c128>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4c30c128>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fce4c30c2e8>
pool = <sqlalchemy.pool.QueuePool object at 0x7fce4c30c128>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fce4c30c2e8>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fce4c30c2e8>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fce4c31cfd0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'test_invenio_iiif_app'>

    @pytest.yield_fixture()
    def db(app):
        # if not database_exists(str(db_.engine.url)) and \
        #         app.config['SQLALCHEMY_DATABASE_URI'] != 'sqlite://':
        #     create_database(db_.engine.url)
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
___________________ ERROR at setup of test_ui_iiif_image_url ___________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fce4c3f9898>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4c3f9898>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fce4c3f9898>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fce4c3f9898>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4c3f9898>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fce4c0ffb38>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fce4c65b548>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4c3f9898>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4c3f9898>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fce4c0ff9b0>
pool = <sqlalchemy.pool.QueuePool object at 0x7fce4c3f9898>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fce4c0ff9b0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fce4c0ff9b0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fce4c3f9780>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'test_invenio_iiif_app'>

    @pytest.yield_fixture()
    def db(app):
        # if not database_exists(str(db_.engine.url)) and \
        #         app.config['SQLALCHEMY_DATABASE_URI'] != 'sqlite://':
        #     create_database(db_.engine.url)
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_______________________ ERROR at setup of test_get_image _______________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fce4beb9d30>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4beb9d30>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fce4beb9d30>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fce4beb9d30>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4beb9d30>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fce4beb9f28>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fce4c4c34c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4beb9d30>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4beb9d30>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fce4beb9ef0>
pool = <sqlalchemy.pool.QueuePool object at 0x7fce4beb9d30>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fce4beb9ef0>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fce4beb9ef0>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fce4beb9c18>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'test_invenio_iiif_app'>

    @pytest.yield_fixture()
    def db(app):
        # if not database_exists(str(db_.engine.url)) and \
        #         app.config['SQLALCHEMY_DATABASE_URI'] != 'sqlite://':
        #     create_database(db_.engine.url)
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
______________________ ERROR at setup of test_image_info _______________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fce4bd01a58>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4bd01a58>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fce4bd01a58>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fce4bd01a58>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4bd01a58>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fce4bd01c50>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fce4bd22448>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4bd01a58>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4bd01a58>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fce4bd01c18>
pool = <sqlalchemy.pool.QueuePool object at 0x7fce4bd01a58>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fce4bd01c18>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fce4bd01c18>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fce4bd01940>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'test_invenio_iiif_app'>

    @pytest.yield_fixture()
    def db(app):
        # if not database_exists(str(db_.engine.url)) and \
        #         app.config['SQLALCHEMY_DATABASE_URI'] != 'sqlite://':
        #     create_database(db_.engine.url)
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_________________ ERROR at setup of test_get_restricted_image __________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fce4bf1ed68>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4bf1ed68>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fce4bf1ed68>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fce4bf1ed68>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4bf1ed68>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fce4bf1ef60>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fce4bf01b08>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4bf1ed68>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4bf1ed68>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fce4bf1ef28>
pool = <sqlalchemy.pool.QueuePool object at 0x7fce4bf1ed68>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fce4bf1ef28>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fce4bf1ef28>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fce4bf1ec50>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'test_invenio_iiif_app'>

    @pytest.yield_fixture()
    def db(app):
        # if not database_exists(str(db_.engine.url)) and \
        #         app.config['SQLALCHEMY_DATABASE_URI'] != 'sqlite://':
        #     create_database(db_.engine.url)
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_______________ ERROR at setup of test_get_restricted_image_info _______________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fce4bec0ac8>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4bec0ac8>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fce4bec0ac8>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fce4bec0ac8>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4bec0ac8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fce4bec0cc0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fce4bef1b08>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4bec0ac8>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4bec0ac8>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fce4bec0c88>
pool = <sqlalchemy.pool.QueuePool object at 0x7fce4bec0ac8>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fce4bec0c88>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fce4bec0c88>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fce4bec09b0>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'test_invenio_iiif_app'>

    @pytest.yield_fixture()
    def db(app):
        # if not database_exists(str(db_.engine.url)) and \
        #         app.config['SQLALCHEMY_DATABASE_URI'] != 'sqlite://':
        #     create_database(db_.engine.url)
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
_______________ ERROR at setup of test_create_blueprint_from_app _______________
file /code/modules/invenio-iiif/tests/test_views.py, line 83
  def test_create_blueprint_from_app(app, mocker):
E       fixture 'mocker' not found
>       available fixtures: add_file, app, app_config, base_app, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, celery_app, celery_config, celery_enable_logging, celery_includes, celery_parameters, celery_session_app, celery_session_worker, celery_worker, celery_worker_parameters, celery_worker_pool, clear_cache, client, cov, db, depends_on_current_app, doctest_namespace, image_object, image_path, image_uuid, instance_path, location, monkeypatch, no_cover, permission_factory, pytestconfig, record_property, record_xml_attribute, records, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, use_celery_app_trap
>       use 'pytest --fixtures [testpath]' for help on them.

/code/modules/invenio-iiif/tests/test_views.py:83
_____________________ ERROR at setup of test_manifest_view _____________________

self = Engine(postgresql+psycopg2://invenio:***@localhost:5432/postgres)
fn = <bound method Pool.connect of <sqlalchemy.pool.QueuePool object at 0x7fce4bb79f98>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4bb79f98>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionFairy'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fce4bb79f98>, threadconns = None
fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool._ConnectionRecord'>
pool = <sqlalchemy.pool.QueuePool object at 0x7fce4bb79f98>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4bb79f98>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
                return self._create_connection()
            except:
                with util.safe_reraise():
>                   self._dec_overflow()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.util.langhelpers.safe_reraise object at 0x7fce4bd451d0>
type_ = None, value = None, traceback = None

    def __exit__(self, type_, value, traceback):
        # see #2703 for notes
        if type_ is None:
            exc_type, exc_value, exc_tb = self._exc_info
            self._exc_info = None  # remove potential circular references
            if not self.warn_only:
>               compat.reraise(exc_type, exc_value, exc_tb)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tp = <class 'psycopg2.OperationalError'>
value = OperationalError('could not connect to server: Connection refused\n\tIs the server running on host "localhost" (127.0....ested address\n\tIs the server running on host "localhost" (::1) and accepting\n\tTCP/IP connections on port 5432?\n',)
tb = <traceback object at 0x7fce4bd516c8>, cause = None

    def reraise(tp, value, tb=None, cause=None):
        if cause is not None:
            assert cause is not value, "Same cause emitted"
            value.__cause__ = cause
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
>       raise value

.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4bb79f98>

    def _do_get(self):
        use_overflow = self._max_overflow > -1
    
        try:
            wait = use_overflow and self._overflow >= self._max_overflow
            return self._pool.get(wait, self._timeout)
        except sqla_queue.Empty:
            # don't do things inside of "except Empty", because when we say
            # we timed out or can't connect and raise, Python 3 tells
            # people the real error is queue.Empty which it isn't.
            pass
        if use_overflow and self._overflow >= self._max_overflow:
            if not wait:
                return self._do_get()
            else:
                raise exc.TimeoutError(
                    "QueuePool limit of size %d overflow %d reached, "
                    "connection timed out, timeout %d"
                    % (self.size(), self.overflow(), self._timeout),
                    code="3o7r",
                )
    
        if self._inc_overflow():
            try:
>               return self._create_connection()

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.QueuePool object at 0x7fce4bb79f98>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fce4bd45198>
pool = <sqlalchemy.pool.QueuePool object at 0x7fce4bb79f98>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool._ConnectionRecord object at 0x7fce4bd45198>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool._ConnectionRecord object at 0x7fce4bd45198>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fce4bb79e80>
cargs = ()
cparams = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError

The above exception was the direct cause of the following exception:

app = <Flask 'test_invenio_iiif_app'>

    @pytest.yield_fixture()
    def db(app):
        # if not database_exists(str(db_.engine.url)) and \
        #         app.config['SQLALCHEMY_DATABASE_URI'] != 'sqlite://':
        #     create_database(db_.engine.url)
>       if not database_exists(str(db_.engine.url)):

tests/conftest.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:484: in database_exists
    return bool(get_scalar_result(engine, text))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/functions/database.py:458: in get_scalar_result
    result_proxy = engine.execute(sql)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2143: in execute
    connection = self.contextual_connect(close_with_result=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2192: in contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2232: in _wrap_pool_connect
    e, dialect, self
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1528: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2228: in _wrap_pool_connect
    return fn()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:434: in connect
    return _ConnectionFairy._checkout(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:831: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:563: in checkout
    rec = pool._do_get()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1259: in _do_get
    self._dec_overflow()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:1256: in _do_get
    return self._create_connection()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:379: in _create_connection
    return _ConnectionRecord(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:508: in __init__
    self.__connect(first_connect_check=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/pool.py:710: in __connect
    connection = pool._invoke_creator(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:437: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dsn = 'host=localhost user=invenio password=dbpass123 port=5432 dbname=postgres'
connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'dbpass123', 'port': 5432, ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.
    
        The connection parameters can be specified as a string:
    
            conn = psycopg2.connect("dbname=test user=postgres password=secret")
    
        or using a set of keyword arguments:
    
            conn = psycopg2.connect(database="test", user="postgres", password="secret")
    
        Or as a mix of both. The basic connection parameters are:
    
        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)
    
        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.
    
        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().
    
        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).
    
        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.
    
        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')
    
        if dsn is None and not kwargs:
            raise TypeError('missing dsn and no parameters')
    
        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused
E       	Is the server running on host "localhost" (127.0.0.1) and accepting
E       	TCP/IP connections on port 5432?
E       could not connect to server: Cannot assign requested address
E       	Is the server running on host "localhost" (::1) and accepting
E       	TCP/IP connections on port 5432?
E        (Background on this error at: http://sqlalche.me/e/e3q8)

.tox/c1/lib/python3.6/site-packages/psycopg2/__init__.py:130: OperationalError
=================================== FAILURES ===================================
____________________________ test_create_thumbnail _____________________________

    def test_create_thumbnail():
        id = uuid.uuid4()
>       create_thumbnail(id,"40")

tests/test_tasks.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/celery/local.py:191: in __call__
    return self._get_current_object()(*a, **kw)
.tox/c1/lib/python3.6/site-packages/celery/app/task.py:392: in __call__
    return self.run(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

uuid = UUID('fdfa30ec-caf7-403f-824c-11c9170471d6'), thumbnail_width = '40'

    @shared_task(ignore_result=True)
    def create_thumbnail(uuid, thumbnail_width):
        """Create the thumbnail for an image."""
        # size = '!' + thumbnail_width + ','
        size = thumbnail_width + ','  # flask_iiif doesn't support ! at the moment
>       thumbnail = IIIFImageAPI.get('v2', uuid, size, 0, 'default', 'jpg')
E       TypeError: get() missing 2 required positional arguments: 'quality' and 'image_format'

invenio_iiif/tasks.py:22: TypeError
=============================== warnings summary ===============================
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_image_opener
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_preview
tests/test_tasks.py::test_create_thumbnail
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_ui_iiif_image_url
tests/test_views.py::test_get_image
tests/test_views.py::test_image_info
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_manifest_view
  /code/modules/invenio-iiif/.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:794: FSADeprecationWarning: SQLALCHEMY_TRACK_MODIFICATIONS adds significant overhead and will be disabled by default in the future.  Set it to True or False to suppress this warning.
    'SQLALCHEMY_TRACK_MODIFICATIONS adds significant overhead and '

tests/test_handlers.py::test_protect_api
  /code/modules/invenio-iiif/.tox/c1/lib/python3.6/site-packages/pkg_resources/_vendor/packaging/specifiers.py:276: DeprecationWarning: Creating a LegacyVersion has been deprecated and will be removed in the next major release
    DeprecationWarning,

tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_protect_api
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_handlers.py::test_image_opener
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_version
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_invenio_iiif.py::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFMetadata::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_init
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_manifest.py::TestIIIFManifest::test_dumps
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_previewable_extensions
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_can_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_previewer.py::test_preview
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_tasks.py::test_create_thumbnail
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_iiif_image_key
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_utils.py::test_ui_iiif_image_url
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_get_image
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_image_info
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_get_restricted_image_info
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint_from_app
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_blueprint
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_create_url_rule
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
tests/test_views.py::test_manifest_view
  /code/modules/invenio-iiif/.tox/c1/lib/python3.6/site-packages/pkg_resources/_vendor/packaging/version.py:114: DeprecationWarning: Creating a LegacyVersion has been deprecated and will be removed in the next major release
    DeprecationWarning,

-- Docs: https://docs.pytest.org/en/latest/warnings.html

---------- coverage: platform linux, python 3.6.15-final-0 -----------
Name                        Stmts   Miss Branch BrPart  Cover
-------------------------------------------------------------
invenio_iiif/__init__.py        5      0      0      0   100%
invenio_iiif/config.py          8      0      0      0   100%
invenio_iiif/ext.py            25      0     10      1    97%
invenio_iiif/handlers.py       30     16      6      1    42%
invenio_iiif/manifest.py       87     64     42      0    24%
invenio_iiif/previewer.py      24     11      4      0    46%
invenio_iiif/tasks.py           7      0      0      0   100%
invenio_iiif/utils.py          16      9      2      0    39%
invenio_iiif/version.py         3      0      0      0   100%
invenio_iiif/views.py          62     32     16      0    41%
-------------------------------------------------------------
TOTAL                         267    132     80      2    45%
Coverage HTML written to dir htmlcov
Coverage XML written to file coverage.xml

========= 1 failed, 6 passed, 2542 warnings, 14 error in 24.17 seconds =========
ERROR: InvocationError for command /code/modules/invenio-iiif/.tox/c1/bin/pytest --cov=invenio_iiif tests -v -vv -s --cov-branch --cov-report=term --cov-report=xml --cov-report=html --basetemp=/code/modules/invenio-iiif/.tox/c1/tmp (exited with code 1)
___________________________________ summary ____________________________________
ERROR:   c1: commands failed
